# Adapted from https://github.com/Uniswap/uniswap-v2-subgraph

type StreamSwapFactory @entity {
  # factory address
  id: ID!

  # pool info
  poolCount: Int!

  # transactions
  txCount: BigInt!
}

type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # Adress of the underlying (non-super) token
  underlyingToken: Bytes!

  # used for other stats like marketcap
  totalSupply: BigInt!

  # transactions across all pairs
  txCount: BigInt!

  # liquidity across all pairs
  totalLiquidity: BigDecimal!

  # derived fields
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
}

type PooledToken @entity {
  # pool address + token index
  id: ID!

  # links to other data
  pool: Pool!
  token: Token!

  # qty stored of this token in the pool
  reserve: BigDecimal!
  # lifetime volume stats
  volume: BigDecimal!
}

type Pool @entity {
  # pool address
  id: ID!

  # tokens stored in the pool
  tokens: [PooledToken!]! @derivedFrom(field: "pool")

  txCount: BigInt!

  # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
  # derived fields
  poolHourData: [PoolHourData!]! @derivedFrom(field: "pool")
  instantSwaps: [InstantSwap!]! @derivedFrom(field: "pool")
  continuousSwaps: [ContinuousSwap!]! @derivedFrom(field: "pool")
}

type User @entity {
  id: ID!
  instantSwaps: [InstantSwap!]! @derivedForm(field: "user")
  continuousSwaps: [ContinuousSwap!]! @derivedFrom(field: "user")
}

type Transaction @entity {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!

  instantSwaps: [InstantSwap!]! @derivedFrom(field: "transaction")
  continuousSwaps: [ContinuousSwap!]! @derivedFrom(field: "transaction")
}

type InstantSwap @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  pool: Pool!
  user: User!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pool

  tokenIn: Token!
  tokenOut: Token!

  amountIn: BigDecimal!
  amountOut: BigDecimal!
}

type ContinuousSwap @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  pool: Pool!
  user: User!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pool

  tokenIn: Token!
  tokenOut: Token!

  # whether this swap is still running, once stopped, it can never be reactivated
  active: Boolean!

  # Rate is in wei/s or more accurately `10^(-token.decimals)/s`
  rateIn: BigDecimal!
  # this will be zero once it is stopped
  currentRateOut: BigDecimal!

  # info to make calculating amount swapped live, store integration over all previous rates and allow for live updates
  # with the current data
  totalOutUntilLastSwap: BigDecimal!
  timestampLastSwap: BigInt!
}

# Data accumulated and condensed into day stats for all of Uniswap
type StreamSwapDayData @entity {
  id: ID! # timestamp rounded to current day by dividing by 86400
  date: Int!
  txCount: BigInt!
}

type HourlyPooledToken @entity {
  id: ID!
  token: Token!
  reserve: BigDecimal!
  hourlyVolume: BigDecimal!
  # hourly number of transactions just for this pooled token
  hourlyTxns: BigInt!
}

type PoolHourData @entity {
  id: ID!
  hourStartUnix: Int! # unix timestamp for start of hour
  pool: Pool!

  reserves: [HourlyPooledToken!]!

  # total supply for LP historical returns
  totalSupply: BigDecimal!

  # volume stats
  hourlyTxns: BigInt!
}

type DailyPooledToken @entity {
  id: ID!
  token: Token!
  reserve: BigDecimal!
  dailyVolume: BigDecimal!
  # hourly number of transactions just for this pooled token
  dailyTxns: BigInt!
}

# Data accumulated and condensed into day stats for each exchange
type PoolDayData @entity {
  id: ID!
  date: Int!
  poolAddress: Bytes!

  tokens: [DailyPooledToken!]!

  # total supply for LP historical returns
  totalSupply: BigDecimal!

  # volume stats
  dailyTxns: BigInt!
}

type TokenDayData @entity {
  id: ID!
  date: Int!
  token: Token!

  # volume stats
  dailyVolumeToken: BigDecimal!
  dailyTxns: BigInt!

  # liquidity stats
  totalLiquidityToken: BigDecimal!
}