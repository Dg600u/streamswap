# Adapted from https://github.com/Uniswap/uniswap-v2-subgraph

type StreamSwapFactory @entity {
  # factory address
  id: ID! #done

  # pool info
  poolCount: Int! #done
}

type Token @entity {
  # token address
  id: ID! #done

  # mirrored from the smart contract
  symbol: String! #done
  name: String! #done
  decimals: BigInt! #done

  # Adress of the underlying (non-super) token
  underlyingToken: Bytes! #done

  # used for other stats like marketcap
  totalSupply: BigInt! #done

  instantSwapCount: BigInt! #done
  continuousSwapSetCount: BigInt! #done

  # liquidity across all pools
  totalLiquidity: BigDecimal! #done

  # derived fields
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
}

type PooledToken @entity {
  # tokenId + "-" + pool address
  id: ID! #done

  # links to other data
  pool: Pool! #done
  token: Token! #done

  # qty stored of this token in the pool
  reserve: BigDecimal! #done
  # lifetime volume stats
  volume: BigDecimal! #done
}

type Pool @entity {
  # pool address
  id: ID! #done

  # tokens stored in the pool
  tokens: [PooledToken!]! @derivedFrom(field: "pool")
  tokenAddresses: [Bytes!]!

  instantSwapCount: BigInt! #done
  continuousSwapSetCount: BigInt! #done

  # creation stats
  createdAtTimestamp: BigInt! #done
  createdAtBlockNumber: BigInt! #done

  # derived fields
  poolHourData: [PoolHourData!]! @derivedFrom(field: "pool")
  instantSwaps: [InstantSwap!]! @derivedFrom(field: "pool")
  continuousSwaps: [ContinuousSwap!]! @derivedFrom(field: "pool")
}

type User @entity {
  id: ID! #done
  instantSwaps: [InstantSwap!]! @derivedFrom(field: "user")
  continuousSwaps: [ContinuousSwap!]! @derivedFrom(field: "user")
}

type Transaction @entity {
  id: ID! # txn hash
  blockNumber: BigInt! #done
  timestamp: BigInt! #done

  instantSwaps: [InstantSwap!]! @derivedFrom(field: "transaction")
  continuousSwaps: [ContinuousSwap!]! @derivedFrom(field: "transaction")
}

type InstantSwap @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID! #done
  pool: Pool! #done
  user: User! #done
  transaction: Transaction! #done
  # need this to pull recent txns for specific token or pool
  timestamp: BigInt! #done

  tokenIn: Token! #done
  tokenOut: Token! #done

  amountIn: BigDecimal! #done
  amountOut: BigDecimal! #done
}

type ContinuousSwap @entity {
  # base58(userId + poolId + tokenInId + tokenOutId)
  id: ID! #done
  pool: Pool! #done
  user: User! #done
  # last transaction that set this swap (not output rate update)
  transaction: Transaction! #done
  # last transaction that set this swap (not output rate update)
  timestamp: BigInt! #done

  tokenIn: Token! #done
  tokenOut: Token! #done

  # tokens/s
  minOut: BigDecimal! #done
  # tokens/s
  maxOut: BigDecimal! #done

  # whether this swap is still running, once stopped, it can never be reactivated
  active: Boolean! #done

  # Rate is in tokens/s
  rateIn: BigDecimal! #done
  # Rate is in tokens/s, this will be zero once it is stopped
  currentRateOut: BigDecimal! #done

  # info to make calculating amount swapped live, store integration over all previous rates and allow for live updates
  # with the current data
  totalOutUntilLastSwap: BigDecimal! #done
  timestampLastSwap: BigInt! #done
}

type HourlyPooledToken @entity {
  id: ID! #done
  token: Token! #done
  reserve: BigDecimal! #done
  hourlyVolume: BigDecimal! #done
}

type PoolHourData @entity {
  id: ID!
  date: Int! # unix timestamp for start of hour
  pool: Pool!

  tokens: [HourlyPooledToken!]! #done

  # volume stats
  hourlyInstantSwapCount: BigInt! #done
  hourlyContinuousSwapSetCount: BigInt! #done
}

type DailyPooledToken @entity {
  id: ID! #done
  token: Token! #done
  reserve: BigDecimal! #done
  dailyVolume: BigDecimal! #done
}

# Data accumulated and condensed into day stats for each exchange
type PoolDayData @entity {
  id: ID! #done
  date: Int! #done
  pool: Pool! #done

  tokens: [DailyPooledToken!]! #done

  # volume stats
  dailyInstantSwapCount: BigInt! #done
  dailyContinuousSwapSetCount: BigInt! #done
}

type TokenDayData @entity {
  id: ID! #done
  date: Int! #done
  token: Token! #done

  # volume stats
  dailyVolumeToken: BigDecimal! #done
  dailyInstantSwapCount: BigInt! #done
  dailyContinuousSwapSetCount: BigInt! #done

  # liquidity stats
  totalLiquidityToken: BigDecimal! #done
}