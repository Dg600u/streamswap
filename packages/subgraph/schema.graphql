# Adapted from https://github.com/Uniswap/uniswap-v2-subgraph

type StreamSwapFactory @entity {
  # factory address
  id: ID!

  # pool info
  poolCount: Int!

  # total volume
#  totalVolumeUSD: BigDecimal!
#  totalVolumeETH: BigDecimal!

  # untracked values - less confident USD scores
#  untrackedVolumeUSD: BigDecimal!

  # total liquidity
#  totalLiquidityUSD: BigDecimal!
#  totalLiquidityETH: BigDecimal!

  # transactions
  txCount: BigInt!
}

type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # used for other stats like marketcap
  totalSupply: BigInt!

  # token specific volume
#  tradeVolume: BigDecimal!
#  tradeVolumeUSD: BigDecimal!
#  untrackedVolumeUSD: BigDecimal!

  # transactions across all pairs
  txCount: BigInt!

  # liquidity across all pairs
  totalLiquidity: BigDecimal!

  # derived prices
#  derivedETH: BigDecimal

  # derived fields
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
}

type PooledToken @entity {
  # pool address + token index
  id: ID!

  # links to other data
  pool: Pool!
  token: Token!

  # qty stored of this token in the pool
  reserve: BigDecimal!
  # lifetime volume stats
  volume: BigDecimal!
}

type Pool @entity {
  # pool address
  id: ID!

  # tokens stored in the pool
  tokens: [PooledToken!]! @derivedFrom(field: "pool")

  # derived liquidity
#  reserveETH: BigDecimal!
#  reserveUSD: BigDecimal!
  # used for separating per pair reserves and global
#  trackedReserveETH: BigDecimal!

  txCount: BigInt!

  # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
  # derived fields
  poolHourData: [PoolHourData!]! @derivedFrom(field: "pool")
  swaps: [Swap!]! @derivedFrom(field: "pool")
}

type User @entity {
  id: ID!
  swaps: [Swap!]! @derivedForm(field: "user")
}

type Transaction @entity {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!

  swaps: [Swap]!
}

type UnarySwapData {
  amountIn: BigDecimal!
  amountOut: BigDecimal!
}

type ContinuousSwapData {
  # Rate is in wei/s or more accurately `10^(-token.decimals)/s`
  rateIn: BigDecimal!
  currentRateOut: BigDecimal!

  # info to make calculating amount swapped live, store integration over all previous rates and allow for live updates
  # with the current data
  totalOutUntilLastSwap: BigDecimal!
  timestampLastSwap: BigInt!
}

union SwapData = UnarySwapData | ContinuousSwapData

type Swap @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  pool: Pool!
  user: User!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair

  tokenIn: Token!
  tokenOut: Token!

  exchange: SwapData!
}

# Data accumulated and condensed into day stats for all of Uniswap
type StreamSwapDayData @entity {
  id: ID! # timestamp rounded to current day by dividing by 86400
  date: Int!

#  dailyVolumeETH: BigDecimal!
#  dailyVolumeUSD: BigDecimal!
#  dailyVolumeUntracked: BigDecimal!
#
#  totalVolumeETH: BigDecimal!
#  totalLiquidityETH: BigDecimal!
#  totalVolumeUSD: BigDecimal! # Accumulate at each trade, not just calculated off whatever totalVolume is. making it more accurate as it is a live conversion
#  totalLiquidityUSD: BigDecimal!

  txCount: BigInt!
}

type HourlyPooledToken {
  token: Token!
  reserve: BigDecimal!
  hourlyVolume: BigDecimal!
  # hourly number of transactions just for this pooled token
  hourlyTxns: BigInt!
}

type PoolHourData @entity {
  id: ID!
  hourStartUnix: Int! # unix timestamp for start of hour
  pair: Pair!

  reserves: [HourlyPooledToken!]!

  # total supply for LP historical returns
  totalSupply: BigDecimal!

  # derived liquidity
#  reserveUSD: BigDecimal!

  # volume stats
#  hourlyVolumeUSD: BigDecimal!
  hourlyTxns: BigInt!
}

type DailyPooledToken {
  token: Token!
  reserve: BigDecimal!
  dailyVolume: BigDecimal!
  # hourly number of transactions just for this pooled token
  dailyTxns: BigInt!
}

# Data accumulated and condensed into day stats for each exchange
type PoolDayData @entity {
  id: ID!
  date: Int!
  poolAddress: Bytes!

  tokens: [DailyPooledToken!]!

  # total supply for LP historical returns
  totalSupply: BigDecimal!

  # derived liquidity
#  reserveUSD: BigDecimal!

  # volume stats
#  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!
}

type TokenDayData @entity {
  id: ID!
  date: Int!
  token: Token!

  # volume stats
  dailyVolumeToken: BigDecimal!
#  dailyVolumeETH: BigDecimal!
#  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!

  # liquidity stats
  totalLiquidityToken: BigDecimal!
#  totalLiquidityETH: BigDecimal!
#  totalLiquidityUSD: BigDecimal!

  # price stats
#  priceUSD: BigDecimal!
}