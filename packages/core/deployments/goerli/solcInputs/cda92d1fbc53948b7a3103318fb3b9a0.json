{
  "language": "Solidity",
  "sources": {
    "contracts/balancer/BColor.sol": {
      "content": "// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.7.6;\n\nabstract contract BColor {\n    function getColor()\n        virtual external view\n        returns (bytes32);\n}\n\ncontract BBronze is BColor {\n    function getColor()\n        override external view\n        returns (bytes32) {\n            return bytes32(\"BRONZE\");\n        }\n}\n"
    },
    "contracts/balancer/BConst.sol": {
      "content": "// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.7.6;\n\nimport \"./BColor.sol\";\n\ncontract BConst is BBronze {\n    uint public constant BONE              = 10**18;\n\n    uint public constant MIN_BOUND_TOKENS  = 2;\n    uint public constant MAX_BOUND_TOKENS  = 8;\n\n    uint public constant MIN_FEE           = BONE / 10**6;\n    uint public constant MAX_FEE           = BONE / 10;\n    uint public constant EXIT_FEE          = 0;\n\n    uint public constant MIN_WEIGHT        = BONE;\n    uint public constant MAX_WEIGHT        = BONE * 50;\n    uint public constant MAX_TOTAL_WEIGHT  = BONE * 50;\n    uint public constant MIN_BALANCE       = BONE / 10**12;\n\n    uint public constant INIT_POOL_SUPPLY  = BONE * 100;\n\n    uint public constant MIN_BPOW_BASE     = 1 wei;\n    uint public constant MAX_BPOW_BASE     = (2 * BONE) - 1 wei;\n    uint public constant BPOW_PRECISION    = BONE / 10**10;\n\n    uint public constant MAX_IN_RATIO      = BONE / 2;\n    uint public constant MAX_OUT_RATIO     = (BONE / 3) + 1 wei;\n}\n"
    },
    "contracts/balancer/BNum.sol": {
      "content": "// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.7.6;\n\nimport \"./BConst.sol\";\n\ncontract BNum is BConst {\n\n    function btoi(uint a)\n        internal pure \n        returns (uint)\n    {\n        return a / BONE;\n    }\n\n    function bfloor(uint a)\n        internal pure\n        returns (uint)\n    {\n        return btoi(a) * BONE;\n    }\n\n    function badd(uint a, uint b)\n        internal pure\n        returns (uint)\n    {\n        uint c = a + b;\n        require(c >= a, \"ERR_ADD_OVERFLOW\");\n        return c;\n    }\n\n    function bsub(uint a, uint b)\n        internal pure\n        returns (uint)\n    {\n        (uint c, bool flag) = bsubSign(a, b);\n        require(!flag, \"ERR_SUB_UNDERFLOW\");\n        return c;\n    }\n\n    function bsubSign(uint a, uint b)\n        internal pure\n        returns (uint, bool)\n    {\n        if (a >= b) {\n            return (a - b, false);\n        } else {\n            return (b - a, true);\n        }\n    }\n\n    function bmul(uint a, uint b)\n        internal pure\n        returns (uint)\n    {\n        uint c0 = a * b;\n        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\n        uint c1 = c0 + (BONE / 2);\n        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\n        uint c2 = c1 / BONE;\n        return c2;\n    }\n\n    function bdiv(uint a, uint b)\n        internal pure\n        returns (uint)\n    {\n        require(b != 0, \"ERR_DIV_ZERO\");\n        uint c0 = a * BONE;\n        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\n        uint c1 = c0 + (b / 2);\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\n        uint c2 = c1 / b;\n        return c2;\n    }\n\n    // DSMath.wpow\n    function bpowi(uint a, uint n)\n        internal pure\n        returns (uint)\n    {\n        uint z = n % 2 != 0 ? a : BONE;\n\n        for (n /= 2; n != 0; n /= 2) {\n            a = bmul(a, a);\n\n            if (n % 2 != 0) {\n                z = bmul(z, a);\n            }\n        }\n        return z;\n    }\n\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\n    // of approximation of b^0.w\n    function bpow(uint base, uint exp)\n        internal pure\n        returns (uint)\n    {\n        require(base >= MIN_BPOW_BASE, \"ERR_BPOW_BASE_TOO_LOW\");\n        require(base <= MAX_BPOW_BASE, \"ERR_BPOW_BASE_TOO_HIGH\");\n\n        uint whole  = bfloor(exp);   \n        uint remain = bsub(exp, whole);\n\n        uint wholePow = bpowi(base, btoi(whole));\n\n        if (remain == 0) {\n            return wholePow;\n        }\n\n        uint partialResult = bpowApprox(base, remain, BPOW_PRECISION);\n        return bmul(wholePow, partialResult);\n    }\n\n    function bpowApprox(uint base, uint exp, uint precision)\n        internal pure\n        returns (uint)\n    {\n        // term 0:\n        uint a     = exp;\n        (uint x, bool xneg)  = bsubSign(base, BONE);\n        uint term = BONE;\n        uint sum   = term;\n        bool negative = false;\n\n\n        // term(k) = numer / denom \n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\n        // continue until term is less than precision\n        for (uint i = 1; term >= precision; i++) {\n            uint bigK = i * BONE;\n            (uint c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\n            term = bmul(term, bmul(c, x));\n            term = bdiv(term, bigK);\n            if (term == 0) break;\n\n            if (xneg) negative = !negative;\n            if (cneg) negative = !negative;\n            if (negative) {\n                sum = bsub(sum, term);\n            } else {\n                sum = badd(sum, term);\n            }\n        }\n\n        return sum;\n    }\n\n}\n"
    },
    "contracts/balancer/BMath.sol": {
      "content": "// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.7.6;\n\nimport \"./BNum.sol\";\n\ncontract BMath is BBronze, BConst, BNum {\n    /**********************************************************************************************\n    // calcSpotPrice                                                                             //\n    // sP = spotPrice                                                                            //\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\n    // wO = tokenWeightOut                                                                       //\n    // sF = swapFee                                                                              //\n    **********************************************************************************************/\n    function calcSpotPrice(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint swapFee\n    )\n        public pure\n        returns (uint spotPrice)\n    {\n        uint numer = bdiv(tokenBalanceIn, tokenWeightIn);\n        uint denom = bdiv(tokenBalanceOut, tokenWeightOut);\n        uint ratio = bdiv(numer, denom);\n        uint scale = bdiv(BONE, bsub(BONE, swapFee));\n        return  (spotPrice = bmul(ratio, scale));\n    }\n\n    /**********************************************************************************************\n    // calcOutGivenIn                                                                            //\n    // aO = tokenAmountOut                                                                       //\n    // bO = tokenBalanceOut                                                                      //\n    // bI = tokenBalanceIn              /      /            bI             \\    (wI / wO) \\      //\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\n    // wI = tokenWeightIn               \\      \\ ( bI + ( aI * ( 1 - sF )) /              /      //\n    // wO = tokenWeightOut                                                                       //\n    // sF = swapFee                                                                              //\n    **********************************************************************************************/\n    function calcOutGivenIn(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint tokenAmountIn,\n        uint swapFee\n    )\n        public pure\n        returns (uint tokenAmountOut)\n    {\n        uint weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\n        uint adjustedIn = bsub(BONE, swapFee);\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\n        uint y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\n        uint foo = bpow(y, weightRatio);\n        uint bar = bsub(BONE, foo);\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\n        return tokenAmountOut;\n    }\n\n    /**********************************************************************************************\n    // calcInGivenOut                                                                            //\n    // aI = tokenAmountIn                                                                        //\n    // bO = tokenBalanceOut               /  /     bO      \\    (wO / wI)      \\                 //\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\n    // aO = tokenAmountOut    aI =        \\  \\ ( bO - aO ) /                   /                 //\n    // wI = tokenWeightIn           --------------------------------------------                 //\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\n    // sF = swapFee                                                                              //\n    **********************************************************************************************/\n    function calcInGivenOut(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint tokenAmountOut,\n        uint swapFee\n    )\n        public pure\n        returns (uint tokenAmountIn)\n    {\n        uint weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\n        uint diff = bsub(tokenBalanceOut, tokenAmountOut);\n        uint y = bdiv(tokenBalanceOut, diff);\n        uint foo = bpow(y, weightRatio);\n        foo = bsub(foo, BONE);\n        tokenAmountIn = bsub(BONE, swapFee);\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\n        return tokenAmountIn;\n    }\n\n    /**********************************************************************************************\n    // calcPoolOutGivenSingleIn                                                                  //\n    // pAo = poolAmountOut         /                                              \\              //\n    // tAi = tokenAmountIn        ///      /     //    wI \\      \\\\       \\     wI \\             //\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\    --  \\            //\n    // tW = totalWeight     pAo=||  \\      \\     \\\\    tW /      //         | ^ tW   | * pS - pS //\n    // tBi = tokenBalanceIn      \\\\  ------------------------------------- /        /            //\n    // pS = poolSupply            \\\\                    tBi               /        /             //\n    // sF = swapFee                \\                                              /              //\n    **********************************************************************************************/\n    function calcPoolOutGivenSingleIn(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint poolSupply,\n        uint totalWeight,\n        uint tokenAmountIn,\n        uint swapFee\n    )\n        public pure\n        returns (uint poolAmountOut)\n    {\n        // Charge the trading fee for the proportion of tokenAi\n        //  which is implicitly traded to the other pool tokens.\n        // That proportion is (1- weightTokenIn)\n        // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\n        uint normalizedWeight = bdiv(tokenWeightIn, totalWeight);\n        uint zaz = bmul(bsub(BONE, normalizedWeight), swapFee); \n        uint tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\n\n        uint newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\n        uint tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\n\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\n        uint poolRatio = bpow(tokenInRatio, normalizedWeight);\n        uint newPoolSupply = bmul(poolRatio, poolSupply);\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\n        return poolAmountOut;\n    }\n\n    /**********************************************************************************************\n    // calcSingleInGivenPoolOut                                                                  //\n    // tAi = tokenAmountIn              //(pS + pAo)\\     /    1    \\\\                           //\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\n    // pAo = poolAmountOut              \\\\    pS    /     \\(wI / tW)//                           //\n    // bI = balanceIn          tAi =  --------------------------------------------               //\n    // wI = weightIn                              /      wI  \\                                   //\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\n    // sF = swapFee                               \\      tW  /                                   //\n    **********************************************************************************************/\n    function calcSingleInGivenPoolOut(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint poolSupply,\n        uint totalWeight,\n        uint poolAmountOut,\n        uint swapFee\n    )\n        public pure\n        returns (uint tokenAmountIn)\n    {\n        uint normalizedWeight = bdiv(tokenWeightIn, totalWeight);\n        uint newPoolSupply = badd(poolSupply, poolAmountOut);\n        uint poolRatio = bdiv(newPoolSupply, poolSupply);\n      \n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\n        uint boo = bdiv(BONE, normalizedWeight); \n        uint tokenInRatio = bpow(poolRatio, boo);\n        uint newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\n        uint tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way \n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\n        uint zar = bmul(bsub(BONE, normalizedWeight), swapFee);\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\n        return tokenAmountIn;\n    }\n\n    /**********************************************************************************************\n    // calcSingleOutGivenPoolIn                                                                  //\n    // tAo = tokenAmountOut            /      /                                             \\\\   //\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\     /    1    \\      \\\\  //\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\n    // ps = poolSupply                \\      \\\\          pS           /     \\(wO / tW)/      //  //\n    // wI = tokenWeightIn      tAo =   \\      \\                                             //   //\n    // tW = totalWeight                    /     /      wO \\       \\                             //\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\n    // eF = exitFee                        \\     \\      tW /       /                             //\n    **********************************************************************************************/\n    function calcSingleOutGivenPoolIn(\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint poolSupply,\n        uint totalWeight,\n        uint poolAmountIn,\n        uint swapFee\n    )\n        public pure\n        returns (uint tokenAmountOut)\n    {\n        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\n        // charge exit fee on the pool token side\n        // pAiAfterExitFee = pAi*(1-exitFee)\n        uint poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\n        uint newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\n        uint poolRatio = bdiv(newPoolSupply, poolSupply);\n     \n        // newBalTo = poolRatio^(1/weightTo) * balTo;\n        uint tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\n        uint newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\n\n        uint tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\n\n        // charge swap fee on the output token side \n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\n        uint zaz = bmul(bsub(BONE, normalizedWeight), swapFee); \n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\n        return tokenAmountOut;\n    }\n\n    /**********************************************************************************************\n    // calcPoolInGivenSingleOut                                                                  //\n    // pAi = poolAmountIn               // /               tAo             \\\\     / wO \\     \\   //\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\   | ---- |     \\  //\n    // tAo = tokenAmountOut      pS - ||   \\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\ tW /  * pS | //\n    // ps = poolSupply                 \\\\ -----------------------------------/                /  //\n    // wO = tokenWeightOut  pAi =       \\\\               bO                 /                /   //\n    // tW = totalWeight           -------------------------------------------------------------  //\n    // sF = swapFee                                        ( 1 - eF )                            //\n    // eF = exitFee                                                                              //\n    **********************************************************************************************/\n    function calcPoolInGivenSingleOut(\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint poolSupply,\n        uint totalWeight,\n        uint tokenAmountOut,\n        uint swapFee\n    )\n        public pure\n        returns (uint poolAmountIn)\n    {\n\n        // charge swap fee on the output token side \n        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\n        uint zoo = bsub(BONE, normalizedWeight);\n        uint zar = bmul(zoo, swapFee); \n        uint tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\n\n        uint newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\n        uint tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\n\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\n        uint poolRatio = bpow(tokenOutRatio, normalizedWeight);\n        uint newPoolSupply = bmul(poolRatio, poolSupply);\n        uint poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\n\n        // charge exit fee on the pool token side\n        // pAi = pAiAfterExitFee/(1-exitFee)\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\n        return poolAmountIn;\n    }\n\n\n}\n"
    },
    "contracts/StreamSwapPool.sol": {
      "content": "// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n// SPDX-License-Identifier: GPLv3\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport \"hardhat/console.sol\";\n\nimport {\n    ISuperfluid,\n    ISuperToken,\n    ISuperApp,\n    ISuperAgreement,\n    SuperAppDefinitions\n} from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\";\n//\"@superfluid-finance/ethereum-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\";\n\nimport {\n    IConstantFlowAgreementV1\n} from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\";\n\nimport {\n    SuperAppBase\n} from \"@superfluid-finance/ethereum-contracts/contracts/apps/SuperAppBase.sol\";\n\nimport \"./balancer/BToken.sol\";\nimport \"./balancer/BMath.sol\";\n\nimport \"./StreamSwapLibrary.sol\";\n\ncontract StreamSwapPool is SuperAppBase, BBronze, BToken {\n\n    using StreamSwapLibrary for StreamSwapLibrary.Context;\n\n    struct SuperTokenVarsHelper {\n        address tokenIn;\n        address tokenOut;\n        uint tokenInBalance;\n        uint tokenOutBalance;\n    }\n\n    event LOG_SWAP(\n        address indexed caller,\n        address indexed tokenIn,\n        address indexed tokenOut,\n        uint256         tokenAmountIn,\n        uint256         tokenAmountOut\n    );\n\n    event LOG_JOIN(\n        address indexed caller,\n        address indexed tokenIn,\n        uint256         tokenAmountIn\n    );\n\n    event LOG_EXIT(\n        address indexed caller,\n        address indexed tokenOut,\n        uint256         tokenAmountOut\n    );\n\n    event LOG_CALL(\n        bytes4  indexed sig,\n        address indexed caller,\n        bytes           data\n    ) anonymous;\n\n    modifier _logs_() {\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\n        _;\n    }\n\n    modifier _lock_() {\n        require(!_mutex, \"ERR_REENTRY\");\n        _mutex = true;\n        _;\n        _mutex = false;\n    }\n\n    modifier _viewlock_() {\n        require(!_mutex, \"ERR_REENTRY\");\n        _;\n    }\n\n    bool private _mutex;\n\n    address private _factory;    // BFactory address to push token exitFee to\n    address private _controller; // has CONTROL role\n    bool private _publicSwap; // true if PUBLIC can call SWAP functions\n\n    // `setSwapFee` and `finalize` require CONTROL\n    // `finalize` sets `PUBLIC can SWAP`, `PUBLIC can JOIN`\n    uint private _swapFee;\n    bool private _finalized;\n\n    address[] private _superTokens;\n    mapping(address => address) _underlyingToSuperToken;\n\n    mapping(address => StreamSwapLibrary.Record) private  _records;\n    uint private _totalWeight;\n\n    StreamSwapLibrary.Context _streamSwapContext;\n\n    constructor(\n        ISuperfluid host,\n        IConstantFlowAgreementV1 cfa\n    ) {\n\n        require(address(host) != address(0), \"host is zero address\");\n        require(address(cfa) != address(0), \"cfa is zero address\");\n\n        uint256 configWord =\n            SuperAppDefinitions.APP_LEVEL_FINAL |\n            SuperAppDefinitions.BEFORE_AGREEMENT_CREATED_NOOP |\n            SuperAppDefinitions.BEFORE_AGREEMENT_UPDATED_NOOP |\n            SuperAppDefinitions.BEFORE_AGREEMENT_TERMINATED_NOOP;\n\n        host.registerApp(configWord);\n\n        _streamSwapContext.host = host;\n        _streamSwapContext.cfa = cfa;\n\n        _streamSwapContext.initialize();\n\n        // balancer construct\n        _controller = msg.sender;\n        _factory = msg.sender;\n        _swapFee = MIN_FEE;\n        _publicSwap = false;\n        _finalized = false;\n    }\n\n    modifier onlyHost() {\n        require(msg.sender == address(_streamSwapContext.host), \"ERR HOST ONLY\");\n        _;\n    }\n\n    /**************************************************************************\n     * SuperApp callbacks\n     *************************************************************************/\n\n    function afterAgreementCreated(\n        ISuperToken _superToken,\n        address, // _agreementClass,\n        bytes32, // _agreementId,\n        bytes calldata /*_agreementData*/,\n        bytes calldata ,// _cbdata,\n        bytes calldata _ctx\n    )\n        external override\n        onlyHost\n        returns (bytes memory newCtx)\n    {\n        console.log(\"agreement create\");\n        newCtx = _streamSwapContext.makeTrade(_superToken, _ctx, _records);\n    }\n\n    function afterAgreementUpdated(\n        ISuperToken _superToken,\n        address _agreementClass,\n        bytes32 ,//_agreementId,\n        bytes calldata , //_agreementData,\n        bytes calldata ,//_cbdata,\n        bytes calldata _ctx\n    )\n        external override\n        onlyHost\n        returns (bytes memory newCtx)\n    {\n        console.log(\"agreement update\");\n        newCtx = _streamSwapContext.makeTrade(_superToken, _ctx, _records);\n    }\n\n    function afterAgreementTerminated(\n        ISuperToken _superToken,\n        address _agreementClass,\n        bytes32 ,//_agreementId,\n        bytes calldata /*_agreementData*/,\n        bytes calldata ,//_cbdata,\n        bytes calldata _ctx\n    )\n        external override\n        onlyHost\n        returns (bytes memory newCtx)\n    {\n        console.log(\"agreement term\");\n        newCtx = _streamSwapContext.makeTrade(_superToken, _ctx, _records);\n    }\n\n    /**************************************************************************\n     * Balancer Pool\n     *************************************************************************/\n\n    function isPublicSwap()\n        external view\n        returns (bool)\n    {\n        return _publicSwap;\n    }\n\n    function isFinalized()\n        external view\n        returns (bool)\n    {\n        return _finalized;\n    }\n\n    function isBound(address t)\n        external view\n        returns (bool)\n    {\n        return _records[t].bound;\n    }\n\n    function getNumTokens()\n        external view\n        returns (uint) \n    {\n        return _superTokens.length;\n    }\n\n    function getCurrentTokens()\n        external view _viewlock_\n        returns (address[] memory tokens)\n    {\n        return _superTokens;\n    }\n\n    function getFinalTokens()\n        external view\n        _viewlock_\n        returns (address[] memory tokens)\n    {\n        require(_finalized, \"ERR_NOT_FINALIZED\");\n        return _superTokens;\n    }\n\n    function getDenormalizedWeight(address token)\n        external view\n        _viewlock_\n        returns (uint)\n    {\n\n        require(_records[token].bound, \"ERR_NOT_BOUND\");\n        return _records[token].denorm;\n    }\n\n    function getTotalDenormalizedWeight()\n        external view\n        _viewlock_\n        returns (uint)\n    {\n        return _totalWeight;\n    }\n\n    function getNormalizedWeight(address token)\n        external view\n        _viewlock_\n        returns (uint)\n    {\n\n        require(_records[token].bound, \"ERR_NOT_BOUND\");\n        uint denorm = _records[token].denorm;\n        return StreamSwapLibrary.bdiv(denorm, _totalWeight);\n    }\n\n    function getBalance(address token)\n        external view\n        _viewlock_\n        returns (uint)\n    {\n        return getSuperBalance(_underlyingToSuperToken[token]);\n    }\n\n    function getSuperBalance(address token)\n        internal view\n        returns (uint)\n    {\n        require(_records[token].bound, \"ERR_NOT_BOUND\");\n\n        // call balanceOf is safe here because it can only be called on a SuperToken\n        return IERC20(token).balanceOf(address(this));\n    }\n\n    function getSwapFee()\n        external view\n        _viewlock_\n        returns (uint)\n    {\n        return _swapFee;\n    }\n\n    function getController()\n        external view\n        _viewlock_\n        returns (address)\n    {\n        return _controller;\n    }\n\n    function setSwapFee(uint swapFee)\n        external\n        _logs_\n        _lock_\n    { \n        require(!_finalized, \"ERR_IS_FINALIZED\");\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n        require(swapFee >= MIN_FEE, \"ERR_MIN_FEE\");\n        require(swapFee <= MAX_FEE, \"ERR_MAX_FEE\");\n        _swapFee = swapFee;\n    }\n\n    function setController(address manager)\n        external\n        _logs_\n        _lock_\n    {\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n        _controller = manager;\n    }\n\n    function setPublicSwap(bool public_)\n        external\n        _logs_\n        _lock_\n    {\n        require(!_finalized, \"ERR_IS_FINALIZED\");\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n        _publicSwap = public_;\n    }\n\n    function finalize()\n        external\n        _logs_\n        _lock_\n    {\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n        require(!_finalized, \"ERR_IS_FINALIZED\");\n        require(_superTokens.length >= MIN_BOUND_TOKENS, \"ERR_MIN_TOKENS\");\n\n        _finalized = true;\n        _publicSwap = true;\n\n        _mintPoolShare(INIT_POOL_SUPPLY);\n        _pushPoolShare(msg.sender, INIT_POOL_SUPPLY);\n    }\n\n\n    function bind(address token, uint balance, uint denorm)\n        external\n        _logs_\n        // _lock_  Bind does not lock because it jumps to `rebind`, which does\n    {\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n        require(!_records[token].bound, \"ERR_IS_BOUND\");\n        require(!_finalized, \"ERR_IS_FINALIZED\");\n\n        require(_superTokens.length < MAX_BOUND_TOKENS, \"ERR_MAX_TOKENS\");\n\n        require(address(_streamSwapContext.host) == ISuperToken(token).getHost(), \"ERR_BAD_HOST\");\n\n        _records[token] = StreamSwapLibrary.Record({\n            bound: true,\n            index: _superTokens.length,\n            denorm: 0,    // denorm will be validated\n            balance: 0\n        });\n        _superTokens.push(token);\n        _underlyingToSuperToken[ISuperToken(token).getUnderlyingToken()] = token;\n        IERC20(ISuperToken(token).getUnderlyingToken()).approve(token, type(uint).max);\n        rebind(token, balance, denorm);\n    }\n\n    function rebind(address token, uint balance, uint denorm)\n        public\n        _logs_\n        _lock_\n    {\n\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n        require(_records[token].bound, \"ERR_NOT_BOUND\");\n        require(!_finalized, \"ERR_IS_FINALIZED\");\n\n        require(denorm >= MIN_WEIGHT, \"ERR_MIN_WEIGHT\");\n        require(denorm <= MAX_WEIGHT, \"ERR_MAX_WEIGHT\");\n\n        StreamSwapLibrary.Record memory oldRecord = _records[token];\n\n        // Adjust the denorm and totalWeight\n        uint oldWeight = _records[token].denorm;\n        if (denorm > oldWeight) {\n            _totalWeight = StreamSwapLibrary.badd(_totalWeight, StreamSwapLibrary.bsub(denorm, oldWeight));\n            require(_totalWeight <= MAX_TOTAL_WEIGHT, \"ERR_MAX_TOTAL_WEIGHT\");\n        } else if (denorm < oldWeight) {\n            _totalWeight = StreamSwapLibrary.bsub(_totalWeight, StreamSwapLibrary.bsub(oldWeight, denorm));\n        }        \n        _records[token].denorm = denorm;\n\n        // Adjust the balance record and actual token balance\n        uint oldBalance = getSuperBalance(token);\n        _records[token].balance = balance;\n        if (balance > oldBalance) {\n            _pullUnderlying(token, msg.sender, StreamSwapLibrary.bsub(balance, oldBalance));\n        } else if (balance < oldBalance) {\n            // In this case liquidity is being withdrawn, so charge EXIT_FEE\n            uint tokenBalanceWithdrawn = StreamSwapLibrary.bsub(oldBalance, balance);\n            uint tokenExitFee = StreamSwapLibrary.bmul(tokenBalanceWithdrawn, EXIT_FEE);\n            _pushUnderlying(token, msg.sender, StreamSwapLibrary.bsub(tokenBalanceWithdrawn, tokenExitFee));\n            _pushUnderlying(token, _factory, tokenExitFee);\n        }\n\n        _streamSwapContext.updateFlowRates(token, _records, oldRecord);\n    }\n\n    function unbind(address token)\n        external\n        _logs_\n        _lock_\n    {\n\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n        require(_records[token].bound, \"ERR_NOT_BOUND\");\n        require(!_finalized, \"ERR_IS_FINALIZED\");\n\n        uint tokenBalance = getSuperBalance(token);\n        uint tokenExitFee = StreamSwapLibrary.bmul(tokenBalance, EXIT_FEE);\n\n        _totalWeight = StreamSwapLibrary.bsub(_totalWeight, _records[token].denorm);\n\n        // Swap the token-to-unbind with the last token,\n        // then delete the last token\n        uint index = _records[token].index;\n        uint last = _superTokens.length - 1;\n        _superTokens[index] = _superTokens[last];\n        _records[_superTokens[index]].index = index;\n        _superTokens.pop();\n        _records[token] = StreamSwapLibrary.Record({\n            bound: false,\n            index: 0,\n            denorm: 0,\n            balance: 0\n        });\n\n        // todo: wipe streams\n\n        IERC20(ISuperToken(token).getUnderlyingToken()).approve(token, 0);\n\n        _pushUnderlying(token, msg.sender, StreamSwapLibrary.bsub(tokenBalance, tokenExitFee));\n        _pushUnderlying(token, _factory, tokenExitFee);\n    }\n\n    function getSpotPrice(address tokenIn, address tokenOut)\n        external view\n        _viewlock_\n        returns (uint spotPrice)\n    {\n        address superTokenIn = _underlyingToSuperToken[tokenIn];\n        address superTokenOut = _underlyingToSuperToken[tokenOut];\n\n        require(_records[superTokenIn].bound, \"ERR_NOT_BOUND\");\n        require(_records[superTokenOut].bound, \"ERR_NOT_BOUND\");\n        StreamSwapLibrary.Record storage inRecord = _records[superTokenIn];\n        StreamSwapLibrary.Record storage outRecord = _records[superTokenOut];\n        return StreamSwapLibrary.calcSpotPrice(getSuperBalance(superTokenIn), inRecord.denorm, getSuperBalance(superTokenOut), outRecord.denorm, _swapFee);\n    }\n\n    function getSpotPriceSansFee(address tokenIn, address tokenOut)\n        external view\n        _viewlock_\n        returns (uint spotPrice)\n    {\n        address superTokenIn = _underlyingToSuperToken[tokenIn];\n        address superTokenOut = _underlyingToSuperToken[tokenOut];\n\n        require(_records[superTokenIn].bound, \"ERR_NOT_BOUND\");\n        require(_records[superTokenOut].bound, \"ERR_NOT_BOUND\");\n        StreamSwapLibrary.Record storage inRecord = _records[superTokenIn];\n        StreamSwapLibrary.Record storage outRecord = _records[superTokenOut];\n        return StreamSwapLibrary.calcSpotPrice(getSuperBalance(superTokenIn), inRecord.denorm, getSuperBalance(superTokenOut), outRecord.denorm, 0);\n    }\n\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn)\n        external\n        _logs_\n        _lock_\n    {\n        require(_finalized, \"ERR_NOT_FINALIZED\");\n\n        uint poolTotal = totalSupply();\n        uint ratio = StreamSwapLibrary.bdiv(poolAmountOut, poolTotal);\n        require(ratio != 0, \"ERR_MATH_APPROX\");\n\n        for (uint i = 0; i < _superTokens.length; i++) {\n            address t = _superTokens[i];\n            StreamSwapLibrary.Record memory oldRecord = _records[t];\n            uint bal = getSuperBalance(t);\n            uint tokenAmountIn = StreamSwapLibrary.bmul(ratio, bal);\n            require(tokenAmountIn != 0, \"ERR_MATH_APPROX\");\n            require(tokenAmountIn <= maxAmountsIn[i], \"ERR_LIMIT_IN\");\n            _records[t].balance = StreamSwapLibrary.badd(bal, tokenAmountIn);\n            emit LOG_JOIN(msg.sender, t, tokenAmountIn);\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\n            _streamSwapContext.updateFlowRates(t, _records, oldRecord);\n        }\n        _mintPoolShare(poolAmountOut);\n        _pushPoolShare(msg.sender, poolAmountOut);\n    }\n\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut)\n        external\n        _logs_\n        _lock_\n    {\n        require(_finalized, \"ERR_NOT_FINALIZED\");\n\n        uint poolTotal = totalSupply();\n        uint exitFee = StreamSwapLibrary.bmul(poolAmountIn, EXIT_FEE);\n        uint pAiAfterExitFee = StreamSwapLibrary.bsub(poolAmountIn, exitFee);\n        uint ratio = StreamSwapLibrary.bdiv(pAiAfterExitFee, poolTotal);\n        require(ratio != 0, \"ERR_MATH_APPROX\");\n\n        _pullPoolShare(msg.sender, poolAmountIn);\n        _pushPoolShare(_factory, exitFee);\n        _burnPoolShare(pAiAfterExitFee);\n\n        for (uint i = 0; i < _superTokens.length; i++) {\n            address t = _superTokens[i];\n            StreamSwapLibrary.Record memory oldRecord = _records[t];\n            uint bal = getSuperBalance(t);\n            uint tokenAmountOut = StreamSwapLibrary.bmul(ratio, bal);\n            require(tokenAmountOut != 0, \"ERR_MATH_APPROX\");\n            require(tokenAmountOut >= minAmountsOut[i], \"ERR_LIMIT_OUT\");\n            _records[t].balance = StreamSwapLibrary.bsub(bal, tokenAmountOut);\n            emit LOG_EXIT(msg.sender, t, tokenAmountOut);\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\n            _streamSwapContext.updateFlowRates(t, _records, oldRecord);\n        }\n\n    }\n\n\n    function swapExactAmountIn(\n        address tokenIn,\n        uint tokenAmountIn,\n        address tokenOut,\n        uint minAmountOut,\n        uint maxPrice\n    )\n        external\n        _logs_\n        _lock_\n        returns (uint tokenAmountOut, uint spotPriceAfter)\n    {\n        SuperTokenVarsHelper memory si = SuperTokenVarsHelper(\n            _underlyingToSuperToken[tokenIn],\n            _underlyingToSuperToken[tokenOut],\n            0,\n            0\n        );\n\n        require(_records[si.tokenIn].bound, \"ERR_NOT_BOUND\");\n        require(_records[si.tokenOut].bound, \"ERR_NOT_BOUND\");\n        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n\n        StreamSwapLibrary.Record storage inRecord = _records[address(si.tokenIn)];\n        StreamSwapLibrary.Record storage outRecord = _records[address(si.tokenOut)];\n\n        si.tokenInBalance = getSuperBalance(si.tokenIn);\n        si.tokenOutBalance = getSuperBalance(si.tokenOut);\n\n        require(tokenAmountIn <= StreamSwapLibrary.bmul(si.tokenInBalance, MAX_IN_RATIO), \"ERR_MAX_IN_RATIO\");\n\n        uint spotPriceBefore = StreamSwapLibrary.calcSpotPrice(\n                                    si.tokenInBalance,\n                                    inRecord.denorm,\n                                    si.tokenOutBalance,\n                                    outRecord.denorm,\n                                    _swapFee\n                                );\n        require(spotPriceBefore <= maxPrice, \"ERR_BAD_LIMIT_PRICE\");\n\n        tokenAmountOut = StreamSwapLibrary.calcOutGivenIn(\n                            si.tokenInBalance,\n                            inRecord.denorm,\n                            si.tokenOutBalance,\n                            outRecord.denorm,\n                            tokenAmountIn,\n                            _swapFee\n                        );\n        require(tokenAmountOut >= minAmountOut, \"ERR_LIMIT_OUT\");\n\n        spotPriceAfter = StreamSwapLibrary.calcSpotPrice(\n                                StreamSwapLibrary.badd(si.tokenInBalance, tokenAmountIn),\n                                inRecord.denorm,\n                                StreamSwapLibrary.bsub(si.tokenOutBalance, tokenAmountOut),\n                                outRecord.denorm,\n                                _swapFee\n                            );\n        require(spotPriceAfter >= spotPriceBefore, \"ERR_MATH_APPROX\");     \n        require(spotPriceAfter <= maxPrice, \"ERR_LIMIT_PRICE\");\n        require(spotPriceBefore <= StreamSwapLibrary.bdiv(tokenAmountIn, tokenAmountOut), \"ERR_MATH_APPROX\");\n\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\n\n        StreamSwapLibrary.Record memory oldInRecord = inRecord;\n        inRecord.balance = StreamSwapLibrary.badd(si.tokenInBalance, tokenAmountIn);\n        _pullUnderlying(si.tokenIn, msg.sender, tokenAmountIn);\n        _streamSwapContext.updateFlowRates(si.tokenIn, _records, oldInRecord);\n\n        StreamSwapLibrary.Record memory oldOutRecord = outRecord;\n        outRecord.balance = StreamSwapLibrary.bsub(si.tokenOutBalance, tokenAmountOut);\n        _pushUnderlying(si.tokenOut, msg.sender, tokenAmountOut);\n        _streamSwapContext.updateFlowRates(si.tokenOut, _records, oldOutRecord);\n\n        return (tokenAmountOut, spotPriceAfter);\n    }\n\n    function swapExactAmountOut(\n        address tokenIn,\n        uint maxAmountIn,\n        address tokenOut,\n        uint tokenAmountOut,\n        uint maxPrice\n    )\n        external\n        _logs_\n        _lock_ \n        returns (uint tokenAmountIn, uint spotPriceAfter)\n    {\n        SuperTokenVarsHelper memory si = SuperTokenVarsHelper(\n            _underlyingToSuperToken[tokenIn],\n            _underlyingToSuperToken[tokenOut],\n            0,\n            0\n        );\n\n        require(_records[si.tokenIn].bound, \"ERR_NOT_BOUND\");\n        require(_records[si.tokenOut].bound, \"ERR_NOT_BOUND\");\n        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n\n        StreamSwapLibrary.Record storage inRecord = _records[address(si.tokenIn)];\n        StreamSwapLibrary.Record storage outRecord = _records[address(si.tokenOut)];\n\n        si.tokenInBalance = getSuperBalance(si.tokenIn);\n        si.tokenOutBalance = getSuperBalance(si.tokenOut);\n\n        require(tokenAmountOut <= StreamSwapLibrary.bmul(si.tokenOutBalance, MAX_OUT_RATIO), \"ERR_MAX_OUT_RATIO\");\n\n        uint spotPriceBefore = StreamSwapLibrary.calcSpotPrice(\n                                    si.tokenInBalance,\n                                    inRecord.denorm,\n                                    si.tokenOutBalance,\n                                    outRecord.denorm,\n                                    _swapFee\n                                );\n        require(spotPriceBefore <= maxPrice, \"ERR_BAD_LIMIT_PRICE\");\n\n        tokenAmountIn = StreamSwapLibrary.calcInGivenOut(\n                            si.tokenInBalance,\n                            inRecord.denorm,\n                            si.tokenOutBalance,\n                            outRecord.denorm,\n                            tokenAmountOut,\n                            _swapFee\n                        );\n        require(tokenAmountIn <= maxAmountIn, \"ERR_LIMIT_IN\");\n\n        spotPriceAfter = StreamSwapLibrary.calcSpotPrice(\n                                StreamSwapLibrary.badd(si.tokenInBalance, tokenAmountIn),\n                                inRecord.denorm,\n                                StreamSwapLibrary.bsub(si.tokenOutBalance, tokenAmountOut),\n                                outRecord.denorm,\n                                _swapFee\n                            );\n        require(spotPriceAfter >= spotPriceBefore, \"ERR_MATH_APPROX\");\n        require(spotPriceAfter <= maxPrice, \"ERR_LIMIT_PRICE\");\n        require(spotPriceBefore <= StreamSwapLibrary.bdiv(tokenAmountIn, tokenAmountOut), \"ERR_MATH_APPROX\");\n\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\n\n        StreamSwapLibrary.Record memory oldInRecord = inRecord;\n        inRecord.balance = StreamSwapLibrary.badd(si.tokenInBalance, tokenAmountIn);\n        _pullUnderlying(si.tokenIn, msg.sender, tokenAmountIn);\n        _streamSwapContext.updateFlowRates(si.tokenIn, _records, oldInRecord);\n\n        StreamSwapLibrary.Record memory oldOutRecord = outRecord;\n        outRecord.balance = StreamSwapLibrary.bsub(si.tokenOutBalance, tokenAmountOut);\n        _pushUnderlying(si.tokenOut, msg.sender, tokenAmountOut);\n        _streamSwapContext.updateFlowRates(si.tokenOut, _records, oldOutRecord);\n\n        return (tokenAmountIn, spotPriceAfter);\n    }\n\n\n    function joinswapExternAmountIn(address tokenIn, uint tokenAmountIn, uint minPoolAmountOut)\n        external\n        _logs_\n        _lock_\n        returns (uint poolAmountOut)\n\n    {\n        address superTokenIn = _underlyingToSuperToken[tokenIn];\n\n        uint tokenInBalance = getSuperBalance(superTokenIn);\n\n        require(_finalized, \"ERR_NOT_FINALIZED\");\n        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n        require(tokenAmountIn <= StreamSwapLibrary.bmul(tokenInBalance, MAX_IN_RATIO), \"ERR_MAX_IN_RATIO\");\n\n        StreamSwapLibrary.Record storage inRecord = _records[superTokenIn];\n\n        poolAmountOut = StreamSwapLibrary.calcPoolOutGivenSingleIn(\n                            tokenInBalance,\n                            inRecord.denorm,\n                            _totalSupply,\n                            _totalWeight,\n                            tokenAmountIn,\n                            _swapFee\n                        );\n\n        require(poolAmountOut >= minPoolAmountOut, \"ERR_LIMIT_OUT\");\n\n        inRecord.balance = StreamSwapLibrary.badd(tokenInBalance, tokenAmountIn);\n\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\n\n        _mintPoolShare(poolAmountOut);\n        _pushPoolShare(msg.sender, poolAmountOut);\n        _pullUnderlying(superTokenIn, msg.sender, tokenAmountIn);\n\n        _streamSwapContext.updateFlowRates(superTokenIn, _records, StreamSwapLibrary.Record(true, 0, inRecord.denorm, tokenInBalance));\n\n        return poolAmountOut;\n    }\n\n    function joinswapPoolAmountOut(address tokenIn, uint poolAmountOut, uint maxAmountIn)\n        external\n        _logs_\n        _lock_\n        returns (uint tokenAmountIn)\n    {\n        address superTokenIn = _underlyingToSuperToken[tokenIn];\n\n        uint tokenInBalance = getSuperBalance(superTokenIn);\n\n        require(_finalized, \"ERR_NOT_FINALIZED\");\n        require(_records[superTokenIn].bound, \"ERR_NOT_BOUND\");\n\n        StreamSwapLibrary.Record storage inRecord = _records[superTokenIn];\n\n        tokenAmountIn = StreamSwapLibrary.calcSingleInGivenPoolOut(\n                            tokenInBalance,\n                            inRecord.denorm,\n                            _totalSupply,\n                            _totalWeight,\n                            poolAmountOut,\n                            _swapFee\n                        );\n\n        require(tokenAmountIn != 0, \"ERR_MATH_APPROX\");\n        require(tokenAmountIn <= maxAmountIn, \"ERR_LIMIT_IN\");\n        \n        require(tokenAmountIn <= StreamSwapLibrary.bmul(tokenInBalance, MAX_IN_RATIO), \"ERR_MAX_IN_RATIO\");\n\n        inRecord.balance = StreamSwapLibrary.badd(tokenInBalance, tokenAmountIn);\n\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\n\n        _mintPoolShare(poolAmountOut);\n        _pushPoolShare(msg.sender, poolAmountOut);\n        _pullUnderlying(superTokenIn, msg.sender, tokenAmountIn);\n\n        _streamSwapContext.updateFlowRates(superTokenIn, _records, StreamSwapLibrary.Record(true, 0, inRecord.denorm, tokenInBalance));\n\n        return tokenAmountIn;\n    }\n\n    function exitswapPoolAmountIn(address tokenOut, uint poolAmountIn, uint minAmountOut)\n        external\n        _logs_\n        _lock_\n        returns (uint tokenAmountOut)\n    {\n        address superTokenOut = _underlyingToSuperToken[tokenOut];\n\n        uint tokenOutBalance = getSuperBalance(superTokenOut);\n\n        require(_finalized, \"ERR_NOT_FINALIZED\");\n        require(_records[superTokenOut].bound, \"ERR_NOT_BOUND\");\n\n        StreamSwapLibrary.Record storage outRecord = _records[superTokenOut];\n\n        tokenAmountOut = StreamSwapLibrary.calcSingleOutGivenPoolIn(\n                            tokenOutBalance,\n                            outRecord.denorm,\n                            _totalSupply,\n                            _totalWeight,\n                            poolAmountIn,\n                            _swapFee\n                        );\n\n        require(tokenAmountOut >= minAmountOut, \"ERR_LIMIT_OUT\");\n        \n        require(tokenAmountOut <= StreamSwapLibrary.bmul(tokenOutBalance, MAX_OUT_RATIO), \"ERR_MAX_OUT_RATIO\");\n\n        outRecord.balance = StreamSwapLibrary.bsub(tokenOutBalance, tokenAmountOut);\n\n        uint exitFee = StreamSwapLibrary.bmul(poolAmountIn, EXIT_FEE);\n\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\n\n        _pullPoolShare(msg.sender, poolAmountIn);\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\n        _pushPoolShare(_factory, exitFee);\n        _pushUnderlying(superTokenOut, msg.sender, tokenAmountOut);\n\n        _streamSwapContext.updateFlowRates(superTokenOut, _records, StreamSwapLibrary.Record(true, 0, outRecord.denorm, tokenOutBalance));\n\n        return tokenAmountOut;\n    }\n\n    function exitswapExternAmountOut(address tokenOut, uint tokenAmountOut, uint maxPoolAmountIn)\n        external\n        _logs_\n        _lock_\n        returns (uint poolAmountIn)\n    {\n        address superTokenOut = _underlyingToSuperToken[tokenOut];\n\n        uint tokenOutBalance = getSuperBalance(superTokenOut);\n\n        require(_finalized, \"ERR_NOT_FINALIZED\");\n        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n        require(tokenAmountOut <= StreamSwapLibrary.bmul(tokenOutBalance, MAX_OUT_RATIO), \"ERR_MAX_OUT_RATIO\");\n\n        StreamSwapLibrary.Record storage outRecord = _records[superTokenOut];\n\n        poolAmountIn = StreamSwapLibrary.calcPoolInGivenSingleOut(\n                            tokenOutBalance,\n                            outRecord.denorm,\n                            _totalSupply,\n                            _totalWeight,\n                            tokenAmountOut,\n                            _swapFee\n                        );\n\n        require(poolAmountIn != 0, \"ERR_MATH_APPROX\");\n        require(poolAmountIn <= maxPoolAmountIn, \"ERR_LIMIT_IN\");\n\n        outRecord.balance = StreamSwapLibrary.bsub(tokenOutBalance, tokenAmountOut);\n\n        uint exitFee = StreamSwapLibrary.bmul(poolAmountIn, EXIT_FEE);\n\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\n\n        _pullPoolShare(msg.sender, poolAmountIn);\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\n        _pushPoolShare(_factory, exitFee);\n        _pushUnderlying(superTokenOut, msg.sender, tokenAmountOut);\n\n        _streamSwapContext.updateFlowRates(superTokenOut, _records, StreamSwapLibrary.Record(true, 0, outRecord.denorm, tokenOutBalance));\n\n        return poolAmountIn;\n    }\n\n\n    // ==\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\n    // You must `_lock_` or otherwise ensure reentry-safety\n\n    function _pullUnderlying(address superErc20, address from, uint amount)\n        internal\n    {\n        console.log(\"pull\", superErc20, amount);\n        IERC20 erc20 = IERC20(ISuperToken(superErc20).getUnderlyingToken());\n        bool xfer = erc20.transferFrom(from, address(this), amount);\n        require(xfer, \"ERR_ERC20_FALSE\");\n        ISuperToken(superErc20).upgrade(amount);\n    }\n\n    function _pushUnderlying(address superErc20, address to, uint amount)\n        internal\n    {\n        console.log(\"push\", superErc20, amount);\n        ISuperToken(superErc20).downgrade(amount);\n        IERC20 erc20 = IERC20(ISuperToken(superErc20).getUnderlyingToken());\n        bool xfer = IERC20(erc20).transfer(to, amount);\n        require(xfer, \"ERR_ERC20_FALSE\");\n    }\n\n    function _pullPoolShare(address from, uint amount)\n        internal\n    {\n        _pull(from, amount);\n    }\n\n    function _pushPoolShare(address to, uint amount)\n        internal\n    {\n        _push(to, amount);\n    }\n\n    function _mintPoolShare(uint amount)\n        internal\n    {\n        _mint(amount);\n    }\n\n    function _burnPoolShare(uint amount)\n        internal\n    {\n        _burn(amount);\n    }\n\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n// This is required by the batchCall and decodeCtx\npragma experimental ABIEncoderV2;\n\nimport { ISuperfluidGovernance } from \"./ISuperfluidGovernance.sol\";\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\nimport { ISuperTokenFactory } from \"./ISuperTokenFactory.sol\";\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\nimport { ISuperApp } from \"./ISuperApp.sol\";\nimport {\n    SuperAppDefinitions,\n    ContextDefinitions,\n    BatchOperation,\n    SuperfluidGovernanceConfigs\n} from \"./Definitions.sol\";\nimport { TokenInfo } from \"../tokens/TokenInfo.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC777 } from \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\n\n\n/**\n * @dev Superfluid host interface.\n\n * It is the central contract of the system where super agreement, super app\n * and super token features are connected together.\n *\n * The superfluid host contract is also the entry point for the protocol users,\n * where batch call and meta transaction are provided for UX improvements.\n *\n * @author Superfluid\n */\ninterface ISuperfluid {\n\n    /**************************************************************************\n     * Governance\n     *************************************************************************/\n\n    /**\n     * @dev Get the current governace of the Superfluid host\n     */\n    function getGovernance() external view returns(ISuperfluidGovernance governance);\n\n    event GovernanceReplaced(ISuperfluidGovernance oldGov, ISuperfluidGovernance newGov);\n    /**\n     * @dev Replace the current governance with a new one\n     */\n    function replaceGovernance(ISuperfluidGovernance newGov) external;\n\n    /**************************************************************************\n     * Agreement Whitelisting\n     *************************************************************************/\n\n    event AgreementClassRegistered(bytes32 agreementType, address code);\n    /**\n     * @dev Register a new agreement class to the system\n     * @param agreementClassLogic INitial agreement class code\n     *\n     * Modifiers:\n     *  - onlyGovernance\n     */\n    function registerAgreementClass(ISuperAgreement agreementClassLogic) external;\n\n    event AgreementClassUpdated(bytes32 agreementType, address code);\n    /**\n    * @dev Update code of an agreement class\n    * @param agreementClassLogic New code for the agreement class\n    *\n    * Modifiers:\n    *  - onlyGovernance\n    */\n    function updateAgreementClass(ISuperAgreement agreementClassLogic) external;\n\n    /**\n    * @dev Check if the agreement class is whitelisted\n    */\n    function isAgreementTypeListed(bytes32 agreementType) external view returns(bool yes);\n\n    /**\n    * @dev Check if the agreement class is whitelisted\n    */\n    function isAgreementClassListed(ISuperAgreement agreementClass) external view returns(bool yes);\n\n    /**\n    * @dev Get agreement class\n    */\n    function getAgreementClass(bytes32 agreementType) external view returns(ISuperAgreement agreementClass);\n\n    /**\n    * @dev Map list of the agreement classes using a bitmap\n    * @param bitmap Agreement class bitmap\n    */\n    function mapAgreementClasses(uint256 bitmap)\n        external view\n        returns (ISuperAgreement[] memory agreementClasses);\n\n    /**\n    * @dev Create a new bitmask by adding a agreement class to it.\n    * @param bitmap Agreement class bitmap\n    */\n    function addToAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\n        external view\n        returns (uint256 newBitmap);\n\n    /**\n    * @dev Create a new bitmask by removing a agreement class from it.\n    * @param bitmap Agreement class bitmap\n    */\n    function removeFromAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\n        external view\n        returns (uint256 newBitmap);\n\n    /**************************************************************************\n    * Super Token Factory\n    **************************************************************************/\n\n    /**\n     * @dev Get the super token factory\n     * @return factory The factory\n     */\n    function getSuperTokenFactory() external view returns (ISuperTokenFactory factory);\n\n    /**\n     * @dev Get the super token factory logic (applicable to upgradable deployment)\n     * @return logic The factory logic\n     */\n    function getSuperTokenFactoryLogic() external view returns (address logic);\n\n    event SuperTokenFactoryUpdated(ISuperTokenFactory newFactory);\n    /**\n     * @dev Update super token factory\n     * @param newFactory New factory logic\n     */\n    function updateSuperTokenFactory(ISuperTokenFactory newFactory) external;\n\n    event SuperTokenLogicUpdated(ISuperToken indexed token, address code);\n    /**\n     * @dev Update the super token logic to the latest\n     *\n     * NOTE:\n     * - Refer toISuperTokenFactory.Upgradability for expected behaviours.\n     */\n    function updateSuperTokenLogic(ISuperToken token) external;\n\n    /**************************************************************************\n     * App Registry\n     *************************************************************************/\n\n    /**\n     * @dev App registered event\n     */\n    event AppRegistered(ISuperApp indexed app);\n\n    /**\n     * @dev Jail event for the app\n     */\n    event Jail(ISuperApp indexed app, uint256 reason);\n\n    /**\n     * @dev Message sender declares it as a super app\n     * @param configWord The super app manifest configuration, flags are defined in\n     *                   `SuperAppDefinitions`\n     */\n    function registerApp(uint256 configWord) external;\n\n    /**\n     * @dev Message sender declares it as a super app, using a registration key\n     * @param configWord The super app manifest configuration, flags are defined in\n     *                   `SuperAppDefinitions`\n     * @param registrationKey The registration key issued by the governance\n     */\n    function registerAppWithKey(uint256 configWord, string calldata registrationKey) external;\n\n    /**\n     * @dev Query if the app is registered\n     * @param app Super app address\n     */\n    function isApp(ISuperApp app) external view returns(bool);\n\n    /**\n     * @dev Query app level\n     * @param app Super app address\n     */\n    function getAppLevel(ISuperApp app) external view returns(uint8 appLevel);\n\n    /**\n     * @dev Get the manifest of the super app\n     * @param app Super app address\n     */\n    function getAppManifest(\n        ISuperApp app\n    )\n        external view\n        returns (\n            bool isSuperApp,\n            bool isJailed,\n            uint256 noopMask\n        );\n\n    /**\n     * @dev Query if the app has been jailed\n     * @param app Super app address\n     */\n    function isAppJailed(ISuperApp app) external view returns (bool isJail);\n\n    /**\n     * @dev White-list the target app for app composition for the source app (msg.sender)\n     * @param targetApp The taget super app address\n     */\n    function allowCompositeApp(ISuperApp targetApp) external;\n\n    /**\n     * @dev Query if source app  is allowed to call the target app as downstream app.\n     * @param app Super app address\n     * @param targetApp The taget super app address\n     */\n    function isCompositeAppAllowed(\n        ISuperApp app,\n        ISuperApp targetApp\n    )\n        external view\n        returns (bool isAppAllowed);\n\n    /**************************************************************************\n     * Agreement Framework\n     *\n     * Agreements use these function to trigger super app callbacks, updates\n     * app allowance and charge gas fees.\n     *\n     * These functions can only be called by registered agreements.\n     *************************************************************************/\n\n    function callAppBeforeCallback(\n        ISuperApp app,\n        bytes calldata callData,\n        bool isTermination,\n        bytes calldata ctx\n    )\n        external\n        // onlyAgreement\n        // isAppActive(app)\n        returns(bytes memory cbdata);\n\n    function callAppAfterCallback(\n        ISuperApp app,\n        bytes calldata callData,\n        bool isTermination,\n        bytes calldata ctx\n    )\n        external\n        // onlyAgreement\n        // isAppActive(app)\n        returns(bytes memory appCtx);\n\n    function appCallbackPush(\n        bytes calldata ctx,\n        ISuperApp app,\n        uint256 appAllowanceGranted,\n        int256 appAllowanceUsed\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory appCtx);\n\n    function appCallbackPop(\n        bytes calldata ctx,\n        int256 allowanceUsedDelta\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory newCtx);\n\n    function ctxUseAllowance(\n        bytes calldata ctx,\n        uint256 allowanceWantedMore,\n        int256 allowanceUsedDelta\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory newCtx);\n\n    function jailApp(\n        bytes calldata ctx,\n        ISuperApp app,\n        uint256 reason\n    )\n        external\n        // onlyAgreement\n        returns (bytes memory newCtx);\n\n    /**************************************************************************\n     * Contextless Call Proxies\n     *\n     * NOTE: For EOAs or non-app contracts, they are the entry points for interacting\n     * with agreements or apps.\n     *\n     * NOTE: The contextual call data should be generated using\n     * abi.encodeWithSelector. The context parameter should be set to \"0x\",\n     * an empty bytes array as a placeholder to be replaced by the host\n     * contract.\n     *************************************************************************/\n\n     /**\n      * @dev Call agreement function\n      * @param callData The contextual call data with placeholder ctx\n      * @param userData Extra user data being sent to the super app callbacks\n      */\n     function callAgreement(\n         ISuperAgreement agreementClass,\n         bytes calldata callData,\n         bytes calldata userData\n     )\n        external\n        //cleanCtx\n        returns(bytes memory returnedData);\n\n    /**\n     * @dev Call app action\n     * @param callData The contextual call data.\n     *\n     * NOTE: See callAgreement about contextual call data.\n     */\n    function callAppAction(\n        ISuperApp app,\n        bytes calldata callData\n    )\n        external\n        //cleanCtx\n        //isAppActive(app)\n        returns(bytes memory returnedData);\n\n    /**************************************************************************\n     * Contextual Call Proxies and Context Utilities\n     *\n     * For apps, they must use context they receive to interact with\n     * agreements or apps.\n     *\n     * The context changes must be saved and returned by the apps in their\n     * callbacks always, any modification to the context will be detected and\n     * the violating app will be jailed.\n     *************************************************************************/\n\n    /**\n     * @dev ABIv2 Encoded memory data of context\n     *\n     * NOTE on backward compatibility:\n     * - Non-dynamic fields are padded to 32bytes and packed\n     * - Dynamic fields are referenced through a 32bytes offset to their \"parents\" field (or root)\n     * - The order of the fields hence should not be rearranged in order to be backward compatible:\n     *    - non-dynamic fields will be parsed at the same memory location,\n     *    - and dynamic fields will simply have a greater offset than it was.\n     */\n    struct Context {\n        //\n        // Call context\n        //\n        // callback level\n        uint8 appLevel;\n        // type of call\n        uint8 callType;\n        // the system timestsamp\n        uint256 timestamp;\n        // The intended message sender for the call\n        address msgSender;\n\n        //\n        // Callback context\n        //\n        // For callbacks it is used to know which agreement function selector is called\n        bytes4 agreementSelector;\n        // User provided data for app callbacks\n        bytes userData;\n\n        //\n        // App context\n        //\n        // app allowance granted\n        uint256 appAllowanceGranted;\n        // app allowance wanted by the app callback\n        uint256 appAllowanceWanted;\n        // app allowance used, allowing negative values over a callback session\n        int256 appAllowanceUsed;\n        // app address\n        address appAddress;\n    }\n\n    function callAgreementWithContext(\n        ISuperAgreement agreementClass,\n        bytes calldata callData,\n        bytes calldata userData,\n        bytes calldata ctx\n    )\n        external\n        // validCtx(ctx)\n        // onlyAgreement(agreementClass)\n        returns (bytes memory newCtx, bytes memory returnedData);\n\n    function callAppActionWithContext(\n        ISuperApp app,\n        bytes calldata callData,\n        bytes calldata ctx\n    )\n        external\n        // validCtx(ctx)\n        // isAppActive(app)\n        returns (bytes memory newCtx);\n\n    function decodeCtx(bytes calldata ctx)\n        external pure\n        returns (Context memory context);\n\n    function isCtxValid(bytes calldata ctx) external view returns (bool);\n\n    /**************************************************************************\n    * Batch call\n    **************************************************************************/\n    /**\n     * @dev Batch operation data\n     */\n    struct Operation {\n        // Operation. Defined in BatchOperation (Definitions.sol)\n        uint32 operationType;\n        // Operation target\n        address target;\n        // Data specific to the operation\n        bytes data;\n    }\n\n    /**\n     * @dev Batch call function\n     * @param operations Array of batch operations.\n     */\n    function batchCall(Operation[] memory operations) external;\n\n    /**\n     * @dev Batch call function for trusted forwarders (EIP-2771)\n     * @param operations Array of batch operations.\n     */\n    function forwardBatchCall(Operation[] memory operations) external;\n\n    /**************************************************************************\n     * Function modifiers for access control and parameter validations\n     *\n     * While they cannot be explicitly stated in function definitions, they are\n     * listed in function definition comments instead for clarity.\n     *\n     * TODO: turning these off because solidity-coverage don't like it\n     *************************************************************************/\n\n     /* /// @dev The current superfluid context is clean.\n     modifier cleanCtx() virtual;\n\n     /// @dev The superfluid context is valid.\n     modifier validCtx(bytes memory ctx) virtual;\n\n     /// @dev The agreement is a listed agreement.\n     modifier isAgreement(ISuperAgreement agreementClass) virtual;\n\n     // onlyGovernance\n\n     /// @dev The msg.sender must be a listed agreement.\n     modifier onlyAgreement() virtual;\n\n     /// @dev The app is registered and not jailed.\n     modifier isAppActive(ISuperApp app) virtual; */\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\nimport { ISuperAgreement } from \"../superfluid/ISuperAgreement.sol\";\nimport { ISuperfluidToken } from \"../superfluid/ISuperfluidToken.sol\";\n\n\n/**\n * @dev Superfluid's constant flow agreement interface\n *\n * @author Superfluid\n */\nabstract contract IConstantFlowAgreementV1 is ISuperAgreement {\n\n    /// @dev ISuperAgreement.agreementType implementation\n    function agreementType() external override pure returns (bytes32) {\n        return keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\");\n    }\n\n    /**\n     * @dev Get the maximum flow rate allowed with the deposit\n     * @param deposit Deposit amount used for creating the flow\n     */\n    function getMaximumFlowRateFromDeposit(\n        ISuperfluidToken token,\n        uint256 deposit)\n        external view virtual\n        returns (int96 flowRate);\n\n    /**\n     * @dev Get the deposit required for creating the flow\n     * @param flowRate Flow rate to be tested\n     */\n    function getDepositRequiredForFlowRate(\n        ISuperfluidToken token,\n        int96 flowRate)\n        external view virtual\n        returns (uint256 deposit);\n\n    /**\n     * @dev Create a flow betwen sender and receiver.\n     * @param token Super token address.\n     * @param receiver Flow receiver address.\n     * @param flowRate New flow rate in amount per second.\n     *\n     * # App callbacks\n     *\n     * - AgreementCreated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * NOTE:\n     * - A deposit is taken as safety margin for the solvency agents.\n     * - A extra gas fee may be taken to pay for solvency agent liquidations.\n     */\n    function createFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n    /**\n     * @dev Update the flow rate between sender and receiver.\n     * @param token Super token address.\n     * @param receiver Flow receiver address.\n     * @param flowRate New flow rate in amount per second.\n     *\n     * # App callbacks\n     *\n     * - AgreementUpdated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * NOTE:\n     * - Only the flow sender may update the flow rate.\n     * - Even if the flow rate is zero, the flow is not deleted\n     * from the system.\n     * - Deposit amount will be adjusted accordingly.\n     * - No new gas fee is charged.\n     */\n    function updateFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n\n    /**\n     * @dev Get the flow data between `sender` and `receiver`.\n     * @param token Super token address.\n     * @param sender Flow receiver.\n     * @param receiver Flow sender.\n     * @return timestamp Timestamp of when the flow is updated.\n     * @return flowRate The flow rate.\n     * @return deposit The amount of deposit the flow.\n     * @return owedDeposit The amount of owed deposit of the flow.\n     */\n    function getFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n    /**\n     * @dev Get flow data using agreement ID\n     * @param token Super token address.\n     * @param agreementId The agreement ID.\n     * @return timestamp Timestamp of when the flow is updated.\n     * @return flowRate The flow rate.\n     * @return deposit The amount of deposit the flow.\n     * @return owedDeposit The amount of owed deposit of the flow.\n     */\n    function getFlowByID(\n       ISuperfluidToken token,\n       bytes32 agreementId\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n    /**\n     * @dev Get the aggregated flow info of the account\n     * @param token Super token address.\n    * @param account Account for the query.\n    */\n    function getAccountFlowInfo(\n        ISuperfluidToken token,\n        address account\n    )\n        external view virtual\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit);\n\n    /**\n     * @dev Get the net flow rate of the account\n     * @param token Super token address.\n     * @param account Account for the query.\n     * @return flowRate Flow rate.\n     */\n    function getNetFlow(\n        ISuperfluidToken token,\n        address account\n    )\n        external view virtual\n        returns (int96 flowRate);\n\n    /**\n     * @dev Delete the flow between sender and receiver\n     * @param token Super token address.\n     * @param ctx Context bytes.\n     * @param receiver Flow receiver address.\n     *\n     * # App callbacks\n     *\n     * - AgreementTerminated\n     *   - agreementId - can be used in getFlowByID\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\n     *\n     * NOTE:\n     * - Both flow sender and receiver may delete the flow.\n     * - If Sender account is insolvent or in critical state, a solvency agent may\n     *   also terminate the agreement.\n     * - Gas fee may be returned to the sender.\n     */\n    function deleteFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        bytes calldata ctx\n    )\n        external virtual\n        returns(bytes memory newCtx);\n\n     /**\n      * @dev Flow updated event.\n      * @param token Super token address.\n      * @param sender Flow sender address.\n      * @param receiver Flow recipient address.\n      * @param flowRate Flow rate in amount per second for this flow.\n      * @param flowRate Total flow rate in amount per second for the sender.\n      * @param flowRate Total flow rate in amount per second for the receiver.\n      * @param userData The user provided data.\n      */\n     event FlowUpdated(\n         ISuperfluidToken indexed token,\n         address indexed sender,\n         address indexed receiver,\n         int96 flowRate,\n         int256 totalSenderFlowRate,\n         int256 totalReceiverFlowRate,\n         bytes userData\n     );\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/apps/SuperAppBase.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\nimport {\n    ISuperfluid,\n    ISuperToken,\n    ISuperApp,\n    SuperAppDefinitions\n} from \"../interfaces/superfluid/ISuperfluid.sol\";\n\nabstract contract SuperAppBase is ISuperApp {\n\n    function beforeAgreementCreated(\n        ISuperToken /*superToken*/,\n        address /*agreementClass*/,\n        bytes32 /*agreementId*/,\n        bytes calldata /*agreementData*/,\n        bytes calldata /*ctx*/\n    )\n        external\n        view\n        virtual\n        override\n        returns (bytes memory /*cbdata*/)\n    {\n        revert(\"Unsupported callback - Before Agreement Created\");\n    }\n\n    function afterAgreementCreated(\n        ISuperToken /*superToken*/,\n        address /*agreementClass*/,\n        bytes32 /*agreementId*/,\n        bytes calldata /*agreementData*/,\n        bytes calldata /*cbdata*/,\n        bytes calldata /*ctx*/\n    )\n        external\n        virtual\n        override\n        returns (bytes memory /*newCtx*/)\n    {\n        revert(\"Unsupported callback - After Agreement Created\");\n    }\n\n    function beforeAgreementUpdated(\n        ISuperToken /*superToken*/,\n        address /*agreementClass*/,\n        bytes32 /*agreementId*/,\n        bytes calldata /*agreementData*/,\n        bytes calldata /*ctx*/\n    )\n        external\n        view\n        virtual\n        override\n        returns (bytes memory /*cbdata*/)\n    {\n        revert(\"Unsupported callback - Before Agreement updated\");\n    }\n\n    function afterAgreementUpdated(\n        ISuperToken /*superToken*/,\n        address /*agreementClass*/,\n        bytes32 /*agreementId*/,\n        bytes calldata /*agreementData*/,\n        bytes calldata /*cbdata*/,\n        bytes calldata /*ctx*/\n    )\n        external\n        virtual\n        override\n        returns (bytes memory /*newCtx*/)\n    {\n        revert(\"Unsupported callback - After Agreement Updated\");\n    }\n\n    function beforeAgreementTerminated(\n        ISuperToken /*superToken*/,\n        address /*agreementClass*/,\n        bytes32 /*agreementId*/,\n        bytes calldata /*agreementData*/,\n        bytes calldata /*ctx*/\n    )\n        external\n        view\n        virtual\n        override\n        returns (bytes memory /*cbdata*/)\n    {\n        revert(\"Unsupported callback -  Before Agreement Terminated\");\n    }\n\n    function afterAgreementTerminated(\n        ISuperToken /*superToken*/,\n        address /*agreementClass*/,\n        bytes32 /*agreementId*/,\n        bytes calldata /*agreementData*/,\n        bytes calldata /*cbdata*/,\n        bytes calldata /*ctx*/\n    )\n        external\n        virtual\n        override\n        returns (bytes memory /*newCtx*/)\n    {\n        revert(\"Unsupported callback - After Agreement Terminated\");\n    }\n\n}\n"
    },
    "contracts/balancer/BToken.sol": {
      "content": "// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.7.6;\n\nimport \"./BNum.sol\";\n\n// Highly opinionated token implementation\n\ninterface IERC20 {\n    event Approval(address indexed src, address indexed dst, uint amt);\n    event Transfer(address indexed src, address indexed dst, uint amt);\n\n    function totalSupply() external view returns (uint);\n    function balanceOf(address whom) external view returns (uint);\n    function allowance(address src, address dst) external view returns (uint);\n\n    function approve(address dst, uint amt) external returns (bool);\n    function transfer(address dst, uint amt) external returns (bool);\n    function transferFrom(\n        address src, address dst, uint amt\n    ) external returns (bool);\n}\n\nabstract contract BTokenBase is BNum, IERC20 {\n\n    mapping(address => uint)                   internal _balance;\n    mapping(address => mapping(address=>uint)) internal _allowance;\n    uint internal _totalSupply;\n\n    function _mint(uint amt) internal {\n        _balance[address(this)] = badd(_balance[address(this)], amt);\n        _totalSupply = badd(_totalSupply, amt);\n        emit Transfer(address(0), address(this), amt);\n    }\n\n    function _burn(uint amt) internal {\n        require(_balance[address(this)] >= amt, \"ERR_INSUFFICIENT_BAL\");\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\n        _totalSupply = bsub(_totalSupply, amt);\n        emit Transfer(address(this), address(0), amt);\n    }\n\n    function _move(address src, address dst, uint amt) internal {\n        require(_balance[src] >= amt, \"ERR_INSUFFICIENT_BAL\");\n        _balance[src] = bsub(_balance[src], amt);\n        _balance[dst] = badd(_balance[dst], amt);\n        emit Transfer(src, dst, amt);\n    }\n\n    function _push(address to, uint amt) internal {\n        _move(address(this), to, amt);\n    }\n\n    function _pull(address from, uint amt) internal {\n        _move(from, address(this), amt);\n    }\n}\n\ncontract BToken is BTokenBase {\n\n    string  private _name     = \"Balancer Pool Token\";\n    string  private _symbol   = \"BPT\";\n    uint8   private _decimals = 18;\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns(uint8) {\n        return _decimals;\n    }\n\n    function allowance(address src, address dst) external view override returns (uint) {\n        return _allowance[src][dst];\n    }\n\n    function balanceOf(address whom) external view override returns (uint) {\n        return _balance[whom];\n    }\n\n    function totalSupply() public view override returns (uint) {\n        return _totalSupply;\n    }\n\n    function approve(address dst, uint amt) external override returns (bool) {\n        _allowance[msg.sender][dst] = amt;\n        emit Approval(msg.sender, dst, amt);\n        return true;\n    }\n\n    function increaseApproval(address dst, uint amt) external returns (bool) {\n        _allowance[msg.sender][dst] = badd(_allowance[msg.sender][dst], amt);\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\n        return true;\n    }\n\n    function decreaseApproval(address dst, uint amt) external returns (bool) {\n        uint oldValue = _allowance[msg.sender][dst];\n        if (amt > oldValue) {\n            _allowance[msg.sender][dst] = 0;\n        } else {\n            _allowance[msg.sender][dst] = bsub(oldValue, amt);\n        }\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\n        return true;\n    }\n\n    function transfer(address dst, uint amt) external override returns (bool) {\n        _move(msg.sender, dst, amt);\n        return true;\n    }\n\n    function transferFrom(address src, address dst, uint amt) external override returns (bool) {\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \"ERR_BTOKEN_BAD_CALLER\");\n        _move(src, dst, amt);\n        if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\n            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\n        }\n        return true;\n    }\n}\n"
    },
    "contracts/StreamSwapLibrary.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\npragma solidity 0.7.6;\npragma abicoder v2;\n\nimport \"hardhat/console.sol\";\n\nimport {\n    ISuperfluid,\n    ISuperToken\n} from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\";\n//\"@superfluid-finance/ethereum-monorepo/packages/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\";\n\nimport {\n    IConstantFlowAgreementV1\n} from \"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\";\n\nimport \"./balancer/BToken.sol\";\n\nlibrary StreamSwapLibrary {\n    uint public constant BONE              = 10**18;\n    uint public constant EXIT_FEE          = 0;\n    uint public constant MIN_BPOW_BASE     = 1 wei;\n    uint public constant MAX_BPOW_BASE     = (2 * BONE) - 1 wei;\n    uint public constant BPOW_PRECISION    = BONE / 10**10;\n\n    struct Context {\n        ISuperfluid host; // host\n        IConstantFlowAgreementV1 cfa; // the stored constant flow agreement class address\n        // output token to input token to receivers\n        // only for balancer trade hooks. Limitation for the scalability.\n\n        // use a sparse array to remember changes in the state\n        StreamSwapState[] streamSwapState;\n\n        // used for rate updates\n        mapping(address => uint64) superTokenToArgs;\n\n        // used for getting existing stream configs for accounts\n        mapping(address => mapping (address => uint64)) accountStreamToArgs;\n    }\n\n    struct StreamSwapArgs {\n        address destSuperToken;\n        uint inAmount;\n        uint128 minOut;\n        uint128 maxOut;\n    }\n\n    struct StreamSwapState {\n        address srcSuperToken;\n        address destSuperToken;\n        address sender;\n        uint inAmount;\n        uint128 minOut;\n        uint128 maxOut;\n\n        uint64 prevForSrcSuperToken;\n        uint64 nextForDestSuperToken;\n        uint64 prevForDestSuperToken;\n        uint64 nextForSrcSuperToken;\n\n        uint64 active;\n        uint64 nextSenderAccount;\n    }\n\n    struct AccountState {\n        uint srcBalance;\n        uint srcDenom;\n        uint destBalance;\n        uint destDenom;\n    }\n\n    struct Record {\n        bool bound;   // is token bound to pool\n        uint index;   // private\n        uint denorm;  // denormalized weight\n        uint balance; // balance (as of last balancer pool operation). this needs to be recorded for remembering relative stream amts\n    }\n\n    function decodeStreamSwapData(bytes memory d) internal pure returns (StreamSwapArgs memory ssa) {\n        (\n            ssa.destSuperToken,\n            ssa.inAmount,\n            ssa.minOut,\n            ssa.maxOut\n        ) = abi.decode(d, (address, uint, uint128, uint128));\n    }\n\n    function decodeUserData(bytes memory userData) internal pure returns (StreamSwapArgs[] memory) {\n\n        if (userData.length == 0)\n            return new StreamSwapArgs[](0);\n\n        (bytes[] memory arr) = abi.decode(userData, (bytes[]));\n\n        StreamSwapArgs[] memory ssas = new StreamSwapArgs[](arr.length);\n        for(uint i = 0;i < arr.length;i++) {\n            ssas[i] = decodeStreamSwapData(arr[i]);\n        }\n\n        return ssas;\n    }\n\n    // link entry 1 to entry 2 sequentially in the list for superToken\n    function updateSuperTokenPointers(Context storage ctx, address superToken, uint64 idx1, uint64 idx2) internal {\n\n        if (idx1 == 0) {\n            ctx.superTokenToArgs[superToken] = idx2;\n            return;\n        }\n\n        if (ctx.streamSwapState[idx1].srcSuperToken == superToken) {\n            ctx.streamSwapState[idx1].nextForSrcSuperToken = idx2;\n        }\n        else {\n            ctx.streamSwapState[idx1].nextForDestSuperToken = idx2;\n        }\n\n        if (ctx.streamSwapState[idx2].srcSuperToken == superToken) {\n            ctx.streamSwapState[idx2].prevForSrcSuperToken = idx1;\n        }\n        else {\n            ctx.streamSwapState[idx2].prevForDestSuperToken = idx1;\n        }\n    }\n\n    function initialize(Context storage ctx) public {\n        ctx.streamSwapState.push(StreamSwapState(address(0), address(0), address(0), 0,0,0,0,0,0,0,0,0));\n    }\n\n    function clearTradeOutWithContext(Context storage ctx, bytes memory newSfCtx, address superToken, address to, uint oldOutRate) private returns (bytes memory) {\n        if (superToken != address(0) && oldOutRate > 0) {\n\n            (,int96 prevTokenCurOutFlow,,) = ctx.cfa.getFlow(ISuperToken(superToken), address(this), to);\n            console.log(\"got prev token flow\", superToken, uint(prevTokenCurOutFlow), oldOutRate);\n            // sanity\n            require(uint256(prevTokenCurOutFlow) >= oldOutRate, \"ERR_IMPOSSIBLE_RATE\");\n\n            if (uint256(prevTokenCurOutFlow) == oldOutRate) {\n                console.log(\"remove previous flow\");\n                (newSfCtx, ) = ctx.host.callAgreementWithContext(\n                    ctx.cfa,\n                    abi.encodeWithSelector(\n                        ctx.cfa.deleteFlow.selector,\n                        superToken,\n                        address(this), // for some reason deleteFlow is the only function that takes a sender parameter\n                        to,\n                        new bytes(0) // placeholder\n                    ),\n                    \"0x\",\n                    newSfCtx\n                );\n\n                console.log(\"removed\");\n            }\n            else {\n                console.log(\"shrink previous flow\");\n                (newSfCtx, ) = ctx.host.callAgreementWithContext(\n                    ctx.cfa,\n                    abi.encodeWithSelector(\n                        ctx.cfa.updateFlow.selector,\n                        superToken,\n                        to,\n                        uint256(prevTokenCurOutFlow) - oldOutRate,\n                        new bytes(0) // placeholder\n                    ),\n                    \"0x\",\n                    newSfCtx\n                );\n            }\n        }\n\n        return newSfCtx;\n    }\n\n    function adjustTradeOutWithContext(Context storage ctx, bytes memory newSfCtx, address superToken, address to, uint oldOutRate, uint newOutRate) private returns (bytes memory) {\n        if (superToken != address(0) && oldOutRate != newOutRate) {\n\n            (,int96 curOutFlow,,) = ctx.cfa.getFlow(ISuperToken(superToken), address(this), to);\n\n            console.log(\"with context adjust trade out\", uint(curOutFlow), oldOutRate, newOutRate);\n            (newSfCtx, ) = ctx.host.callAgreementWithContext(\n                ctx.cfa,\n                abi.encodeWithSelector(\n                    curOutFlow == 0 ? ctx.cfa.createFlow.selector : ctx.cfa.updateFlow.selector,\n                    superToken,\n                    to,\n                    uint256(curOutFlow) + newOutRate - oldOutRate,\n                    new bytes(0) // placeholder\n                ),\n                \"0x\",\n                newSfCtx\n            );\n        }\n\n        return newSfCtx;\n    }\n\n    function clearTradeOut(Context storage ctx, address superToken, address to, uint oldOutRate) private {\n        if (superToken != address(0) && oldOutRate > 0) {\n\n            (,int96 prevTokenCurOutFlow,,) = ctx.cfa.getFlow(ISuperToken(superToken), address(this), to);\n            console.log(\"got prev token flow\", superToken, uint(prevTokenCurOutFlow), oldOutRate);\n            // sanity\n            require(uint256(prevTokenCurOutFlow) >= oldOutRate, \"ERR_IMPOSSIBLE_RATE\");\n\n            if (uint256(prevTokenCurOutFlow) == oldOutRate) {\n                console.log(\"remove previous flow\");\n                ctx.host.callAgreement(\n                    ctx.cfa,\n                    abi.encodeWithSelector(\n                        ctx.cfa.deleteFlow.selector,\n                        superToken,\n                        address(this), // for some reason deleteFlow is the only function that takes a sender parameter\n                        to,\n                        new bytes(0) // placeholder\n                    ),\n                    \"0x\"\n                );\n\n                console.log(\"removed\");\n            }\n            else {\n                console.log(\"shrink previous flow\");\n                ctx.host.callAgreement(\n                    ctx.cfa,\n                    abi.encodeWithSelector(\n                        ctx.cfa.updateFlow.selector,\n                        superToken,\n                        to,\n                        uint256(prevTokenCurOutFlow) - oldOutRate,\n                        new bytes(0) // placeholder\n                    ),\n                    \"0x\"\n                );\n            }\n        }\n    }\n\n    function adjustTradeOut(Context storage ctx, address superToken, address to, uint oldOutRate, uint newOutRate) private {\n        if (superToken != address(0) && oldOutRate != newOutRate) {\n\n            (,int96 curOutFlow,,) = ctx.cfa.getFlow(ISuperToken(superToken), address(this), to);\n\n            console.log(\"no context adjust trade out\", uint(curOutFlow), newOutRate, oldOutRate);\n\n            ctx.host.callAgreement(\n                ctx.cfa,\n                abi.encodeWithSelector(\n                    curOutFlow == 0 ? ctx.cfa.createFlow.selector : ctx.cfa.updateFlow.selector,\n                    superToken,\n                    to,\n                    uint256(curOutFlow) + newOutRate - oldOutRate,\n                    new bytes(0) // placeholder\n                ),\n                \"0x\"\n            );\n        }\n    }\n\n    function updateTrade(Context storage ctx, ISuperToken superToken, bytes memory newSfCtx, \n        StreamSwapState memory args, StreamSwapState storage prevArgs,\n        AccountState memory state)\n        private\n        returns (bytes memory)\n    {\n        if (prevArgs.destSuperToken == address(0) && args.destSuperToken == address(0)) {\n            return newSfCtx;\n        }\n\n        console.log(\"state\", state.srcBalance, state.destBalance);\n        uint oldOutRate = prevArgs.inAmount > 0 ? calcOutGivenIn(\n            state.srcBalance, state.srcDenom, \n            state.destBalance, state.destDenom, \n            prevArgs.inAmount, 0) : 0;\n\n        uint newOutRate = args.inAmount > 0 ? calcOutGivenIn(\n            state.srcBalance, state.srcDenom, \n            state.destBalance, state.destDenom, \n            args.inAmount, 0) : 0;\n        \n        // is the trade currently outside its range\n        if ((args.minOut != 0 && newOutRate < args.minOut) || (args.maxOut != 0 && newOutRate > args.maxOut)) {\n            console.log(\"out of range\", oldOutRate, newOutRate);\n            console.log(\"rates\", uint(args.minOut), uint(args.maxOut));\n            if (prevArgs.inAmount != args.inAmount || prevArgs.active > 0) {\n                console.log(\"starting inactive\");\n                if (prevArgs.active > 0) {\n                    newSfCtx = clearTradeOutWithContext(ctx, newSfCtx, prevArgs.destSuperToken, prevArgs.sender, oldOutRate);\n                }\n\n                newSfCtx = adjustTradeOutWithContext(ctx, newSfCtx, args.srcSuperToken, args.sender, prevArgs.active > 0 ? 0 : prevArgs.inAmount, args.inAmount);\n\n                args.active = 0;\n            }\n\n            return newSfCtx;\n        }\n        else if (prevArgs.active == 0) {\n            console.log(\"starting reactivate\");\n            newSfCtx = clearTradeOutWithContext(ctx, newSfCtx, prevArgs.srcSuperToken, prevArgs.sender, prevArgs.inAmount);\n            oldOutRate = 0;\n            args.active = 1;\n        }\n\n        if (prevArgs.destSuperToken != args.destSuperToken) {\n            console.log(\"doing replace\");\n            newSfCtx = clearTradeOutWithContext(ctx, newSfCtx, prevArgs.destSuperToken, prevArgs.sender, oldOutRate);\n            newSfCtx = adjustTradeOutWithContext(ctx, newSfCtx, args.destSuperToken, args.sender, 0, newOutRate);\n        }\n        else {\n            newSfCtx = adjustTradeOutWithContext(ctx, newSfCtx, prevArgs.destSuperToken, prevArgs.sender, oldOutRate, newOutRate);\n        }\n\n        return newSfCtx;\n    }\n\n    function makeTrade(Context storage ctx, ISuperToken superToken, bytes memory newSfCtx, mapping(address => StreamSwapLibrary.Record) storage records)\n        public\n        returns (bytes memory)\n    {\n        ISuperfluid.Context memory context = ctx.host.decodeCtx(newSfCtx);\n        StreamSwapArgs[] memory args = decodeUserData(context.userData);\n\n        console.log(\"streamswapargs: decoded\", args.length);\n\n        uint inSum = 0;\n\n        uint64[2] memory curStateIdx = [ctx.accountStreamToArgs[context.msgSender][address(superToken)], 0];\n\n        console.log(\"found existing?\", curStateIdx[0] > 0);\n\n        for (uint i = 0;i < args.length;i++) {\n            require(args[i].inAmount > 0, \"ERR_INVALID_AMOUNT\");\n\n            inSum += args[i].inAmount;\n\n            AccountState memory state = AccountState(\n                records[address(superToken)].balance, records[address(superToken)].denorm, records[address(args[i].destSuperToken)].balance,\n                records[address(args[i].destSuperToken)].denorm\n            );\n\n            console.log(\"got super balances\", state.srcBalance, state.destBalance);\n\n            if (curStateIdx[0] != 0) {\n                // update in place\n                StreamSwapState storage entry = ctx.streamSwapState[curStateIdx[0]];\n                StreamSwapState memory newEntry = StreamSwapState({\n                    srcSuperToken: address(superToken),\n                    destSuperToken: args[i].destSuperToken,\n                    sender: context.msgSender,\n                    inAmount: args[i].inAmount,\n                    minOut: args[i].minOut,\n                    maxOut: args[i].maxOut,\n\n                    prevForSrcSuperToken: 0,\n                    nextForSrcSuperToken: 0,\n                    prevForDestSuperToken: 0,\n                    nextForDestSuperToken: 0,\n                    nextSenderAccount: 0,\n                    active: entry.active\n                });\n                newSfCtx = updateTrade(ctx, superToken, newSfCtx, newEntry, entry, state);\n\n                // update dest super token if it has changed\n                if (args[i].destSuperToken != entry.destSuperToken) {\n                    updateSuperTokenPointers(ctx, entry.destSuperToken, entry.prevForDestSuperToken, entry.nextForDestSuperToken);\n\n                    entry.destSuperToken = args[i].destSuperToken;\n                    uint64 prevHead = ctx.superTokenToArgs[args[i].destSuperToken];\n                    updateSuperTokenPointers(ctx, args[i].destSuperToken, curStateIdx[0], prevHead);\n                    updateSuperTokenPointers(ctx, args[i].destSuperToken, 0, curStateIdx[0]);\n                }\n\n                // update args\n                entry.inAmount = args[i].inAmount;\n                entry.minOut = args[i].minOut;\n                entry.maxOut = args[i].maxOut;\n\n                // could be a side effect from the updateTrade function\n                entry.active = newEntry.active;\n\n                curStateIdx[1] = curStateIdx[0];\n                curStateIdx[0] = entry.nextSenderAccount;\n            }\n            else {\n                // new stream swap\n\n                StreamSwapState memory newEntry = StreamSwapState({\n                    srcSuperToken: address(superToken),\n                    destSuperToken: args[i].destSuperToken,\n                    sender: context.msgSender,\n                    inAmount: args[i].inAmount,\n                    minOut: args[i].minOut,\n                    maxOut: args[i].maxOut,\n\n                    prevForSrcSuperToken: 0,\n                    nextForSrcSuperToken: ctx.superTokenToArgs[address(superToken)],\n                    prevForDestSuperToken: 0,\n                    nextForDestSuperToken: ctx.superTokenToArgs[args[i].destSuperToken],\n                    nextSenderAccount: 0,\n                    active: 1\n                });\n\n                StreamSwapState storage emptyEntry = ctx.streamSwapState[0];\n\n                newSfCtx = updateTrade(ctx, superToken, newSfCtx, newEntry, emptyEntry, state);\n\n                ctx.streamSwapState.push(newEntry);\n\n                uint64 pos = uint64(ctx.streamSwapState.length - 1);\n\n                if (curStateIdx[1] > 0) {\n                    ctx.streamSwapState[curStateIdx[1]].nextSenderAccount = pos;\n                }\n                else {\n                    ctx.accountStreamToArgs[context.msgSender][address(superToken)] = pos;\n                }\n\n                updateSuperTokenPointers(ctx, address(superToken), pos, newEntry.nextForSrcSuperToken);\n                updateSuperTokenPointers(ctx, address(superToken), 0, pos);\n\n                updateSuperTokenPointers(ctx, args[i].destSuperToken, pos, newEntry.nextForDestSuperToken);\n                updateSuperTokenPointers(ctx, args[i].destSuperToken, 0, pos);\n\n                curStateIdx[1] = pos;\n            }\n        }\n\n        console.log(\"done with existing ids\");\n\n        while (curStateIdx[0] != 0) {\n            console.log(\"pop\");\n\n            StreamSwapState storage entry = ctx.streamSwapState[curStateIdx[0]];\n\n            AccountState memory state = AccountState(\n                records[address(superToken)].balance, records[address(superToken)].denorm, \n                records[address(entry.destSuperToken)].balance, \n                records[address(entry.destSuperToken)].denorm\n            );\n\n            newSfCtx = updateTrade(ctx, superToken, newSfCtx, ctx.streamSwapState[0], entry, state);\n\n            // src super token list\n            updateSuperTokenPointers(ctx, address(superToken), entry.prevForSrcSuperToken, entry.nextForSrcSuperToken);\n            updateSuperTokenPointers(ctx, entry.destSuperToken, entry.prevForDestSuperToken, entry.nextForDestSuperToken);\n\n            uint64 nextStateIdx = entry.nextSenderAccount;\n            ctx.streamSwapState[curStateIdx[0]] = ctx.streamSwapState[0];\n\n            if(curStateIdx[1] > 0) {\n                ctx.streamSwapState[curStateIdx[1]].nextSenderAccount = 0;\n            }\n            else {\n                ctx.accountStreamToArgs[context.msgSender][address(superToken)] = 0;\n            }\n\n            curStateIdx[0] = nextStateIdx;\n        }\n\n        console.log(\"final check\");\n\n        (,int96 inFlow,,) = ctx.cfa.getFlow(superToken, context.msgSender, address(this));\n        require(inSum == uint256(inFlow), \"ERR_INVALID_SUM\");\n\n        return newSfCtx;\n    }\n\n    function updateFlowRates(Context storage ctx, address superToken, mapping(address => StreamSwapLibrary.Record) storage records, StreamSwapLibrary.Record memory prevRecord)\n        public\n    {\n        uint curIdx = ctx.superTokenToArgs[superToken];\n\n        console.log(\"update flow rates\");\n\n        while (curIdx > 0) {\n            console.log(\"doing one\", curIdx);\n            StreamSwapState storage entry = ctx.streamSwapState[curIdx];\n\n            // this is basically a shorter version of what happens in the updateTrade above\n            // except it just calls raw `callAgreement` and saves gas\n\n            uint oldOutRate;\n            uint newOutRate;\n            if(superToken == entry.srcSuperToken) {\n                oldOutRate = calcOutGivenIn(\n                    prevRecord.balance, prevRecord.denorm, \n                    records[entry.destSuperToken].balance, records[entry.destSuperToken].denorm, \n                    entry.inAmount, 0);\n\n                newOutRate = calcOutGivenIn(\n                    records[superToken].balance, records[superToken].denorm, \n                    records[entry.destSuperToken].balance, records[entry.destSuperToken].denorm, \n                    entry.inAmount, 0);\n                \n                curIdx = entry.nextForSrcSuperToken;\n            }\n            else {\n                oldOutRate = calcOutGivenIn(\n                    records[entry.srcSuperToken].balance, records[entry.srcSuperToken].denorm, \n                    prevRecord.balance, prevRecord.denorm, \n                    entry.inAmount, 0);\n\n                newOutRate = calcOutGivenIn(\n                    records[entry.srcSuperToken].balance, records[entry.srcSuperToken].denorm, \n                    records[superToken].balance, records[superToken].denorm, \n                    entry.inAmount, 0);\n                \n                curIdx = entry.nextForDestSuperToken;\n            }\n\n            // is the trade currently outside its range\n            if ((entry.minOut != 0 && newOutRate < entry.minOut) || (entry.maxOut != 0 && newOutRate > entry.maxOut)) {\n            console.log(\"out of range\", oldOutRate, newOutRate);\n            console.log(\"rates\", uint(entry.minOut), uint(entry.maxOut));\n                if (entry.active > 0) {\n                    console.log(\"starting deactivate\");\n                    clearTradeOut(ctx, entry.destSuperToken, entry.sender, oldOutRate);\n                    adjustTradeOut(ctx, entry.srcSuperToken, entry.sender, 0, entry.inAmount);\n\n                    entry.active = 0;\n                }\n\n                continue;\n            }\n            else if (entry.active == 0) {\n                console.log(\"starting reactivate\");\n                clearTradeOut(ctx, entry.srcSuperToken, entry.sender, entry.inAmount);\n                adjustTradeOut(ctx, entry.destSuperToken, entry.sender, 0, newOutRate);\n                entry.active = 1;\n            }\n            else {\n                console.log(\"change out rate\", oldOutRate, newOutRate);\n                adjustTradeOut(ctx, entry.destSuperToken, entry.sender, oldOutRate, newOutRate);\n            }\n        }\n\n        console.log(\"finished update\");\n    }\n\n    /**********************************************************************************************\n    // calcSpotPrice                                                                             //\n    // sP = spotPrice                                                                            //\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\n    // wO = tokenWeightOut                                                                       //\n    // sF = swapFee                                                                              //\n    **********************************************************************************************/\n    function calcSpotPrice(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint swapFee\n    )\n        public pure\n        returns (uint spotPrice)\n    {\n        uint numer = bdiv(tokenBalanceIn, tokenWeightIn);\n        uint denom = bdiv(tokenBalanceOut, tokenWeightOut);\n        uint ratio = bdiv(numer, denom);\n        uint scale = bdiv(BONE, bsub(BONE, swapFee));\n        return  (spotPrice = bmul(ratio, scale));\n    }\n\n    /**********************************************************************************************\n    // calcOutGivenIn                                                                            //\n    // aO = tokenAmountOut                                                                       //\n    // bO = tokenBalanceOut                                                                      //\n    // bI = tokenBalanceIn              /      /            bI             \\    (wI / wO) \\      //\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\n    // wI = tokenWeightIn               \\      \\ ( bI + ( aI * ( 1 - sF )) /              /      //\n    // wO = tokenWeightOut                                                                       //\n    // sF = swapFee                                                                              //\n    **********************************************************************************************/\n    function calcOutGivenIn(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint tokenAmountIn,\n        uint swapFee\n    )\n        public pure\n        returns (uint tokenAmountOut)\n    {\n        uint weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\n        uint adjustedIn = bsub(BONE, swapFee);\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\n        uint y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\n        uint foo = bpow(y, weightRatio);\n        uint bar = bsub(BONE, foo);\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\n        return tokenAmountOut;\n    }\n\n    /**********************************************************************************************\n    // calcInGivenOut                                                                            //\n    // aI = tokenAmountIn                                                                        //\n    // bO = tokenBalanceOut               /  /     bO      \\    (wO / wI)      \\                 //\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\n    // aO = tokenAmountOut    aI =        \\  \\ ( bO - aO ) /                   /                 //\n    // wI = tokenWeightIn           --------------------------------------------                 //\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\n    // sF = swapFee                                                                              //\n    **********************************************************************************************/\n    function calcInGivenOut(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint tokenAmountOut,\n        uint swapFee\n    )\n        public pure\n        returns (uint tokenAmountIn)\n    {\n        uint weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\n        uint diff = bsub(tokenBalanceOut, tokenAmountOut);\n        uint y = bdiv(tokenBalanceOut, diff);\n        uint foo = bpow(y, weightRatio);\n        foo = bsub(foo, BONE);\n        tokenAmountIn = bsub(BONE, swapFee);\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\n        return tokenAmountIn;\n    }\n\n    /**********************************************************************************************\n    // calcPoolOutGivenSingleIn                                                                  //\n    // pAo = poolAmountOut         /                                              \\              //\n    // tAi = tokenAmountIn        ///      /     //    wI \\      \\\\       \\     wI \\             //\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\    --  \\            //\n    // tW = totalWeight     pAo=||  \\      \\     \\\\    tW /      //         | ^ tW   | * pS - pS //\n    // tBi = tokenBalanceIn      \\\\  ------------------------------------- /        /            //\n    // pS = poolSupply            \\\\                    tBi               /        /             //\n    // sF = swapFee                \\                                              /              //\n    **********************************************************************************************/\n    function calcPoolOutGivenSingleIn(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint poolSupply,\n        uint totalWeight,\n        uint tokenAmountIn,\n        uint swapFee\n    )\n        public pure\n        returns (uint poolAmountOut)\n    {\n        // Charge the trading fee for the proportion of tokenAi\n        //  which is implicitly traded to the other pool tokens.\n        // That proportion is (1- weightTokenIn)\n        // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\n        uint normalizedWeight = bdiv(tokenWeightIn, totalWeight);\n        uint zaz = bmul(bsub(BONE, normalizedWeight), swapFee); \n        uint tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\n\n        uint newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\n        uint tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\n\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\n        uint poolRatio = bpow(tokenInRatio, normalizedWeight);\n        uint newPoolSupply = bmul(poolRatio, poolSupply);\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\n        return poolAmountOut;\n    }\n\n    /**********************************************************************************************\n    // calcSingleInGivenPoolOut                                                                  //\n    // tAi = tokenAmountIn              //(pS + pAo)\\     /    1    \\\\                           //\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\n    // pAo = poolAmountOut              \\\\    pS    /     \\(wI / tW)//                           //\n    // bI = balanceIn          tAi =  --------------------------------------------               //\n    // wI = weightIn                              /      wI  \\                                   //\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\n    // sF = swapFee                               \\      tW  /                                   //\n    **********************************************************************************************/\n    function calcSingleInGivenPoolOut(\n        uint tokenBalanceIn,\n        uint tokenWeightIn,\n        uint poolSupply,\n        uint totalWeight,\n        uint poolAmountOut,\n        uint swapFee\n    )\n        public pure\n        returns (uint tokenAmountIn)\n    {\n        uint normalizedWeight = bdiv(tokenWeightIn, totalWeight);\n        uint newPoolSupply = badd(poolSupply, poolAmountOut);\n        uint poolRatio = bdiv(newPoolSupply, poolSupply);\n      \n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\n        uint boo = bdiv(BONE, normalizedWeight); \n        uint tokenInRatio = bpow(poolRatio, boo);\n        uint newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\n        uint tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way \n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\n        uint zar = bmul(bsub(BONE, normalizedWeight), swapFee);\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\n        return tokenAmountIn;\n    }\n\n    /**********************************************************************************************\n    // calcSingleOutGivenPoolIn                                                                  //\n    // tAo = tokenAmountOut            /      /                                             \\\\   //\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\     /    1    \\      \\\\  //\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\n    // ps = poolSupply                \\      \\\\          pS           /     \\(wO / tW)/      //  //\n    // wI = tokenWeightIn      tAo =   \\      \\                                             //   //\n    // tW = totalWeight                    /     /      wO \\       \\                             //\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\n    // eF = exitFee                        \\     \\      tW /       /                             //\n    **********************************************************************************************/\n    function calcSingleOutGivenPoolIn(\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint poolSupply,\n        uint totalWeight,\n        uint poolAmountIn,\n        uint swapFee\n    )\n        public pure\n        returns (uint tokenAmountOut)\n    {\n        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\n        // charge exit fee on the pool token side\n        // pAiAfterExitFee = pAi*(1-exitFee)\n        uint poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\n        uint newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\n        uint poolRatio = bdiv(newPoolSupply, poolSupply);\n     \n        // newBalTo = poolRatio^(1/weightTo) * balTo;\n        uint tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\n        uint newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\n\n        uint tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\n\n        // charge swap fee on the output token side \n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\n        uint zaz = bmul(bsub(BONE, normalizedWeight), swapFee); \n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\n        return tokenAmountOut;\n    }\n\n    /**********************************************************************************************\n    // calcPoolInGivenSingleOut                                                                  //\n    // pAi = poolAmountIn               // /               tAo             \\\\     / wO \\     \\   //\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\   | ---- |     \\  //\n    // tAo = tokenAmountOut      pS - ||   \\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\ tW /  * pS | //\n    // ps = poolSupply                 \\\\ -----------------------------------/                /  //\n    // wO = tokenWeightOut  pAi =       \\\\               bO                 /                /   //\n    // tW = totalWeight           -------------------------------------------------------------  //\n    // sF = swapFee                                        ( 1 - eF )                            //\n    // eF = exitFee                                                                              //\n    **********************************************************************************************/\n    function calcPoolInGivenSingleOut(\n        uint tokenBalanceOut,\n        uint tokenWeightOut,\n        uint poolSupply,\n        uint totalWeight,\n        uint tokenAmountOut,\n        uint swapFee\n    )\n        public pure\n        returns (uint poolAmountIn)\n    {\n\n        // charge swap fee on the output token side \n        uint normalizedWeight = bdiv(tokenWeightOut, totalWeight);\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\n        uint zoo = bsub(BONE, normalizedWeight);\n        uint zar = bmul(zoo, swapFee); \n        uint tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\n\n        uint newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\n        uint tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\n\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\n        uint poolRatio = bpow(tokenOutRatio, normalizedWeight);\n        uint newPoolSupply = bmul(poolRatio, poolSupply);\n        uint poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\n\n        // charge exit fee on the pool token side\n        // pAi = pAiAfterExitFee/(1-exitFee)\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\n        return poolAmountIn;\n    }\n\n    /** math */\n\n    function btoi(uint a)\n        internal pure \n        returns (uint)\n    {\n        return a / BONE;\n    }\n\n    function bfloor(uint a)\n        internal pure\n        returns (uint)\n    {\n        return btoi(a) * BONE;\n    }\n\n    function badd(uint a, uint b)\n        internal pure\n        returns (uint)\n    {\n        uint c = a + b;\n        require(c >= a, \"ERR_ADD_OVERFLOW\");\n        return c;\n    }\n\n    function bsub(uint a, uint b)\n        internal pure\n        returns (uint)\n    {\n        (uint c, bool flag) = bsubSign(a, b);\n        require(!flag, \"ERR_SUB_UNDERFLOW\");\n        return c;\n    }\n\n    function bsubSign(uint a, uint b)\n        internal pure\n        returns (uint, bool)\n    {\n        if (a >= b) {\n            return (a - b, false);\n        } else {\n            return (b - a, true);\n        }\n    }\n\n    function bmul(uint a, uint b)\n        internal pure\n        returns (uint)\n    {\n        uint c0 = a * b;\n        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\n        uint c1 = c0 + (BONE / 2);\n        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\n        uint c2 = c1 / BONE;\n        return c2;\n    }\n\n    function bdiv(uint a, uint b)\n        internal pure\n        returns (uint)\n    {\n        require(b != 0, \"ERR_DIV_ZERO\");\n        uint c0 = a * BONE;\n        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\n        uint c1 = c0 + (b / 2);\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\n        uint c2 = c1 / b;\n        return c2;\n    }\n\n    // DSMath.wpow\n    function bpowi(uint a, uint n)\n        internal pure\n        returns (uint)\n    {\n        uint z = n % 2 != 0 ? a : BONE;\n\n        for (n /= 2; n != 0; n /= 2) {\n            a = bmul(a, a);\n\n            if (n % 2 != 0) {\n                z = bmul(z, a);\n            }\n        }\n        return z;\n    }\n\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\n    // of approximation of b^0.w\n    function bpow(uint base, uint exp)\n        internal pure\n        returns (uint)\n    {\n        require(base >= MIN_BPOW_BASE, \"ERR_BPOW_BASE_TOO_LOW\");\n        require(base <= MAX_BPOW_BASE, \"ERR_BPOW_BASE_TOO_HIGH\");\n\n        uint whole  = bfloor(exp);   \n        uint remain = bsub(exp, whole);\n\n        uint wholePow = bpowi(base, btoi(whole));\n\n        if (remain == 0) {\n            return wholePow;\n        }\n\n        uint partialResult = bpowApprox(base, remain, BPOW_PRECISION);\n        return bmul(wholePow, partialResult);\n    }\n\n    function bpowApprox(uint base, uint exp, uint precision)\n        internal pure\n        returns (uint)\n    {\n        // term 0:\n        uint a     = exp;\n        (uint x, bool xneg)  = bsubSign(base, BONE);\n        uint term = BONE;\n        uint sum   = term;\n        bool negative = false;\n\n\n        // term(k) = numer / denom \n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\n        // continue until term is less than precision\n        for (uint i = 1; term >= precision; i++) {\n            uint bigK = i * BONE;\n            (uint c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\n            term = bmul(term, bmul(c, x));\n            term = bdiv(term, bigK);\n            if (term == 0) break;\n\n            if (xneg) negative = !negative;\n            if (cneg) negative = !negative;\n            if (negative) {\n                sum = bsub(sum, term);\n            } else {\n                sum = badd(sum, term);\n            }\n        }\n\n        return sum;\n    }\n}"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\nimport { ISuperToken } from \"./ISuperToken.sol\";\nimport { ISuperfluidToken  } from \"./ISuperfluidToken.sol\";\nimport { ISuperfluid } from \"./ISuperfluid.sol\";\n\n\n/**\n * @dev Superfluid's Governance interface\n *\n * @author Superfluid\n */\ninterface ISuperfluidGovernance {\n\n    /**\n     * @dev Replace the current governance with a new governance\n     */\n    function replaceGovernance(\n        ISuperfluid host,\n        address newGov) external;\n\n    /**\n     * @dev Register a new agreement class\n     */\n    function registerAgreementClass(\n        ISuperfluid host,\n        address agreementClass) external;\n\n    /**\n     * @dev Update logics of the contracts\n     *\n     * NOTE:\n     * - Because they might have inter-dependencies, it is good to have one single function to update them all\n     */\n    function updateContracts(\n        ISuperfluid host,\n        address hostNewLogic,\n        address[] calldata agreementClassNewLogics,\n        address superTokenFactoryNewLogic\n    ) external;\n\n    /**\n     * @dev Update supertoken logic contract to the latest that is managed by the super token factory\n     */\n    function updateSuperTokenLogic(\n        ISuperfluid host,\n        ISuperToken token) external;\n\n    /// @dev Get configuration as address value\n    function getConfigAsAddress(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key) external view returns (address value);\n\n    /// @dev Get configuration as uint256 value\n    function getConfigAsUint256(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key) external view returns (uint256 value);\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\nimport { ISuperAgreement } from \"./ISuperAgreement.sol\";\n\n\n/**\n * @title Superfluid's token interface.\n *\n * @author Superfluid\n */\ninterface ISuperfluidToken {\n\n    /**************************************************************************\n     * Basic information\n     *************************************************************************/\n\n    /**\n     * @dev Get superfluid host contract address\n     */\n    function getHost() external view returns(address host);\n\n    /**************************************************************************\n     * Real-time balance functions\n     *************************************************************************/\n\n    /**\n    * @dev Calculate the real balance of a user, taking in consideration all agreements of the account\n    * @param account for the query\n    * @param timestamp Time of balance\n    * @param account Account to query\n    * @return availableBalance Real-time balance\n    * @return deposit Account deposit\n    * @return owedDeposit Account owed Deposit\n    */\n    function realtimeBalanceOf(\n       address account,\n       uint256 timestamp\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit);\n\n    /// @dev realtimeBalanceOf with timestamp equals to block timestamp\n    function realtimeBalanceOfNow(\n       address account\n    )\n        external view\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit,\n            uint256 timestamp);\n\n    /**\n    * @dev Check if one account is critical\n    * @param account Account check if is critical by a future time\n    * @param timestamp Time of balance\n    * @return isCritical\n    */\n    function isAccountCritical(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n    * @dev Check if one account is critical now\n    * @param account Account check if is critical by a future time\n    * @return isCritical\n    */\n    function isAccountCriticalNow(\n        address account\n    )\n        external view\n        returns(bool isCritical);\n\n    /**\n     * @dev Check if one account is solvent\n     * @param account Account check if is solvent by a future time\n     * @param timestamp Time of balance\n     * @return isSolvent\n     */\n    function isAccountSolvent(\n        address account,\n        uint256 timestamp\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n     * @dev Check if one account is solvent now\n     * @param account Account check if is solvent now\n     * @return isSolvent\n     */\n    function isAccountSolventNow(\n        address account\n    )\n        external view\n        returns(bool isSolvent);\n\n    /**\n    * @dev Get a list of agreements that is active for the account\n    * @dev An active agreement is one that has state for the account\n    * @param account Account to query\n    * @return activeAgreements List of accounts that have non-zero states for the account\n    */\n    function getAccountActiveAgreements(address account)\n       external view\n       returns(ISuperAgreement[] memory activeAgreements);\n\n\n   /**************************************************************************\n    * Super Agreement hosting functions\n    *************************************************************************/\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function createAgreement(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n\n    /**\n     * @dev Agreement creation event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementCreated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Get data of the agreement\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @return data Data of the agreement\n     */\n    function getAgreementData(\n        address agreementClass,\n        bytes32 id,\n        uint dataLength\n    )\n        external view\n        returns(bytes32[] memory data);\n\n    /**\n     * @dev Create a new agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    function updateAgreementData(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external;\n\n    /**\n     * @dev Agreement creation event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param data Agreement data\n     */\n    event AgreementUpdated(\n        address indexed agreementClass,\n        bytes32 id,\n        bytes32[] data\n    );\n\n    /**\n     * @dev Close the agreement\n     * @param id Agreement ID\n     */\n    function terminateAgreement(\n        bytes32 id,\n        uint dataLength\n    )\n        external;\n\n    /**\n     * @dev Agreement termination event\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     */\n    event AgreementTerminated(\n        address indexed agreementClass,\n        bytes32 id\n    );\n\n    /**\n     * @dev Update agreement state slot\n     * @param account Account to be updated\n     *\n     * NOTE\n     * - To clear the storage out, provide zero-ed array of intended length\n     */\n    function updateAgreementStateSlot(\n        address account,\n        uint256 slotId,\n        bytes32[] calldata slotData\n    )\n        external;\n\n    /**\n     * @dev Agreement account state updated event\n     * @param agreementClass Contract address of the agreement\n     * @param account Account updated\n     * @param slotId slot id of the agreement state\n     */\n    event AgreementStateUpdated(\n        address indexed agreementClass,\n        address indexed account,\n        uint256 slotId\n    );\n\n    /**\n     * @dev Get data of the slot of the state of a agreement\n     * @param agreementClass Contract address of the agreement\n     * @param account Account to query\n     * @param slotId slot id of the state\n     * @param dataLength length of the state data\n     */\n    function getAgreementStateSlot(\n        address agreementClass,\n        address account,\n        uint256 slotId,\n        uint dataLength\n    )\n        external view\n        returns (bytes32[] memory slotData);\n\n    /**\n     * @dev Agreement account state updated event\n     * @param agreementClass Contract address of the agreement\n     * @param account Account of the agrement\n     * @param state Agreement state of the account\n     */\n    event AgreementAccountStateUpdated(\n        address indexed agreementClass,\n        address indexed account,\n        bytes state\n    );\n\n    /**\n     * @dev Settle balance from an account by the agreement.\n     *      The agreement needs to make sure that the balance delta is balanced afterwards\n     * @param account Account to query.\n     * @param delta Amount of balance delta to be settled\n     *\n     * Modifiers:\n     *  - onlyAgreement\n     */\n    function settleBalance(\n        address account,\n        int256 delta\n    )\n        external;\n\n    /**\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param rewardAccount Account that collect the reward\n     * @param rewardAmount Amount of liquidation reward\n     */\n    event AgreementLiquidated(\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed penaltyAccount,\n        address indexed rewardAccount,\n        uint256 rewardAmount\n    );\n\n    /**\n     * @dev System bailout occurred (DEPRECATIED BY AgreementLiquidatedBy)\n     * @param bailoutAccount Account that bailout the penalty account\n     * @param bailoutAmount Amount of account bailout\n     */\n    event Bailout(\n        address indexed bailoutAccount,\n        uint256 bailoutAmount\n    );\n\n    /**\n     * @dev Agreement liquidation event (including agent account)\n     * @param agreementClass Contract address of the agreement\n     * @param id Agreement ID\n     * @param liquidatorAccount Account of the agent that performed the liquidation.\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param bondAccount Account that collect the reward or bailout accounts\n     * @param rewardAmount Amount of liquidation reward\n     * @param bailoutAmount Amount of liquidation bailouot\n     *\n     * NOTE:\n     * Reward account rule:\n     * - if bailout is equal to 0, then\n     *   - the bondAccount will get the rewardAmount,\n     *   - the penaltyAccount will pay for the rewardAmount.\n     * - if bailout is larger than 0, then\n     *   - the liquidatorAccount will get the rewardAmouont,\n     *   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\n     *   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\n     */\n    event AgreementLiquidatedBy(\n        address liquidatorAccount,\n        address indexed agreementClass,\n        bytes32 id,\n        address indexed penaltyAccount,\n        address indexed bondAccount,\n        uint256 rewardAmount,\n        uint256 bailoutAmount\n    );\n\n    /**\n     * @dev Make liquidation payouts\n     * @param id Agreement ID\n     * @param liquidator Address of the executer of liquidation\n     * @param penaltyAccount Account of the agreement to be penalized\n     * @param rewardAmount Amount of liquidation reward\n     * @param bailoutAmount Amount of account bailout needed\n     *\n     * NOTE:\n     * Liquidation rules:\n     *  - If a bailout is required (bailoutAmount > 0)\n     *     - the actual reward goes to the liquidator,\n     *     - while the reward account becomes the bailout account\n     *     - total bailout include: bailout amount + reward amount\n     *\n     * Modifiers:\n     *  - onlyAgreement\n     */\n    function makeLiquidationPayouts\n    (\n        bytes32 id,\n        address liquidator,\n        address penaltyAccount,\n        uint256 rewardAmount,\n        uint256 bailoutAmount\n    )\n        external;\n\n    /**************************************************************************\n     * Function modifiers for access control and parameter validations\n     *\n     * While they cannot be explicitly stated in function definitions, they are\n     * listed in function definition comments instead for clarity.\n     *\n     * NOTE: solidity-coverage not supporting it\n     *************************************************************************/\n\n     /// @dev The msg.sender must be host contract\n     //modifier onlyHost() virtual;\n\n    /// @dev The msg.sender must be a listed agreement.\n    //modifier onlyAgreement() virtual;\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\nimport { ISuperfluid } from \"./ISuperfluid.sol\";\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\nimport { TokenInfo } from \"../tokens/TokenInfo.sol\";\nimport { IERC777 } from \"@openzeppelin/contracts/token/ERC777/IERC777.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title Superfluid's super token (Superfluid Token + ERC20 + ERC777) interface\n *\n * @author Superfluid\n */\ninterface ISuperToken is ISuperfluidToken, TokenInfo, IERC20, IERC777 {\n\n    /// @dev Initialize the contract\n    function initialize(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        string calldata n,\n        string calldata s\n    ) external;\n\n    /**************************************************************************\n    * TokenInfo & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view override(IERC777, TokenInfo) returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view override(IERC777, TokenInfo) returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: SuperToken always uses 18 decimals.\n     *\n     * Note: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view override(TokenInfo) returns (uint8);\n\n    /**************************************************************************\n    * ERC20 & ERC777\n    *************************************************************************/\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() external view override(IERC777, IERC20) returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address account) external view override(IERC777, IERC20) returns(uint256 balance);\n\n    /**************************************************************************\n    * ERC20\n    *************************************************************************/\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external override(IERC20) view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns (bool);\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n     function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n\n    /**************************************************************************\n    * ERC777\n    *************************************************************************/\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     * means all token operations (creation, movement and destruction) must have\n     * amounts that are a multiple of this number.\n     *\n     * For super token contracts, this value is 1 always\n     */\n    function granularity() external view override(IERC777) returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * If send or receive hooks are registered for the caller and `recipient`,\n     * the corresponding functions will be called with `data` and empty\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata data) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external override(IERC777);\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external override(IERC777) view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external override(IERC777);\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external override(IERC777) view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override(IERC777);\n\n    /**************************************************************************\n     * SuperToken custom token functions\n     *************************************************************************/\n\n    /**\n     * @dev Mint new tokens for the account\n     *\n     * Modifiers:\n     *  - onlySelf\n     */\n    function selfMint(\n        address account,\n        uint256 amount,\n        bytes memory userData\n    ) external;\n\n   /**\n    * @dev Burn existing tokens for the account\n    *\n    * Modifiers:\n    *  - onlySelf\n    */\n   function selfBurn(\n       address account,\n       uint256 amount,\n       bytes memory userData\n   ) external;\n\n    /**************************************************************************\n     * SuperToken extra functions\n     *************************************************************************/\n\n    /**\n     * @dev Transfer all available balance from `msg.sender` to `recipient`\n     */\n    function transferAll(address recipient) external;\n\n    /**************************************************************************\n     * ERC20 wrapping\n     *************************************************************************/\n\n    /**\n     * @dev Return the underlying token contract\n     * @return tokenAddr Underlying token address\n     */\n    function getUnderlyingToken() external view returns(address tokenAddr);\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken.\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     *\n     * NOTE: It will use ´transferFrom´ to get tokens. Before calling this\n     * function you should ´approve´ this contract\n     */\n    function upgrade(uint256 amount) external;\n\n    /**\n     * @dev Upgrade ERC20 to SuperToken and transfer immediately\n     * @param to The account to received upgraded tokens\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\n     * @param data User data for the TokensRecipient callback\n     *\n     * NOTE: It will use ´transferFrom´ to get tokens. Before calling this\n     * function you should ´approve´ this contract\n     */\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Token upgrade event\n     * @param account Account where tokens are upgraded to\n     * @param amount Amount of tokens upgraded (in 18 decimals)\n     */\n    event TokenUpgraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**\n     * @dev Downgrade SuperToken to ERC20.\n     * @dev It will call transfer to send tokens\n     * @param amount Number of tokens to be downgraded\n     */\n    function downgrade(uint256 amount) external;\n\n    /**\n     * @dev Token downgrade event\n     * @param account Account whose tokens are upgraded\n     * @param amount Amount of tokens downgraded\n     */\n    event TokenDowngraded(\n        address indexed account,\n        uint256 amount\n    );\n\n    /**************************************************************************\n    * Batch Operations\n    *************************************************************************/\n\n    /**\n    * @dev Perform ERC20 approve by host contract.\n    * @param account The account owner to be approved.\n    * @param spender The spender of account owner's funds.\n    * @param amount Number of tokens to be approved.\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationApprove(\n        address account,\n        address spender,\n        uint256 amount\n    ) external;\n\n    /**\n    * @dev Perform ERC20 transfer from by host contract.\n    * @param account The account to spend sender's funds.\n    * @param spender  The account where the funds is sent from.\n    * @param recipient The recipient of thefunds.\n    * @param amount Number of tokens to be transferred.\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationTransferFrom(\n        address account,\n        address spender,\n        address recipient,\n        uint256 amount\n    ) external;\n\n    /**\n    * @dev Upgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be upgraded (in 18 decimals)\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationUpgrade(address account, uint256 amount) external;\n\n    /**\n    * @dev Downgrade ERC20 to SuperToken by host contract.\n    * @param account The account to be changed.\n    * @param amount Number of tokens to be downgraded (in 18 decimals)\n    *\n    * Modifiers:\n    *  - onlyHost\n    */\n    function operationDowngrade(address account, uint256 amount) external;\n\n\n    /**************************************************************************\n    * Function modifiers for access control and parameter validations\n    *\n    * While they cannot be explicitly stated in function definitions, they are\n    * listed in function definition comments instead for clarity.\n    *\n    * NOTE: solidity-coverage not supporting it\n    *************************************************************************/\n\n    /// @dev The msg.sender must be the contract itself\n    //modifier onlySelf() virtual\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\nimport {\n    IERC20,\n    ERC20WithTokenInfo\n} from \"../tokens/ERC20WithTokenInfo.sol\";\n\n\ninterface ISuperTokenFactory {\n\n    /**\n     * @dev Get superfluid host contract address\n     */\n    function getHost() external view returns(address host);\n\n    /// @dev Initialize the contract\n    function initialize() external;\n\n    /**\n     * @dev Get the current super token logic used by the factory\n     */\n    function getSuperTokenLogic() external view returns (ISuperToken superToken);\n\n    /**\n     * @dev Upgradability modes\n     */\n    enum Upgradability {\n        /// Non upgradable super token, `host.updateSuperTokenLogic` will revert\n        NON_UPGRADABLE,\n        /// Upgradable through `host.updateSuperTokenLogic` operation\n        SEMI_UPGRADABLE,\n        /// Always using the latest super token logic\n        FULL_UPGRADABE\n    }\n\n    /**\n     * @dev Create new super token wrapper for the underlying ERC20 token\n     * @param underlyingToken Underlying ERC20 token\n     * @param underlyingDecimals Underlying token decimals\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     */\n    function createERC20Wrapper(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        external\n        returns (ISuperToken superToken);\n\n    /**\n     * @dev Create new super token wrapper for the underlying ERC20 token with extra token info\n     * @param underlyingToken Underlying ERC20 token\n     * @param upgradability Upgradability mode\n     * @param name Super token name\n     * @param symbol Super token symbol\n     *\n     * NOTE:\n     * - It assumes token provide the .decimals() function\n     */\n    function createERC20Wrapper(\n        ERC20WithTokenInfo underlyingToken,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        external\n        returns (ISuperToken superToken);\n\n    function initializeCustomSuperToken(\n        address customSuperTokenProxy\n    )\n        external;\n\n    event SuperTokenLogicCreated(ISuperToken indexed tokenLogic);\n\n    event SuperTokenCreated(ISuperToken indexed token);\n\n    event CustomSuperTokenCreated(ISuperToken indexed token);\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\nimport { ISuperfluidToken } from \"./ISuperfluidToken.sol\";\n\n/**\n * @title Superfluid's agreement interface.\n *\n * @author Superfluid\n */\ninterface ISuperAgreement {\n\n    /**\n     * @dev Initialize the agreement contract\n     */\n    function initialize() external;\n\n    /**\n     * @dev Get the type of the agreement class.\n     */\n    function agreementType() external view returns (bytes32);\n\n    /**\n     * @dev Calculate the real-time balance for the account of this agreement class.\n     * @param account Account the state belongs to\n     * @param time Future time used for the calculation.\n     * @return dynamicBalance Dynamic balance portion of real-time balance of this agreement.\n     * @return deposit Account deposit amount of this agreement.\n     * @return owedDeposit Account owed deposit amount of this agreement.\n     */\n    function realtimeBalanceOf(\n        ISuperfluidToken token,\n        address account,\n        uint256 time\n    )\n        external\n        view\n        returns (\n            int256 dynamicBalance,\n            uint256 deposit,\n            uint256 owedDeposit\n        );\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\nimport { ISuperToken } from \"./ISuperToken.sol\";\n\n\n/**\n * @title Superfluid's app interface.\n *\n * NOTE:\n * - Be fearful of the app jail, when the word permitted is used.\n *\n * @author Superfluid\n */\ninterface ISuperApp {\n\n    /**\n     * @dev Callback before a new agreement is created.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param ctx The context data.\n     * @return cbdata A free format in memory data the app can use to pass\n     *          arbitary information to the after-hook callback.\n     *\n     * NOTE:\n     * - It will be invoked with `staticcall`, no state changes are permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function beforeAgreementCreated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n    /**\n     * @dev Callback after a new agreement is created.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param cbdata The data returned from the before-hook callback.\n     * @param ctx The context data.\n     * @return newCtx The current context of the transaction.\n     *\n     * NOTE:\n     * - State changes is permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function afterAgreementCreated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n\n    /**\n     * @dev Callback before a new agreement is updated.\n     * @param superToken The super token used for the agreement.\n     * @param agreementClass The agreement class address.\n     * @param agreementId The agreementId\n     * @param agreementData The agreement data (non-compressed)\n     * @param ctx The context data.\n     * @return cbdata A free format in memory data the app can use to pass\n     *          arbitary information to the after-hook callback.\n     *\n     * NOTE:\n     * - It will be invoked with `staticcall`, no state changes are permitted.\n     * - Only revert with a \"reason\" is permitted.\n     */\n    function beforeAgreementUpdated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n\n    /**\n    * @dev Callback after a new agreement is updated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param cbdata The data returned from the before-hook callback.\n    * @param ctx The context data.\n    * @return newCtx The current context of the transaction.\n    *\n    * NOTE:\n    * - State changes is permitted.\n    * - Only revert with a \"reason\" is permitted.\n    */\n    function afterAgreementUpdated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n\n    /**\n    * @dev Callback before a new agreement is terminated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param ctx The context data.\n    * @return cbdata A free format in memory data the app can use to pass\n    *          arbitary information to the after-hook callback.\n    *\n    * NOTE:\n    * - It will be invoked with `staticcall`, no state changes are permitted.\n    * - Revert is not permitted.\n    */\n    function beforeAgreementTerminated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata ctx\n    )\n        external\n        view\n        returns (bytes memory cbdata);\n\n    /**\n    * @dev Callback after a new agreement is terminated.\n    * @param superToken The super token used for the agreement.\n    * @param agreementClass The agreement class address.\n    * @param agreementId The agreementId\n    * @param agreementData The agreement data (non-compressed)\n    * @param cbdata The data returned from the before-hook callback.\n    * @param ctx The context data.\n    * @return newCtx The current context of the transaction.\n    *\n    * NOTE:\n    * - State changes is permitted.\n    * - Revert is not permitted.\n    */\n    function afterAgreementTerminated(\n        ISuperToken superToken,\n        address agreementClass,\n        bytes32 agreementId,\n        bytes calldata agreementData,\n        bytes calldata cbdata,\n        bytes calldata ctx\n    )\n        external\n        returns (bytes memory newCtx);\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\n/**\n * @dev Super app definitions library\n */\nlibrary SuperAppDefinitions {\n\n    /**************************************************************************\n    / App manifest config word\n    /**************************************************************************/\n\n    /*\n     * App level is a way to allow the app to whitelist what other app it can\n     * interact with (aka. composite app feature).\n     *\n     * For more details, refer to the technical paper of superfluid protocol.\n     */\n    uint256 constant internal APP_LEVEL_MASK = 0xFF;\n\n    // The app is at the final level, hence it doesn't want to interact with any other app\n    uint256 constant internal APP_LEVEL_FINAL = 1 << 0;\n\n    // The app is at the second level, it may interact with other final level apps if whitelisted\n    uint256 constant internal APP_LEVEL_SECOND = 1 << 1;\n\n    function getAppLevel(uint256 configWord) internal pure returns (uint8) {\n        return uint8(configWord & APP_LEVEL_MASK);\n    }\n\n    uint256 constant internal APP_JAIL_BIT = 1 << 15;\n    function isAppJailed(uint256 configWord) internal pure returns (bool) {\n        return (configWord & SuperAppDefinitions.APP_JAIL_BIT) > 0;\n    }\n\n    /**************************************************************************\n    / Callback implementation bit masks\n    /**************************************************************************/\n    uint256 constant internal AGREEMENT_CALLBACK_NOOP_BITMASKS = 0xFF << 32;\n    uint256 constant internal BEFORE_AGREEMENT_CREATED_NOOP = 1 << (32 + 0);\n    uint256 constant internal AFTER_AGREEMENT_CREATED_NOOP = 1 << (32 + 1);\n    uint256 constant internal BEFORE_AGREEMENT_UPDATED_NOOP = 1 << (32 + 2);\n    uint256 constant internal AFTER_AGREEMENT_UPDATED_NOOP = 1 << (32 + 3);\n    uint256 constant internal BEFORE_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 4);\n    uint256 constant internal AFTER_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 5);\n\n    /**************************************************************************\n    / App Jail Reasons\n    /**************************************************************************/\n\n    uint256 constant internal APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR = 1;\n    uint256 constant internal APP_RULE_NO_REGISTRATION_FOR_EOA = 2;\n    uint256 constant internal APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK = 10;\n    uint256 constant internal APP_RULE_NO_CRITICAL_SENDER_ACCOUNT = 11;\n    uint256 constant internal APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT = 12;\n    uint256 constant internal APP_RULE_CTX_IS_READONLY = 20;\n    uint256 constant internal APP_RULE_CTX_IS_NOT_CLEAN = 21;\n    uint256 constant internal APP_RULE_CTX_IS_MALFORMATED = 22;\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED = 30;\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_JAILED = 31;\n    uint256 constant internal APP_RULE_MAX_APP_LEVEL_REACHED = 40;\n}\n\n/**\n * @dev Context definitions library\n */\nlibrary ContextDefinitions {\n\n    /**************************************************************************\n    / Call info\n    /**************************************************************************/\n\n    // app level\n    uint256 constant internal CALL_INFO_APP_LEVEL_MASK = 0xFF;\n\n    // call type\n    uint256 constant internal CALL_INFO_CALL_TYPE_SHIFT = 32;\n    uint256 constant internal CALL_INFO_CALL_TYPE_MASK = 0xF << CALL_INFO_CALL_TYPE_SHIFT;\n    uint8 constant internal CALL_INFO_CALL_TYPE_AGREEMENT = 1;\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_ACTION = 2;\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_CALLBACK = 3;\n\n    function decodeCallInfo(uint256 callInfo)\n        internal pure\n        returns (uint8 appLevel, uint8 callType)\n    {\n        appLevel = uint8(callInfo & CALL_INFO_APP_LEVEL_MASK);\n        callType = uint8((callInfo & CALL_INFO_CALL_TYPE_MASK) >> CALL_INFO_CALL_TYPE_SHIFT);\n    }\n\n    function encodeCallInfo(uint8 appLevel, uint8 callType)\n        internal pure\n        returns (uint256 callInfo)\n    {\n        return uint256(appLevel) | (uint256(callType) << CALL_INFO_CALL_TYPE_SHIFT);\n    }\n\n}\n\n/**\n * @dev Batch operation library\n */\nlibrary BatchOperation {\n    /**\n     * @dev ERC20.approve batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationApprove(\n     *     abi.decode(data, (address spender, uint256 amount))\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_APPROVE = 1;\n    /**\n     * @dev ERC20.transferFrom batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationTransferFrom(\n     *     abi.decode(data, (address sender, address recipient, uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_ERC20_TRANSFER_FROM = 2;\n    /**\n     * @dev SuperToken.upgrade batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationUpgrade(\n     *     abi.decode(data, (uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_UPGRADE = 1 + 100;\n    /**\n     * @dev SuperToken.downgrade batch operation type\n     *\n     * Call spec:\n     * ISuperToken(target).operationDowngrade(\n     *     abi.decode(data, (uint256 amount)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_DOWNGRADE = 2 + 100;\n    /**\n     * @dev ERC20 Approve batch operation type\n     *\n     * Call spec:\n     * callAgreement(\n     *     ISuperAgreement(target)),\n     *     abi.decode(data, (bytes calldata, bytes userdata)\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT = 1 + 200;\n    /**\n     * @dev ERC20 Approve batch operation type\n     *\n     * Call spec:\n     * callAppAction(\n     *     ISuperApp(target)),\n     *     data\n     * )\n     */\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION = 2 + 200;\n}\n\nlibrary SuperfluidGovernanceConfigs {\n\n    bytes32 constant internal SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.superfluid.rewardAddress\");\n\n    bytes32 constant internal CFAv1_LIQUIDATION_PERIOD_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.liquidationPeriod\");\n\n    function getTrustedForwarderConfigKey(address forwarder) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.trustedForwarder\",\n            forwarder));\n    }\n\n    function getAppWhiteListingSecretKey(address deployer, string memory registrationkey) internal pure returns (bytes32) {\n        return keccak256(abi.encode(\n            \"org.superfluid-finance.superfluid.appWhiteListing.seed\",\n            deployer,\n            registrationkey));\n    }\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.5.0;\n\n/**\n * @dev ERC20 token info interface\n *\n * NOTE: ERC20 standard interface does not specify these functions, but\n * often the token implementations have them.\n *\n */\ninterface TokenInfo {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC777Token standard as defined in the EIP.\n *\n * This contract uses the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\n * token holders and recipients react to token movements by using setting implementers\n * for the associated interfaces in said registry. See {IERC1820Registry} and\n * {ERC1820Implementer}.\n */\ninterface IERC777 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the smallest part of the token that is not divisible. This\n     * means all token operations (creation, movement and destruction) must have\n     * amounts that are a multiple of this number.\n     *\n     * For most token contracts, this value will equal 1.\n     */\n    function granularity() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by an account (`owner`).\n     */\n    function balanceOf(address owner) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * If send or receive hooks are registered for the caller and `recipient`,\n     * the corresponding functions will be called with `data` and empty\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function send(address recipient, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\n     * total supply.\n     *\n     * If a send hook is registered for the caller, the corresponding function\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - the caller must have at least `amount` tokens.\n     */\n    function burn(uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev Returns true if an account is an operator of `tokenHolder`.\n     * Operators can send and burn tokens on behalf of their owners. All\n     * accounts are their own operator.\n     *\n     * See {operatorSend} and {operatorBurn}.\n     */\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n\n    /**\n     * @dev Make an account an operator of the caller.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits an {AuthorizedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function authorizeOperator(address operator) external;\n\n    /**\n     * @dev Revoke an account's operator status for the caller.\n     *\n     * See {isOperatorFor} and {defaultOperators}.\n     *\n     * Emits a {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be calling address.\n     */\n    function revokeOperator(address operator) external;\n\n    /**\n     * @dev Returns the list of default operators. These accounts are operators\n     * for all token holders, even if {authorizeOperator} was never called on\n     * them.\n     *\n     * This list is immutable, but individual holders may revoke these via\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\n     */\n    function defaultOperators() external view returns (address[] memory);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n     * be an operator of `sender`.\n     *\n     * If send or receive hooks are registered for `sender` and `recipient`,\n     * the corresponding functions will be called with `data` and\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits a {Sent} event.\n     *\n     * Requirements\n     *\n     * - `sender` cannot be the zero address.\n     * - `sender` must have at least `amount` tokens.\n     * - the caller must be an operator for `sender`.\n     * - `recipient` cannot be the zero address.\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * The caller must be an operator of `account`.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n     *\n     * Emits a {Burned} event.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     * - the caller must be an operator for `account`.\n     */\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external;\n\n    event Sent(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bytes data,\n        bytes operatorData\n    );\n\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.5.0;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { TokenInfo } from \"./TokenInfo.sol\";\n\n\n/**\n *\n * @dev Interface for ERC20 token with token info\n *\n * NOTE: Using abstract contract instead of interfaces because old solidity\n * does not support interface inheriting other interfaces\n * solhint-disable-next-line no-empty-blocks\n *\n */\n// solhint-disable-next-line no-empty-blocks\nabstract contract ERC20WithTokenInfo is IERC20, TokenInfo {}\n"
    },
    "contracts/balancer/BPool.sol": {
      "content": "// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.7.6;\n\nimport \"./BToken.sol\";\nimport \"./BMath.sol\";\n\ncontract BPool is BBronze, BToken, BMath {\n\n    struct Record {\n        bool bound;   // is token bound to pool\n        uint index;   // private\n        uint denorm;  // denormalized weight\n        uint balance;\n    }\n\n    event LOG_SWAP(\n        address indexed caller,\n        address indexed tokenIn,\n        address indexed tokenOut,\n        uint256         tokenAmountIn,\n        uint256         tokenAmountOut\n    );\n\n    event LOG_JOIN(\n        address indexed caller,\n        address indexed tokenIn,\n        uint256         tokenAmountIn\n    );\n\n    event LOG_EXIT(\n        address indexed caller,\n        address indexed tokenOut,\n        uint256         tokenAmountOut\n    );\n\n    event LOG_CALL(\n        bytes4  indexed sig,\n        address indexed caller,\n        bytes           data\n    ) anonymous;\n\n    modifier _logs_() {\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\n        _;\n    }\n\n    modifier _lock_() {\n        require(!_mutex, \"ERR_REENTRY\");\n        _mutex = true;\n        _;\n        _mutex = false;\n    }\n\n    modifier _viewlock_() {\n        require(!_mutex, \"ERR_REENTRY\");\n        _;\n    }\n\n    bool private _mutex;\n\n    address private _factory;    // BFactory address to push token exitFee to\n    address private _controller; // has CONTROL role\n    bool private _publicSwap; // true if PUBLIC can call SWAP functions\n\n    // `setSwapFee` and `finalize` require CONTROL\n    // `finalize` sets `PUBLIC can SWAP`, `PUBLIC can JOIN`\n    uint private _swapFee;\n    bool private _finalized;\n\n    address[] private _tokens;\n    mapping(address=>Record) private  _records;\n    uint private _totalWeight;\n\n    constructor() public {\n        _controller = msg.sender;\n        _factory = msg.sender;\n        _swapFee = MIN_FEE;\n        _publicSwap = false;\n        _finalized = false;\n    }\n\n    function isPublicSwap()\n        external view\n        returns (bool)\n    {\n        return _publicSwap;\n    }\n\n    function isFinalized()\n        external view\n        returns (bool)\n    {\n        return _finalized;\n    }\n\n    function isBound(address t)\n        external view\n        returns (bool)\n    {\n        return _records[t].bound;\n    }\n\n    function getNumTokens()\n        external view\n        returns (uint) \n    {\n        return _tokens.length;\n    }\n\n    function getCurrentTokens()\n        external view _viewlock_\n        returns (address[] memory tokens)\n    {\n        return _tokens;\n    }\n\n    function getFinalTokens()\n        external view\n        _viewlock_\n        returns (address[] memory tokens)\n    {\n        require(_finalized, \"ERR_NOT_FINALIZED\");\n        return _tokens;\n    }\n\n    function getDenormalizedWeight(address token)\n        external view\n        _viewlock_\n        returns (uint)\n    {\n\n        require(_records[token].bound, \"ERR_NOT_BOUND\");\n        return _records[token].denorm;\n    }\n\n    function getTotalDenormalizedWeight()\n        external view\n        _viewlock_\n        returns (uint)\n    {\n        return _totalWeight;\n    }\n\n    function getNormalizedWeight(address token)\n        external view\n        _viewlock_\n        returns (uint)\n    {\n\n        require(_records[token].bound, \"ERR_NOT_BOUND\");\n        uint denorm = _records[token].denorm;\n        return bdiv(denorm, _totalWeight);\n    }\n\n    function getBalance(address token)\n        external view\n        _viewlock_\n        returns (uint)\n    {\n\n        require(_records[token].bound, \"ERR_NOT_BOUND\");\n        return _records[token].balance;\n    }\n\n    function getSwapFee()\n        external view\n        _viewlock_\n        returns (uint)\n    {\n        return _swapFee;\n    }\n\n    function getController()\n        external view\n        _viewlock_\n        returns (address)\n    {\n        return _controller;\n    }\n\n    function setSwapFee(uint swapFee)\n        external\n        _logs_\n        _lock_\n    { \n        require(!_finalized, \"ERR_IS_FINALIZED\");\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n        require(swapFee >= MIN_FEE, \"ERR_MIN_FEE\");\n        require(swapFee <= MAX_FEE, \"ERR_MAX_FEE\");\n        _swapFee = swapFee;\n    }\n\n    function setController(address manager)\n        external\n        _logs_\n        _lock_\n    {\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n        _controller = manager;\n    }\n\n    function setPublicSwap(bool public_)\n        external\n        _logs_\n        _lock_\n    {\n        require(!_finalized, \"ERR_IS_FINALIZED\");\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n        _publicSwap = public_;\n    }\n\n    function finalize()\n        external\n        _logs_\n        _lock_\n    {\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n        require(!_finalized, \"ERR_IS_FINALIZED\");\n        require(_tokens.length >= MIN_BOUND_TOKENS, \"ERR_MIN_TOKENS\");\n\n        _finalized = true;\n        _publicSwap = true;\n\n        _mintPoolShare(INIT_POOL_SUPPLY);\n        _pushPoolShare(msg.sender, INIT_POOL_SUPPLY);\n    }\n\n\n    function bind(address token, uint balance, uint denorm)\n        external\n        _logs_\n        // _lock_  Bind does not lock because it jumps to `rebind`, which does\n    {\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n        require(!_records[token].bound, \"ERR_IS_BOUND\");\n        require(!_finalized, \"ERR_IS_FINALIZED\");\n\n        require(_tokens.length < MAX_BOUND_TOKENS, \"ERR_MAX_TOKENS\");\n\n        _records[token] = Record({\n            bound: true,\n            index: _tokens.length,\n            denorm: 0,    // balance and denorm will be validated\n            balance: 0   // and set by `rebind`\n        });\n        _tokens.push(token);\n        rebind(token, balance, denorm);\n    }\n\n    function rebind(address token, uint balance, uint denorm)\n        public\n        _logs_\n        _lock_\n    {\n\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n        require(_records[token].bound, \"ERR_NOT_BOUND\");\n        require(!_finalized, \"ERR_IS_FINALIZED\");\n\n        require(denorm >= MIN_WEIGHT, \"ERR_MIN_WEIGHT\");\n        require(denorm <= MAX_WEIGHT, \"ERR_MAX_WEIGHT\");\n        require(balance >= MIN_BALANCE, \"ERR_MIN_BALANCE\");\n\n        // Adjust the denorm and totalWeight\n        uint oldWeight = _records[token].denorm;\n        if (denorm > oldWeight) {\n            _totalWeight = badd(_totalWeight, bsub(denorm, oldWeight));\n            require(_totalWeight <= MAX_TOTAL_WEIGHT, \"ERR_MAX_TOTAL_WEIGHT\");\n        } else if (denorm < oldWeight) {\n            _totalWeight = bsub(_totalWeight, bsub(oldWeight, denorm));\n        }        \n        _records[token].denorm = denorm;\n\n        // Adjust the balance record and actual token balance\n        uint oldBalance = _records[token].balance;\n        _records[token].balance = balance;\n        if (balance > oldBalance) {\n            _pullUnderlying(token, msg.sender, bsub(balance, oldBalance));\n        } else if (balance < oldBalance) {\n            // In this case liquidity is being withdrawn, so charge EXIT_FEE\n            uint tokenBalanceWithdrawn = bsub(oldBalance, balance);\n            uint tokenExitFee = bmul(tokenBalanceWithdrawn, EXIT_FEE);\n            _pushUnderlying(token, msg.sender, bsub(tokenBalanceWithdrawn, tokenExitFee));\n            _pushUnderlying(token, _factory, tokenExitFee);\n        }\n    }\n\n    function unbind(address token)\n        external\n        _logs_\n        _lock_\n    {\n\n        require(msg.sender == _controller, \"ERR_NOT_CONTROLLER\");\n        require(_records[token].bound, \"ERR_NOT_BOUND\");\n        require(!_finalized, \"ERR_IS_FINALIZED\");\n\n        uint tokenBalance = _records[token].balance;\n        uint tokenExitFee = bmul(tokenBalance, EXIT_FEE);\n\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\n\n        // Swap the token-to-unbind with the last token,\n        // then delete the last token\n        uint index = _records[token].index;\n        uint last = _tokens.length - 1;\n        _tokens[index] = _tokens[last];\n        _records[_tokens[index]].index = index;\n        _tokens.pop();\n        _records[token] = Record({\n            bound: false,\n            index: 0,\n            denorm: 0,\n            balance: 0\n        });\n\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\n        _pushUnderlying(token, _factory, tokenExitFee);\n    }\n\n    // Absorb any tokens that have been sent to this contract into the pool\n    function gulp(address token)\n        external\n        _logs_\n        _lock_\n    {\n        require(_records[token].bound, \"ERR_NOT_BOUND\");\n        _records[token].balance = IERC20(token).balanceOf(address(this));\n    }\n\n    function getSpotPrice(address tokenIn, address tokenOut)\n        external view\n        _viewlock_\n        returns (uint spotPrice)\n    {\n        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n        Record storage inRecord = _records[tokenIn];\n        Record storage outRecord = _records[tokenOut];\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\n    }\n\n    function getSpotPriceSansFee(address tokenIn, address tokenOut)\n        external view\n        _viewlock_\n        returns (uint spotPrice)\n    {\n        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n        Record storage inRecord = _records[tokenIn];\n        Record storage outRecord = _records[tokenOut];\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, 0);\n    }\n\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn)\n        external\n        _logs_\n        _lock_\n    {\n        require(_finalized, \"ERR_NOT_FINALIZED\");\n\n        uint poolTotal = totalSupply();\n        uint ratio = bdiv(poolAmountOut, poolTotal);\n        require(ratio != 0, \"ERR_MATH_APPROX\");\n\n        for (uint i = 0; i < _tokens.length; i++) {\n            address t = _tokens[i];\n            uint bal = _records[t].balance;\n            uint tokenAmountIn = bmul(ratio, bal);\n            require(tokenAmountIn != 0, \"ERR_MATH_APPROX\");\n            require(tokenAmountIn <= maxAmountsIn[i], \"ERR_LIMIT_IN\");\n            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\n            emit LOG_JOIN(msg.sender, t, tokenAmountIn);\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\n        }\n        _mintPoolShare(poolAmountOut);\n        _pushPoolShare(msg.sender, poolAmountOut);\n    }\n\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut)\n        external\n        _logs_\n        _lock_\n    {\n        require(_finalized, \"ERR_NOT_FINALIZED\");\n\n        uint poolTotal = totalSupply();\n        uint exitFee = bmul(poolAmountIn, EXIT_FEE);\n        uint pAiAfterExitFee = bsub(poolAmountIn, exitFee);\n        uint ratio = bdiv(pAiAfterExitFee, poolTotal);\n        require(ratio != 0, \"ERR_MATH_APPROX\");\n\n        _pullPoolShare(msg.sender, poolAmountIn);\n        _pushPoolShare(_factory, exitFee);\n        _burnPoolShare(pAiAfterExitFee);\n\n        for (uint i = 0; i < _tokens.length; i++) {\n            address t = _tokens[i];\n            uint bal = _records[t].balance;\n            uint tokenAmountOut = bmul(ratio, bal);\n            require(tokenAmountOut != 0, \"ERR_MATH_APPROX\");\n            require(tokenAmountOut >= minAmountsOut[i], \"ERR_LIMIT_OUT\");\n            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\n            emit LOG_EXIT(msg.sender, t, tokenAmountOut);\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\n        }\n\n    }\n\n\n    function swapExactAmountIn(\n        address tokenIn,\n        uint tokenAmountIn,\n        address tokenOut,\n        uint minAmountOut,\n        uint maxPrice\n    )\n        external\n        _logs_\n        _lock_\n        returns (uint tokenAmountOut, uint spotPriceAfter)\n    {\n\n        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n\n        Record storage inRecord = _records[address(tokenIn)];\n        Record storage outRecord = _records[address(tokenOut)];\n\n        require(tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO), \"ERR_MAX_IN_RATIO\");\n\n        uint spotPriceBefore = calcSpotPrice(\n                                    inRecord.balance,\n                                    inRecord.denorm,\n                                    outRecord.balance,\n                                    outRecord.denorm,\n                                    _swapFee\n                                );\n        require(spotPriceBefore <= maxPrice, \"ERR_BAD_LIMIT_PRICE\");\n\n        tokenAmountOut = calcOutGivenIn(\n                            inRecord.balance,\n                            inRecord.denorm,\n                            outRecord.balance,\n                            outRecord.denorm,\n                            tokenAmountIn,\n                            _swapFee\n                        );\n        require(tokenAmountOut >= minAmountOut, \"ERR_LIMIT_OUT\");\n\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\n\n        spotPriceAfter = calcSpotPrice(\n                                inRecord.balance,\n                                inRecord.denorm,\n                                outRecord.balance,\n                                outRecord.denorm,\n                                _swapFee\n                            );\n        require(spotPriceAfter >= spotPriceBefore, \"ERR_MATH_APPROX\");     \n        require(spotPriceAfter <= maxPrice, \"ERR_LIMIT_PRICE\");\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \"ERR_MATH_APPROX\");\n\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\n\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\n\n        return (tokenAmountOut, spotPriceAfter);\n    }\n\n    function swapExactAmountOut(\n        address tokenIn,\n        uint maxAmountIn,\n        address tokenOut,\n        uint tokenAmountOut,\n        uint maxPrice\n    )\n        external\n        _logs_\n        _lock_ \n        returns (uint tokenAmountIn, uint spotPriceAfter)\n    {\n        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n        require(_publicSwap, \"ERR_SWAP_NOT_PUBLIC\");\n\n        Record storage inRecord = _records[address(tokenIn)];\n        Record storage outRecord = _records[address(tokenOut)];\n\n        require(tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO), \"ERR_MAX_OUT_RATIO\");\n\n        uint spotPriceBefore = calcSpotPrice(\n                                    inRecord.balance,\n                                    inRecord.denorm,\n                                    outRecord.balance,\n                                    outRecord.denorm,\n                                    _swapFee\n                                );\n        require(spotPriceBefore <= maxPrice, \"ERR_BAD_LIMIT_PRICE\");\n\n        tokenAmountIn = calcInGivenOut(\n                            inRecord.balance,\n                            inRecord.denorm,\n                            outRecord.balance,\n                            outRecord.denorm,\n                            tokenAmountOut,\n                            _swapFee\n                        );\n        require(tokenAmountIn <= maxAmountIn, \"ERR_LIMIT_IN\");\n\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\n\n        spotPriceAfter = calcSpotPrice(\n                                inRecord.balance,\n                                inRecord.denorm,\n                                outRecord.balance,\n                                outRecord.denorm,\n                                _swapFee\n                            );\n        require(spotPriceAfter >= spotPriceBefore, \"ERR_MATH_APPROX\");\n        require(spotPriceAfter <= maxPrice, \"ERR_LIMIT_PRICE\");\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \"ERR_MATH_APPROX\");\n\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\n\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\n\n        return (tokenAmountIn, spotPriceAfter);\n    }\n\n\n    function joinswapExternAmountIn(address tokenIn, uint tokenAmountIn, uint minPoolAmountOut)\n        external\n        _logs_\n        _lock_\n        returns (uint poolAmountOut)\n\n    {        \n        require(_finalized, \"ERR_NOT_FINALIZED\");\n        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \"ERR_MAX_IN_RATIO\");\n\n        Record storage inRecord = _records[tokenIn];\n\n        poolAmountOut = calcPoolOutGivenSingleIn(\n                            inRecord.balance,\n                            inRecord.denorm,\n                            _totalSupply,\n                            _totalWeight,\n                            tokenAmountIn,\n                            _swapFee\n                        );\n\n        require(poolAmountOut >= minPoolAmountOut, \"ERR_LIMIT_OUT\");\n\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\n\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\n\n        _mintPoolShare(poolAmountOut);\n        _pushPoolShare(msg.sender, poolAmountOut);\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\n\n        return poolAmountOut;\n    }\n\n    function joinswapPoolAmountOut(address tokenIn, uint poolAmountOut, uint maxAmountIn)\n        external\n        _logs_\n        _lock_\n        returns (uint tokenAmountIn)\n    {\n        require(_finalized, \"ERR_NOT_FINALIZED\");\n        require(_records[tokenIn].bound, \"ERR_NOT_BOUND\");\n\n        Record storage inRecord = _records[tokenIn];\n\n        tokenAmountIn = calcSingleInGivenPoolOut(\n                            inRecord.balance,\n                            inRecord.denorm,\n                            _totalSupply,\n                            _totalWeight,\n                            poolAmountOut,\n                            _swapFee\n                        );\n\n        require(tokenAmountIn != 0, \"ERR_MATH_APPROX\");\n        require(tokenAmountIn <= maxAmountIn, \"ERR_LIMIT_IN\");\n        \n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \"ERR_MAX_IN_RATIO\");\n\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\n\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\n\n        _mintPoolShare(poolAmountOut);\n        _pushPoolShare(msg.sender, poolAmountOut);\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\n\n        return tokenAmountIn;\n    }\n\n    function exitswapPoolAmountIn(address tokenOut, uint poolAmountIn, uint minAmountOut)\n        external\n        _logs_\n        _lock_\n        returns (uint tokenAmountOut)\n    {\n        require(_finalized, \"ERR_NOT_FINALIZED\");\n        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n\n        Record storage outRecord = _records[tokenOut];\n\n        tokenAmountOut = calcSingleOutGivenPoolIn(\n                            outRecord.balance,\n                            outRecord.denorm,\n                            _totalSupply,\n                            _totalWeight,\n                            poolAmountIn,\n                            _swapFee\n                        );\n\n        require(tokenAmountOut >= minAmountOut, \"ERR_LIMIT_OUT\");\n        \n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \"ERR_MAX_OUT_RATIO\");\n\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\n\n        uint exitFee = bmul(poolAmountIn, EXIT_FEE);\n\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\n\n        _pullPoolShare(msg.sender, poolAmountIn);\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\n        _pushPoolShare(_factory, exitFee);\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\n\n        return tokenAmountOut;\n    }\n\n    function exitswapExternAmountOut(address tokenOut, uint tokenAmountOut, uint maxPoolAmountIn)\n        external\n        _logs_\n        _lock_\n        returns (uint poolAmountIn)\n    {\n        require(_finalized, \"ERR_NOT_FINALIZED\");\n        require(_records[tokenOut].bound, \"ERR_NOT_BOUND\");\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \"ERR_MAX_OUT_RATIO\");\n\n        Record storage outRecord = _records[tokenOut];\n\n        poolAmountIn = calcPoolInGivenSingleOut(\n                            outRecord.balance,\n                            outRecord.denorm,\n                            _totalSupply,\n                            _totalWeight,\n                            tokenAmountOut,\n                            _swapFee\n                        );\n\n        require(poolAmountIn != 0, \"ERR_MATH_APPROX\");\n        require(poolAmountIn <= maxPoolAmountIn, \"ERR_LIMIT_IN\");\n\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\n\n        uint exitFee = bmul(poolAmountIn, EXIT_FEE);\n\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\n\n        _pullPoolShare(msg.sender, poolAmountIn);\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\n        _pushPoolShare(_factory, exitFee);\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);        \n\n        return poolAmountIn;\n    }\n\n\n    // ==\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\n    // You must `_lock_` or otherwise ensure reentry-safety\n\n    function _pullUnderlying(address erc20, address from, uint amount)\n        internal\n    {\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\n        require(xfer, \"ERR_ERC20_FALSE\");\n    }\n\n    function _pushUnderlying(address erc20, address to, uint amount)\n        internal\n    {\n        bool xfer = IERC20(erc20).transfer(to, amount);\n        require(xfer, \"ERR_ERC20_FALSE\");\n    }\n\n    function _pullPoolShare(address from, uint amount)\n        internal\n    {\n        _pull(from, amount);\n    }\n\n    function _pushPoolShare(address to, uint amount)\n        internal\n    {\n        _push(to, amount);\n    }\n\n    function _mintPoolShare(uint amount)\n        internal\n    {\n        _mint(amount);\n    }\n\n    function _burnPoolShare(uint amount)\n        internal\n    {\n        _burn(amount);\n    }\n\n}\n"
    },
    "contracts/balancer/BFactory.sol": {
      "content": "// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is disstributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.7.6;\n\n// Builds new BPools, logging their addresses and providing `isBPool(address) -> (bool)`\n\nimport \"./BPool.sol\";\n\ncontract BFactory is BBronze {\n    event LOG_NEW_POOL(\n        address indexed caller,\n        address indexed pool\n    );\n\n    event LOG_BLABS(\n        address indexed caller,\n        address indexed blabs\n    );\n\n    mapping(address=>bool) private _isBPool;\n\n    function isBPool(address b)\n        external view returns (bool)\n    {\n        return _isBPool[b];\n    }\n\n    function newBPool()\n        external\n        returns (BPool)\n    {\n        BPool bpool = new BPool();\n        _isBPool[address(bpool)] = true;\n        emit LOG_NEW_POOL(msg.sender, address(bpool));\n        bpool.setController(msg.sender);\n        return bpool;\n    }\n\n    address private _blabs;\n\n    constructor() public {\n        _blabs = msg.sender;\n    }\n\n    function getBLabs()\n        external view\n        returns (address)\n    {\n        return _blabs;\n    }\n\n    function setBLabs(address b)\n        external\n    {\n        require(msg.sender == _blabs, \"ERR_NOT_BLABS\");\n        emit LOG_BLABS(msg.sender, b);\n        _blabs = b;\n    }\n\n    function collect(BPool pool)\n        external \n    {\n        require(msg.sender == _blabs, \"ERR_NOT_BLABS\");\n        uint collected = IERC20(pool).balanceOf(address(this));\n        bool xfer = pool.transfer(_blabs, collected);\n        require(xfer, \"ERR_ERC20_FAILED\");\n    }\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/agreements/ConstantFlowAgreementV1.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.7.6;\n\nimport {\n    IConstantFlowAgreementV1,\n    ISuperfluidToken\n} from \"../interfaces/agreements/IConstantFlowAgreementV1.sol\";\nimport {\n    ISuperfluid,\n    ISuperfluidGovernance,\n    ISuperApp,\n    SuperAppDefinitions,\n    ContextDefinitions\n} from \"../interfaces/superfluid/ISuperfluid.sol\";\nimport { AgreementBase } from \"./AgreementBase.sol\";\n\nimport { SignedSafeMath } from \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport { SafeCast } from \"@openzeppelin/contracts/utils/SafeCast.sol\";\nimport { Int96SafeMath } from \"../utils/Int96SafeMath.sol\";\nimport { AgreementLibrary } from \"./AgreementLibrary.sol\";\n\n\ncontract ConstantFlowAgreementV1 is\n    AgreementBase,\n    IConstantFlowAgreementV1\n{\n\n    bytes32 private constant _LIQUIDATION_PERIOD_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.liquidationPeriod\");\n\n    using SafeMath for uint256;\n    using SafeCast for uint256;\n    using SignedSafeMath for int256;\n    using SafeCast for int256;\n    using Int96SafeMath for int96;\n\n    struct FlowData {\n        uint256 timestamp; // stored as uint32\n        int96 flowRate; // stored also as int96\n        uint256 deposit; // stored as int96 with lower 32 bits clipped to 0\n        uint256 owedDeposit; // stored as int96 with lower 32 bits clipped to 0\n    }\n\n    struct FlowParams {\n        bytes32 flowId;\n        address sender;\n        address receiver;\n        int96 flowRate;\n        bytes userData;\n    }\n\n    /**************************************************************************\n     * ISuperAgreement interface\n     *************************************************************************/\n\n    /// @dev ISuperAgreement.realtimeBalanceOf implementation\n    function realtimeBalanceOf(\n        ISuperfluidToken token,\n        address account,\n        uint256 time\n    )\n        external\n        view\n        override\n        returns (int256 dynamicBalance, uint256 deposit, uint256 owedDeposit)\n    {\n        (bool exist, FlowData memory state) = _getAccountFlowState(token, account);\n        if(exist) {\n            dynamicBalance = ((int256(time).sub(int256(state.timestamp))).mul(state.flowRate));\n            deposit = state.deposit;\n            owedDeposit = state.owedDeposit;\n        }\n    }\n\n    /**************************************************************************\n     * IConstantFlowAgreementV1 interface\n     *************************************************************************/\n\n    /// @dev IConstantFlowAgreementV1.createFlow implementation\n    function getMaximumFlowRateFromDeposit(\n        ISuperfluidToken token,\n        uint256 deposit)\n        external view override\n        returns (int96 flowRate)\n    {\n        require(deposit < 2**95, \"CFA: deposit number too big\");\n        deposit = _clipDepositNumberRoundingDown(deposit);\n        ISuperfluid host = ISuperfluid(token.getHost());\n        ISuperfluidGovernance gov = ISuperfluidGovernance(host.getGovernance());\n        uint256 liquidationPeriod = gov.getConfigAsUint256(host, token, _LIQUIDATION_PERIOD_CONFIG_KEY);\n        uint256 flowrate1 = deposit.div(liquidationPeriod);\n        return int96(flowrate1);\n    }\n\n    function getDepositRequiredForFlowRate(\n        ISuperfluidToken token,\n        int96 flowRate)\n        external view override\n        returns (uint256 deposit)\n    {\n        require(flowRate >= 0, \"CFA: not for negative flow rate\");\n        ISuperfluid host = ISuperfluid(token.getHost());\n        ISuperfluidGovernance gov = ISuperfluidGovernance(host.getGovernance());\n        uint256 liquidationPeriod = gov.getConfigAsUint256(host, token, _LIQUIDATION_PERIOD_CONFIG_KEY);\n        require(uint256(flowRate).mul(liquidationPeriod) <= uint256(type(int96).max), \"CFA: flow rate too big\");\n        return _calculateDeposit(flowRate, liquidationPeriod);\n    }\n\n    /// @dev IConstantFlowAgreementV1.createFlow implementation\n    function createFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external\n        override\n        returns(bytes memory newCtx)\n    {\n        FlowParams memory flowParams;\n        require(receiver != address(0), \"CFA: receiver is zero\");\n        ISuperfluid.Context memory currentContext = AgreementLibrary.authorizeTokenAccess(token, ctx);\n        flowParams.flowId = _generateFlowId(currentContext.msgSender, receiver);\n        flowParams.sender = currentContext.msgSender;\n        flowParams.receiver = receiver;\n        flowParams.flowRate = flowRate;\n        flowParams.userData = currentContext.userData;\n        require(flowParams.sender != flowParams.receiver, \"CFA: no self flow\");\n        require(flowParams.flowRate > 0, \"CFA: invalid flow rate\");\n        (bool exist, FlowData memory oldFlowData) = _getAgreementData(token, flowParams.flowId);\n        require(!exist, \"CFA: flow already exist\");\n\n        if (ISuperfluid(msg.sender).isApp(ISuperApp(receiver)))\n        {\n            newCtx = _changeFlowToApp(\n                receiver,\n                token, flowParams, oldFlowData,\n                ctx, currentContext, FlowChangeType.CREATE_FLOW);\n        } else {\n            newCtx = _changeFlowToNonApp(\n                token, flowParams, oldFlowData,\n                ctx, currentContext);\n        }\n\n        _requireAvailableBalance(token, currentContext);\n    }\n\n    /// @dev IConstantFlowAgreementV1.updateFlow implementation\n    function updateFlow(\n        ISuperfluidToken token,\n        address receiver,\n        int96 flowRate,\n        bytes calldata ctx\n    )\n        external\n        override\n        returns(bytes memory newCtx)\n    {\n        FlowParams memory flowParams;\n        require(receiver != address(0), \"CFA: receiver is zero\");\n        ISuperfluid.Context memory currentContext = AgreementLibrary.authorizeTokenAccess(token, ctx);\n        flowParams.flowId = _generateFlowId(currentContext.msgSender, receiver);\n        flowParams.sender = currentContext.msgSender;\n        flowParams.receiver = receiver;\n        flowParams.flowRate = flowRate;\n        flowParams.userData = currentContext.userData;\n        require(flowParams.sender != flowParams.receiver, \"CFA: no self flow\");\n        require(flowParams.flowRate > 0, \"CFA: invalid flow rate\");\n        (bool exist, FlowData memory oldFlowData) = _getAgreementData(token, flowParams.flowId);\n        require(exist, \"CFA: flow does not exist\");\n\n        if (ISuperfluid(msg.sender).isApp(ISuperApp(receiver))) {\n            newCtx = _changeFlowToApp(\n                receiver,\n                token, flowParams, oldFlowData,\n                ctx, currentContext, FlowChangeType.UPDATE_FLOW);\n        } else {\n            newCtx = _changeFlowToNonApp(\n                token, flowParams, oldFlowData,\n                ctx, currentContext);\n        }\n\n        _requireAvailableBalance(token, currentContext);\n    }\n\n    /// @dev IConstantFlowAgreementV1.deleteFlow implementation\n    function deleteFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver,\n        bytes calldata ctx\n    )\n        external\n        override\n        returns(bytes memory newCtx)\n    {\n        FlowParams memory flowParams;\n        require(sender != address(0), \"CFA: sender is zero\");\n        require(receiver != address(0), \"CFA: receiver is zero\");\n        ISuperfluid.Context memory currentContext = AgreementLibrary.authorizeTokenAccess(token, ctx);\n        flowParams.flowId = _generateFlowId(sender, receiver);\n        flowParams.sender = sender;\n        flowParams.receiver = receiver;\n        flowParams.flowRate = 0;\n        flowParams.userData = currentContext.userData;\n        (bool exist, FlowData memory oldFlowData) = _getAgreementData(token, flowParams.flowId);\n        require(exist, \"CFA: flow does not exist\");\n\n        int256 availableBalance;\n        (availableBalance,,) = token.realtimeBalanceOf(sender, currentContext.timestamp);\n\n        // delete should only be called by sender or receiver\n        // unless it is a liquidation (availale balance < 0)\n        if (currentContext.msgSender != sender && currentContext.msgSender != receiver) {\n            // liquidation should only for sender that is critical, unless sender or receiver is a jailed app\n            if (!ISuperfluid(msg.sender).isAppJailed(ISuperApp(sender)) &&\n                !ISuperfluid(msg.sender).isAppJailed(ISuperApp(receiver))) {\n                require(availableBalance < 0, \"CFA: sender account is not critical\");\n            }\n        }\n\n        if (availableBalance < 0) {\n            _makeLiquidationPayouts(\n                token,\n                availableBalance,\n                flowParams,\n                oldFlowData,\n                currentContext.msgSender);\n        }\n\n        newCtx = ctx;\n        if (currentContext.msgSender == sender) {\n            if (ISuperfluid(msg.sender).isApp(ISuperApp(receiver))) {\n                newCtx = _changeFlowToApp(\n                    receiver,\n                    token, flowParams, oldFlowData,\n                    newCtx, currentContext, FlowChangeType.DELETE_FLOW);\n            } else {\n                newCtx = _changeFlowToNonApp(\n                    token, flowParams, oldFlowData,\n                    newCtx, currentContext);\n            }\n        } else if (currentContext.msgSender == receiver) {\n            if (ISuperfluid(msg.sender).isApp(ISuperApp(sender))) {\n                newCtx = _changeFlowToApp(\n                    sender,\n                    token, flowParams, oldFlowData,\n                    newCtx, currentContext, FlowChangeType.DELETE_FLOW);\n            } else if (ISuperfluid(msg.sender).isApp(ISuperApp(receiver))) {\n                newCtx = _changeFlowToApp(\n                    address(0),\n                    token, flowParams, oldFlowData,\n                    newCtx, currentContext, FlowChangeType.DELETE_FLOW);\n            } else {\n                newCtx = _changeFlowToNonApp(\n                    token, flowParams, oldFlowData,\n                    newCtx, currentContext);\n            }\n        } else /* liquidations */ {\n            // if the sender is an app, and becomes critical\n            if (ISuperfluid(msg.sender).isApp(ISuperApp(sender))) {\n                newCtx = ISuperfluid(msg.sender).jailApp(\n                    newCtx,\n                    ISuperApp(sender),\n                    SuperAppDefinitions.APP_RULE_NO_CRITICAL_SENDER_ACCOUNT);\n            }\n            // always attempt to call receiver callback\n            if (ISuperfluid(msg.sender).isApp(ISuperApp(receiver))) {\n                newCtx = _changeFlowToApp(\n                    receiver,\n                    token, flowParams, oldFlowData,\n                    newCtx, currentContext, FlowChangeType.DELETE_FLOW);\n            } else {\n                newCtx = _changeFlowToNonApp(\n                    token, flowParams, oldFlowData,\n                    newCtx, currentContext);\n            }\n        }\n    }\n\n    /// @dev IConstantFlowAgreementV1.getFlow implementation\n    function getFlow(\n        ISuperfluidToken token,\n        address sender,\n        address receiver\n    )\n        external\n        view\n        override\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        )\n    {\n        (, FlowData memory data) = _getAgreementData(\n            token,\n            _generateFlowId(sender, receiver));\n\n        return(\n            data.timestamp,\n            data.flowRate,\n            data.deposit,\n            data.owedDeposit\n        );\n    }\n\n    /// @dev IConstantFlowAgreementV1.getFlow implementation\n    function getFlowByID(\n        ISuperfluidToken token,\n        bytes32 flowId\n    )\n        external\n        view\n        override\n        returns(\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit\n        )\n    {\n        (, FlowData memory data) = _getAgreementData(\n            token,\n            flowId\n        );\n\n        return (\n            data.timestamp,\n            data.flowRate,\n            data.deposit,\n            data.owedDeposit\n        );\n    }\n\n    /// @dev IConstantFlowAgreementV1.getAccountFlowInfo implementation\n    function getAccountFlowInfo(\n        ISuperfluidToken token,\n        address account\n    )\n        external view override\n        returns (\n            uint256 timestamp,\n            int96 flowRate,\n            uint256 deposit,\n            uint256 owedDeposit)\n    {\n        (, FlowData memory state) = _getAccountFlowState(token, account);\n        return (\n            state.timestamp,\n            state.flowRate,\n            state.deposit,\n            state.owedDeposit\n        );\n    }\n\n    /// @dev IConstantFlowAgreementV1.getNetFlow implementation\n    function getNetFlow(\n        ISuperfluidToken token,\n        address account\n    )\n        external view override\n        returns (int96 flowRate)\n    {\n        (, FlowData memory state) = _getAccountFlowState(token, account);\n        return state.flowRate;\n    }\n\n    /**************************************************************************\n     * Internal State Functions\n     *************************************************************************/\n\n    enum FlowChangeType {\n        CREATE_FLOW,\n        UPDATE_FLOW,\n        DELETE_FLOW\n    }\n\n    function _getAccountFlowState\n    (\n        ISuperfluidToken token,\n        address account\n    )\n        private view\n        returns(bool exist, FlowData memory)\n    {\n        bytes32[] memory data = token.getAgreementStateSlot(address(this), account, 0 /* slotId */, 1 /* length */);\n        return _decodeFlowData(uint256(data[0]));\n    }\n\n    function _getAgreementData\n    (\n        ISuperfluidToken token,\n        bytes32 dId\n    )\n        private view\n        returns (bool exist, FlowData memory)\n    {\n        bytes32[] memory data = token.getAgreementData(address(this), dId, 1);\n        return _decodeFlowData(uint256(data[0]));\n    }\n\n    function _updateAccountFlowState(\n        ISuperfluidToken token,\n        address account,\n        int96 flowRateDelta,\n        int256 depositDelta,\n        int256 owedDepositDelta,\n        uint256 currentTimestamp\n    )\n        private\n        returns (int96 newNetFlowRate)\n    {\n        (, FlowData memory state) = _getAccountFlowState(token, account);\n        int256 dynamicBalance = currentTimestamp.sub(state.timestamp).toInt256()\n            .mul(int256(state.flowRate));\n        if (dynamicBalance != 0) {\n            token.settleBalance(account, dynamicBalance);\n        }\n        state.flowRate = state.flowRate.add(flowRateDelta, \"CFA: flowrate overflow\");\n        state.timestamp = currentTimestamp;\n        state.deposit = state.deposit.toInt256().add(depositDelta).toUint256();\n        state.owedDeposit = state.owedDeposit.toInt256().add(owedDepositDelta).toUint256();\n\n        token.updateAgreementStateSlot(account, 0 /* slot id */, _encodeFlowData(state));\n\n        return state.flowRate;\n    }\n\n    /**\n     * @dev update a flow to a non-app receiver\n     */\n    function _changeFlowToNonApp(\n        ISuperfluidToken token,\n        FlowParams memory flowParams,\n        FlowData memory oldFlowData,\n        bytes memory ctx,\n        ISuperfluid.Context memory currentContext\n    )\n        private\n        returns (bytes memory newCtx)\n    {\n        // owed deposit should have been always zero, since an app should never become a non app\n        assert(oldFlowData.owedDeposit == 0);\n\n        // STEP 1: update the flow\n        int256 depositDelta;\n        FlowData memory newFlowData;\n        (depositDelta,,newFlowData) = _changeFlow(\n            currentContext.timestamp,\n            token, flowParams, oldFlowData);\n\n        // STEP 2: update app allowance used\n        newCtx = ISuperfluid(msg.sender).ctxUseAllowance(\n            ctx,\n            newFlowData.deposit, // allowanceWantedMore\n            depositDelta // allowanceUsedDelta\n        );\n    }\n\n    /**\n     * @dev change a flow to a app receiver\n     */\n\n    // Stack variables for updateFlowApp function, to avoid stack too deep issue\n    // solhint-disable-next-line contract-name-camelcase\n    struct _StackVars_changeFlowToApp {\n        bytes cbdata;\n        FlowData newFlowData;\n        uint256 appAllowance;\n        ISuperfluid.Context appContext;\n    }\n    function _changeFlowToApp(\n        address appToCallback,\n        ISuperfluidToken token,\n        FlowParams memory flowParams,\n        FlowData memory oldFlowData,\n        bytes memory ctx,\n        ISuperfluid.Context memory currentContext,\n        FlowChangeType optype\n    )\n        private\n        returns (bytes memory newCtx)\n    {\n        newCtx = ctx;\n        // apply callbacks\n        _StackVars_changeFlowToApp memory vars;\n\n        // call callback\n        if (appToCallback != address(0)) {\n            AgreementLibrary.CallbackInputs memory cbStates = AgreementLibrary.createCallbackInputs(\n                token,\n                appToCallback,\n                flowParams.flowId,\n                abi.encode(flowParams.sender, flowParams.receiver)\n            );\n\n            // call the before callback\n            if (optype == FlowChangeType.CREATE_FLOW) {\n                cbStates.noopBit = SuperAppDefinitions.BEFORE_AGREEMENT_CREATED_NOOP;\n            } else if (optype == FlowChangeType.UPDATE_FLOW) {\n                cbStates.noopBit = SuperAppDefinitions.BEFORE_AGREEMENT_UPDATED_NOOP;\n            } else /* if (optype == FlowChangeType.DELETE_FLOW) */ {\n                cbStates.noopBit = SuperAppDefinitions.BEFORE_AGREEMENT_TERMINATED_NOOP;\n            }\n            vars.cbdata = AgreementLibrary.callAppBeforeCallback(cbStates, ctx);\n\n            (,vars.appAllowance,) = _changeFlow(\n                    currentContext.timestamp,\n                    token, flowParams, oldFlowData);\n\n            // - each app level can at least \"relay\" the same amount of input flow rate to others\n            // - each app level get a same amount of allowance\n            vars.appAllowance = vars.appAllowance.mul(uint256(currentContext.appLevel + 1));\n\n            // call the after callback\n            cbStates.appAllowanceGranted = vars.appAllowance;\n            cbStates.appAllowanceUsed = oldFlowData.owedDeposit.toInt256();\n            if (optype == FlowChangeType.CREATE_FLOW) {\n                cbStates.noopBit = SuperAppDefinitions.AFTER_AGREEMENT_CREATED_NOOP;\n            } else if (optype == FlowChangeType.UPDATE_FLOW) {\n                cbStates.noopBit = SuperAppDefinitions.AFTER_AGREEMENT_UPDATED_NOOP;\n            } else /* if (optype == FlowChangeType.DELETE_FLOW) */ {\n                cbStates.noopBit = SuperAppDefinitions.AFTER_AGREEMENT_TERMINATED_NOOP;\n            }\n            (vars.appContext,) = AgreementLibrary.callAppAfterCallback(cbStates, vars.cbdata, newCtx);\n\n            // NB: the callback might update the same flow!!\n            // reload the flow data\n            (, vars.newFlowData) = _getAgreementData(token, flowParams.flowId);\n        } else {\n            (,,vars.newFlowData) = _changeFlow(\n                    currentContext.timestamp,\n                    token, flowParams, oldFlowData);\n        }\n\n        // REVIEW the re-entrace assumptions from this point on\n\n        // NOTE: vars.appContext.appAllowanceUsed will be adjusted by callAppAfterCallback\n        // and its range will be [0, currentContext.appAllowance]\n        {\n            // clipping the allowance used amount before storing\n            if (vars.appContext.appAllowanceUsed > 0) {\n                // give more to the app\n                vars.appContext.appAllowanceUsed =\n                    _clipDepositNumber(vars.appContext.appAllowanceUsed.toUint256()).toInt256();\n            }\n\n            int256 appAllowanceDelta = vars.appContext.appAllowanceUsed\n                .sub(oldFlowData.owedDeposit.toInt256());\n\n            // update flow data and account state with the allowance delta\n            {\n                vars.newFlowData.deposit = vars.newFlowData.deposit.toInt256()\n                        .add(appAllowanceDelta)\n                        .toUint256();\n                vars.newFlowData.owedDeposit = vars.newFlowData.owedDeposit.toInt256()\n                        .add(appAllowanceDelta)\n                        .toUint256();\n                token.updateAgreementData(flowParams.flowId, _encodeFlowData(vars.newFlowData));\n                // update sender and receiver deposit (for sender) and owed deposit (for receiver)\n                _updateAccountFlowState(\n                    token,\n                    flowParams.sender,\n                    0, // flow rate delta\n                    appAllowanceDelta, // deposit delta\n                    0, // owed deposit delta\n                    currentContext.timestamp\n                );\n                _updateAccountFlowState(\n                    token,\n                    flowParams.receiver,\n                    0, // flow rate delta\n                    0, // deposit delta\n                    appAllowanceDelta, // owed deposit delta\n                    currentContext.timestamp\n                );\n            }\n\n            newCtx = ISuperfluid(msg.sender).ctxUseAllowance(\n                ctx,\n                vars.newFlowData.deposit, // allowanceWantedMore\n                appAllowanceDelta // allowanceUsedDelta\n            );\n\n            // if receiver doesn't have enough available balance to give back app allowance\n            // take it from the sender\n            if (ISuperfluid(msg.sender).isApp(ISuperApp(flowParams.receiver))) {\n                int256 availableBalance;\n                (availableBalance,,) = token.realtimeBalanceOf(flowParams.receiver, currentContext.timestamp);\n                if (availableBalance < 0) {\n                    // app goes broke, send the app to jail\n                    if (optype == FlowChangeType.DELETE_FLOW) {\n                        newCtx = ISuperfluid(msg.sender).jailApp(\n                            newCtx,\n                            ISuperApp(flowParams.receiver),\n                            SuperAppDefinitions.APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT);\n                        // calculate user's damange\n                        int256 userDamangeAmount = AgreementLibrary.min(\n                            // user will take the damage if the app is broke,\n                            -availableBalance,\n                            // but user's damage is limited to the amount of app allowance it gives to the app\n                            AgreementLibrary.max(0, -appAllowanceDelta));\n                        token.settleBalance(\n                            flowParams.sender,\n                            -userDamangeAmount\n                        );\n                        token.settleBalance(\n                            flowParams.receiver,\n                            userDamangeAmount\n                        );\n                    } else {\n                        revert(\"CFA: APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT\");\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev change flow between sender and receiver with new flow rate\n     *\n     * NOTE:\n     * - leaving owed deposit unchanged for later adjustment\n     * - depositDelta output is always clipped (see _clipDepositNumber)\n     */\n    function _changeFlow(\n        uint256 currentTimestamp,\n        ISuperfluidToken token,\n        FlowParams memory flowParams,\n        FlowData memory oldFlowData\n    )\n        private\n        returns (\n            int256 depositDelta,\n            uint256 appAllowance,\n            FlowData memory newFlowData\n        )\n    {\n        { // ecnlosed block to avoid stack too deep error\n            //int256 oldDeposit;\n\n            // STEP 1: calculate old and new deposit required for the flow\n            ISuperfluidGovernance gov = ISuperfluidGovernance(ISuperfluid(msg.sender).getGovernance());\n            uint256 liquidationPeriod = gov.getConfigAsUint256(\n                ISuperfluid(msg.sender), token, _LIQUIDATION_PERIOD_CONFIG_KEY);\n\n            // rounding up the number for app allowance too\n            // CAFEAT:\n            // - Now app could create a flow rate that is slightly higher than the incoming flow rate.\n            // - The app may be jailed due to negative balance if it does this without its own balance.\n            // Rule of thumbs:\n            // - App can use app allowance to create a flow that has the same incoming flow rate\n            // - But due to deposit clipping, there is no guarantee that the sum of the out going flow\n            //   deposit can be covered by the allowance always.\n            // - It is advisable for the app to check the allowance usages carefully, and if possible\n            //   Always have some its own balances to cover the deposits.\n            appAllowance = _calculateDeposit(flowParams.flowRate, liquidationPeriod);\n            depositDelta = appAllowance.toInt256();\n\n            // STEP 2: calculate deposit delta\n            depositDelta = depositDelta\n                .sub(oldFlowData.deposit.toInt256())\n                .add(oldFlowData.owedDeposit.toInt256());\n\n            // STEP 3: update current flow info\n            newFlowData = FlowData(\n                flowParams.flowRate > 0 ? currentTimestamp : 0,\n                flowParams.flowRate,\n                oldFlowData.deposit.toInt256().add(depositDelta).toUint256(),\n                oldFlowData.owedDeposit // leaving it unchanged for later adjustment\n            );\n            token.updateAgreementData(flowParams.flowId, _encodeFlowData(newFlowData));\n        }\n\n        // STEP 4: update sender and receiver account flow state with the deltas\n        int96 totalSenderFlowRate = _updateAccountFlowState(\n            token,\n            flowParams.sender,\n            oldFlowData.flowRate.sub(flowParams.flowRate, \"CFA: flowrate overflow\"),\n            depositDelta,\n            0,\n            currentTimestamp\n        );\n        int96 totalReceiverFlowRate = _updateAccountFlowState(\n            token,\n            flowParams.receiver,\n            flowParams.flowRate.sub(oldFlowData.flowRate, \"CFA: flowrate overflow\"),\n            0,\n            0, // leaving owed deposit unchanged for later adjustment\n            currentTimestamp\n        );\n\n        // STEP 5: emit the FlowUpdated Event\n        emit FlowUpdated(\n            token,\n            flowParams.sender,\n            flowParams.receiver,\n            flowParams.flowRate,\n            totalSenderFlowRate,\n            totalReceiverFlowRate,\n            flowParams.userData);\n    }\n\n    function _requireAvailableBalance(\n        ISuperfluidToken token,\n        ISuperfluid.Context memory currentContext\n    )\n        private view\n    {\n        // do not enforce balance checks during callbacks\n        if (currentContext.callType != ContextDefinitions.CALL_INFO_CALL_TYPE_APP_CALLBACK) {\n            (int256 availableBalance,,) = token.realtimeBalanceOf(currentContext.msgSender, currentContext.timestamp);\n            require(availableBalance >= 0, \"CFA: not enough available balance\");\n        }\n    }\n\n    function _makeLiquidationPayouts(\n        ISuperfluidToken token,\n        int256 availableBalance,\n        FlowParams memory flowParams,\n        FlowData memory flowData,\n        address liquidator\n    )\n        private\n    {\n        (,FlowData memory senderAccountState) = _getAccountFlowState(token, flowParams.sender);\n\n        int256 signedSingleDeposit = flowData.deposit.toInt256();\n        int256 signedTotalDeposit = senderAccountState.deposit.toInt256();\n\n        // Liquidation rules:\n        //    - let Available Balance = AB (is negative)\n        //    -     Agreement Single Deposit = SD\n        //    -     Agreement Total Deposit = TD\n        //    -     Total Reward Left = RL = AB + TD\n        // #1 Can the total account deposit can still cover the available balance deficit?\n        int256 totalRewardLeft = availableBalance.add(signedTotalDeposit);\n        if (totalRewardLeft >= 0) {\n            // #1.a.1 yes: then reward = (SD / TD) * RL\n            int256 rewardAmount = signedSingleDeposit.mul(totalRewardLeft).div(signedTotalDeposit);\n            token.makeLiquidationPayouts(\n                flowParams.flowId,\n                liquidator,\n                flowParams.sender,\n                rewardAmount.toUint256(),\n                0\n            );\n        } else {\n            // #1.b.1 no: then the liquidator takes full amount of the single deposit\n            int256 rewardAmount = signedSingleDeposit;\n            token.makeLiquidationPayouts(\n                flowParams.flowId,\n                liquidator,\n                flowParams.sender,\n                rewardAmount.toUint256() /* rewardAmount */,\n                totalRewardLeft.mul(-1).toUint256() /* bailoutAmount */\n            );\n        }\n    }\n\n    /**************************************************************************\n     * Deposit Calculation Pure Functions\n     *************************************************************************/\n\n    function _clipDepositNumberRoundingDown(uint256 deposit)\n        internal pure\n        returns(uint256)\n    {\n        return ((deposit >> 32)) << 32;\n    }\n\n    function _clipDepositNumber(uint256 deposit)\n        internal pure\n        returns(uint256)\n    {\n        // clipping the value, rounding up\n        uint256 rounding = (deposit & type(uint32).max) > 0 ? 1 : 0;\n        return ((deposit >> 32) + rounding) << 32;\n    }\n\n    function _calculateDeposit(\n        int96 flowRate,\n        uint256 liquidationPeriod\n    )\n        internal pure\n        returns(uint256 deposit)\n    {\n        if (flowRate == 0) return 0;\n        assert(liquidationPeriod <= uint256(type(int96).max));\n        deposit = uint256(flowRate.mul(int96(uint96(liquidationPeriod)), \"CFA: deposit overflow\"));\n        return _clipDepositNumber(deposit);\n    }\n\n    /**************************************************************************\n     * Flow Data Pure Functions\n     *************************************************************************/\n\n    function _generateFlowId(address sender, address receiver) private pure returns(bytes32 id) {\n        return keccak256(abi.encode(sender, receiver));\n    }\n\n    //\n    // Data packing:\n    //\n    // WORD A: | timestamp  | flowRate | deposit | owedDeposit |\n    //         | 32b        | 96b      | 64      | 64          |\n    //\n    // NOTE:\n    // - flowRate has 96 bits length\n    // - deposit has 96 bits length too, but 32 bits are clipped-off when storing\n\n    function _encodeFlowData\n    (\n        FlowData memory flowData\n    )\n        internal pure\n        returns(bytes32[] memory data)\n    {\n        // enable these for debugging\n        // assert(flowData.deposit & type(uint32).max == 0);\n        // assert(flowData.owedDeposit & type(uint32).max == 0);\n        data = new bytes32[](1);\n        data[0] = bytes32(\n            ((uint256(flowData.timestamp)) << 224) |\n            ((uint256(uint96(flowData.flowRate)) << 128)) |\n            (uint256(flowData.deposit) >> 32 << 64) |\n            (uint256(flowData.owedDeposit) >> 32)\n        );\n    }\n\n    function _decodeFlowData\n    (\n        uint256 wordA\n    )\n        internal pure\n        returns(bool exist, FlowData memory flowData)\n    {\n        exist = wordA > 0;\n        if (exist) {\n            flowData.timestamp = uint32(wordA >> 224);\n            flowData.flowRate = int96((wordA >> 128) & uint256(type(uint96).max));\n            flowData.deposit = ((wordA >> 64) & uint256(type(uint64).max)) << 32 /* recover clipped bits*/;\n            flowData.owedDeposit = (wordA & uint256(type(uint64).max)) << 32 /* recover clipped bits*/;\n        }\n    }\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/agreements/AgreementBase.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.7.6;\n\nimport { UUPSProxiable } from \"../upgradability/UUPSProxiable.sol\";\nimport { ISuperAgreement } from \"../interfaces/superfluid/ISuperAgreement.sol\";\n\n\nabstract contract AgreementBase is\n    UUPSProxiable,\n    ISuperAgreement\n{\n    address private _host;\n\n    function initialize()\n        external override\n        initializer // OpenZeppelin Initializable\n    {\n        _host = msg.sender;\n    }\n\n    function proxiableUUID()\n        public view override\n        returns (bytes32)\n    {\n        return ISuperAgreement(this).agreementType();\n    }\n\n    function updateCode(address newAddress)\n        external override\n    {\n        require(msg.sender == _host, \"only host can update code\");\n        return _updateCodeAddress(newAddress);\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/math/SignedSafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @title SignedSafeMath\n * @dev Signed math operations with safety checks that revert on error.\n */\nlibrary SignedSafeMath {\n    int256 constant private _INT256_MIN = -2**255;\n\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\n\n        return c;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/utils/Int96SafeMath.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\n\npragma solidity ^0.7.0;\n\n/**\n * @title Int96SafeMath\n * @dev Int96 math operations with safety checks that revert on error.\n */\nlibrary Int96SafeMath {\n    int96 constant private _INT96_MIN = -2**95;\n\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int96 a, int96 b, string memory errorMessage) internal pure returns (int96) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == _INT96_MIN), errorMessage);\n\n        int96 c = a * b;\n        require(c / a == b, errorMessage);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int96 a, int96 b, string memory errorMessage) internal pure returns (int96) {\n        require(b != 0, errorMessage);\n        require(!(b == -1 && a == _INT96_MIN), errorMessage);\n\n        int96 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int96 a, int96 b, string memory errorMessage) internal pure returns (int96) {\n        int96 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a), errorMessage);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int96 a, int96 b, string memory errorMessage) internal pure returns (int96) {\n        int96 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a), errorMessage);\n\n        return c;\n    }\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/agreements/AgreementLibrary.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.7.6;\npragma experimental ABIEncoderV2;\n\nimport {\n    ISuperfluidGovernance,\n    ISuperfluid,\n    ISuperfluidToken,\n    ISuperApp,\n    SuperAppDefinitions,\n    ContextDefinitions\n} from \"../interfaces/superfluid/ISuperfluid.sol\";\nimport { ISuperfluidToken } from \"../interfaces/superfluid/ISuperfluidToken.sol\";\n\nimport { SignedSafeMath } from \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\nimport { SafeCast } from \"@openzeppelin/contracts/utils/SafeCast.sol\";\n\n\n/**\n * @dev Helper library for building super agreement\n */\nlibrary AgreementLibrary {\n\n    using SignedSafeMath for int256;\n    using SafeCast for uint256;\n    using SafeCast for int256;\n\n    /**************************************************************************\n     * Context helpers\n     *************************************************************************/\n\n    /**\n     * @dev Authorize the msg.sender to access token agreement storage\n     *\n     * NOTE:\n     * - msg.sender must be the expected host contract.\n     * - it should revert on unauthorized access.\n     */\n    function authorizeTokenAccess(ISuperfluidToken token, bytes memory ctx)\n        internal view\n        returns (ISuperfluid.Context memory)\n    {\n        require(token.getHost() == msg.sender, \"AgreementLibrary: unauthroized host\");\n        return ISuperfluid(msg.sender).decodeCtx(ctx);\n    }\n\n    /**************************************************************************\n     * Agreement callback helpers\n     *************************************************************************/\n\n    struct CallbackInputs {\n        ISuperfluidToken token;\n        address account;\n        bytes32 agreementId;\n        bytes agreementData;\n        uint256 appAllowanceGranted;\n        int256 appAllowanceUsed;\n        uint256 noopBit;\n    }\n\n    function createCallbackInputs(\n        ISuperfluidToken token,\n        address account,\n        bytes32 agreementId,\n        bytes memory agreementData\n    )\n       internal pure\n       returns (CallbackInputs memory inputs)\n    {\n        inputs.token = token;\n        inputs.account = account;\n        inputs.agreementId = agreementId;\n        inputs.agreementData = agreementData;\n    }\n\n    function callAppBeforeCallback(\n        CallbackInputs memory inputs,\n        bytes memory ctx\n    )\n        internal\n        returns(bytes memory cbdata)\n    {\n        bool isSuperApp;\n        bool isJailed;\n        uint256 noopMask;\n        (isSuperApp, isJailed, noopMask) = ISuperfluid(msg.sender).getAppManifest(ISuperApp(inputs.account));\n        if (isSuperApp && !isJailed) {\n            bytes memory appCtx = _pushCallbackStack(ctx, inputs);\n            if ((noopMask & inputs.noopBit) == 0) {\n                bytes memory callData = abi.encodeWithSelector(\n                    _selectorFromNoopBit(inputs.noopBit),\n                    inputs.token,\n                    address(this) /* agreementClass */,\n                    inputs.agreementId,\n                    inputs.agreementData,\n                    new bytes(0) // placeholder ctx\n                );\n                cbdata = ISuperfluid(msg.sender).callAppBeforeCallback(\n                    ISuperApp(inputs.account),\n                    callData,\n                    inputs.noopBit == SuperAppDefinitions.BEFORE_AGREEMENT_TERMINATED_NOOP,\n                    appCtx);\n            }\n            _popCallbackStatck(ctx, 0);\n        }\n    }\n\n    function callAppAfterCallback(\n        CallbackInputs memory inputs,\n        bytes memory cbdata,\n        bytes memory ctx\n    )\n        internal\n        returns (ISuperfluid.Context memory appContext, bytes memory newCtx)\n    {\n        bool isSuperApp;\n        bool isJailed;\n        uint256 noopMask;\n        (isSuperApp, isJailed, noopMask) = ISuperfluid(msg.sender).getAppManifest(ISuperApp(inputs.account));\n\n        if (isSuperApp && !isJailed) {\n            newCtx = _pushCallbackStack(ctx, inputs);\n            if ((noopMask & inputs.noopBit) == 0) {\n                bytes memory callData = abi.encodeWithSelector(\n                    _selectorFromNoopBit(inputs.noopBit),\n                    inputs.token,\n                    address(this) /* agreementClass */,\n                    inputs.agreementId,\n                    inputs.agreementData,\n                    cbdata,\n                    new bytes(0) // placeholder ctx\n                );\n                newCtx = ISuperfluid(msg.sender).callAppAfterCallback(\n                    ISuperApp(inputs.account),\n                    callData,\n                    inputs.noopBit == SuperAppDefinitions.AFTER_AGREEMENT_TERMINATED_NOOP,\n                    newCtx);\n\n                appContext = ISuperfluid(msg.sender).decodeCtx(newCtx);\n\n                // adjust allowance used to the range [appAllowanceWanted..appAllowanceGranted]\n                appContext.appAllowanceUsed = max(0, min(\n                    inputs.appAllowanceGranted.toInt256(),\n                    max(appContext.appAllowanceWanted.toInt256(), appContext.appAllowanceUsed)));\n            }\n            newCtx = _popCallbackStatck(ctx, appContext.appAllowanceUsed);\n        }\n    }\n\n    function _selectorFromNoopBit(uint256 noopBit)\n        private pure\n        returns (bytes4 selector)\n    {\n        if (noopBit == SuperAppDefinitions.BEFORE_AGREEMENT_CREATED_NOOP) {\n            return ISuperApp.beforeAgreementCreated.selector;\n        } else if (noopBit == SuperAppDefinitions.BEFORE_AGREEMENT_UPDATED_NOOP) {\n            return ISuperApp.beforeAgreementUpdated.selector;\n        } else if (noopBit == SuperAppDefinitions.BEFORE_AGREEMENT_TERMINATED_NOOP) {\n            return ISuperApp.beforeAgreementTerminated.selector;\n        } else if (noopBit == SuperAppDefinitions.AFTER_AGREEMENT_CREATED_NOOP) {\n            return ISuperApp.afterAgreementCreated.selector;\n        } else if (noopBit == SuperAppDefinitions.AFTER_AGREEMENT_UPDATED_NOOP) {\n            return ISuperApp.afterAgreementUpdated.selector;\n        } else /* if (noopBit == SuperAppDefinitions.AFTER_AGREEMENT_TERMINATED_NOOP) */ {\n            return ISuperApp.afterAgreementTerminated.selector;\n        }\n    }\n\n    function _pushCallbackStack(\n        bytes memory ctx,\n        CallbackInputs memory inputs\n    )\n        private\n        returns (bytes memory appCtx)\n    {\n        // app allowance params stack PUSH\n        // pass app allowance and current allowance used to the app,\n        appCtx = ISuperfluid(msg.sender).appCallbackPush(\n            ctx,\n            ISuperApp(inputs.account),\n            inputs.appAllowanceGranted,\n            inputs.appAllowanceUsed);\n    }\n\n    function _popCallbackStatck(\n        bytes memory ctx,\n        int256 appAllowanceUsed\n    )\n        private\n        returns (bytes memory newCtx)\n    {\n        // app allowance params stack POP\n        return ISuperfluid(msg.sender).appCallbackPop(ctx, appAllowanceUsed);\n    }\n\n    /**************************************************************************\n     * Misc\n     *************************************************************************/\n\n    function max(int256 a, int256 b) internal pure returns (int256) { return a > b ? a : b; }\n\n    function min(int256 a, int256 b) internal pure returns (int256) { return a > b ? b : a; }\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/upgradability/UUPSProxiable.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.7.6;\n\nimport { UUPSUtils } from \"./UUPSUtils.sol\";\nimport { Initializable } from \"@openzeppelin/contracts/proxy/Initializable.sol\";\n\n/**\n * @dev UUPS (Universal Upgradeable Proxy Standard) Proxiable contract.\n */\nabstract contract UUPSProxiable is Initializable {\n\n    /**\n     * @dev Get current implementation code address.\n     */\n    function getCodeAddress() public view returns (address codeAddress)\n    {\n        return UUPSUtils.implementation();\n    }\n\n    function updateCode(address newAddress) external virtual;\n\n    /**\n     * @dev Proxiable UUID marker function.\n     *      This would help to avoid wrong logic contract to be used for upgrading.\n     */\n    function proxiableUUID() public view virtual returns (bytes32);\n\n    /**\n     * @dev Update code address function.\n     *      It is internal, so the derived contract could setup its own permission logic.\n     */\n    function _updateCodeAddress(address newAddress) internal\n    {\n        // require UUPSProxy.initializeProxy first\n        require(UUPSUtils.implementation() != address(0), \"UUPSProxiable: not upgradable\");\n        require(\n            proxiableUUID() == UUPSProxiable(newAddress).proxiableUUID(),\n            \"UUPSProxiable: not compatible logic\"\n        );\n        UUPSUtils.setImplementation(newAddress);\n        emit CodeUpdated(proxiableUUID(), newAddress);\n    }\n\n    event CodeUpdated(bytes32 uuid, address codeAddress);\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/upgradability/UUPSUtils.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.7.6;\n\n/**\n * @title UUPS (Universal Upgradeable Proxy Standard) Shared Library\n */\nlibrary UUPSUtils {\n\n    /**\n     * @dev Implementation slot constant.\n     * Using https://eips.ethereum.org/EIPS/eip-1967 standard\n     * Storage slot 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n     * (obtained as bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)).\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /// @dev Get implementation address.\n    function implementation() internal view returns (address impl) {\n        assembly { // solium-disable-line\n            impl := sload(_IMPLEMENTATION_SLOT)\n        }\n    }\n\n    /// @dev Set new implementation address.\n    function setImplementation(address codeAddress) internal {\n        assembly {\n            // solium-disable-line\n            sstore(\n                _IMPLEMENTATION_SLOT,\n                codeAddress\n            )\n        }\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// solhint-disable-next-line compiler-version\npragma solidity >=0.4.24 <0.8.0;\n\nimport \"../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !Address.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/superfluid/SuperfluidToken.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\n/* solhint-disable not-rely-on-time */\npragma solidity 0.7.6;\n\nimport { ISuperfluid } from \"../interfaces/superfluid/ISuperfluid.sol\";\nimport { ISuperAgreement } from \"../interfaces/superfluid/ISuperAgreement.sol\";\nimport { ISuperfluidGovernance } from \"../interfaces/superfluid/ISuperfluidGovernance.sol\";\nimport { ISuperfluidToken } from \"../interfaces/superfluid/ISuperfluidToken.sol\";\n\nimport { Math } from \"@openzeppelin/contracts/math/Math.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport { SafeCast } from \"@openzeppelin/contracts/utils/SafeCast.sol\";\nimport { SignedSafeMath } from \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\nimport { FixedSizeData } from \"../utils/FixedSizeData.sol\";\n\n\n/**\n * @title Superfluid's token implementation\n *\n * @author Superfluid\n */\nabstract contract SuperfluidToken is ISuperfluidToken\n{\n\n    bytes32 private constant _REWARD_ADDRESS_CONFIG_KEY =\n        keccak256(\"org.superfluid-finance.superfluid.rewardAddress\");\n\n    using SafeMath for uint256;\n    using SafeCast for uint256;\n    using SignedSafeMath for int256;\n\n    /// @dev Superfluid contract\n    ISuperfluid immutable internal _host;\n\n    /// @dev Active agreement bitmap\n    mapping(address => uint256) internal _inactiveAgreementBitmap;\n\n    /// @dev Settled balance for the account\n    mapping(address => int256) internal _balances;\n\n    /// @dev Total supply\n    uint256 internal _totalSupply;\n\n    // NOTE: for future compatibility, these are reserved solidity slots\n    // The sub-class of SuperfluidToken solidity slot will start after _reserve13\n    uint256 internal _reserve4;\n    uint256 private _reserve5;\n    uint256 private _reserve6;\n    uint256 private _reserve7;\n    uint256 private _reserve8;\n    uint256 private _reserve9;\n    uint256 private _reserve10;\n    uint256 private _reserve11;\n    uint256 private _reserve12;\n    uint256 internal _reserve13;\n\n    constructor(\n        ISuperfluid host\n    ) {\n        _host = host;\n    }\n\n    /// @dev ISuperfluidToken.getHost implementation\n    function getHost()\n       external view\n       override(ISuperfluidToken)\n       returns(address host)\n    {\n       return address(_host);\n    }\n\n    /**************************************************************************\n     * Real-time balance functions\n     *************************************************************************/\n\n    /// @dev ISuperfluidToken.realtimeBalanceOf implementation\n    function realtimeBalanceOf(\n       address account,\n       uint256 timestamp\n    )\n       public view override\n       returns (\n           int256 availableBalance,\n           uint256 deposit,\n           uint256 owedDeposit)\n    {\n        availableBalance = _balances[account];\n        ISuperAgreement[] memory activeAgreements = getAccountActiveAgreements(account);\n        for (uint256 i = 0; i < activeAgreements.length; i++) {\n            (\n                int256 agreementDynamicBalance,\n                uint256 agreementDeposit,\n                uint256 agreementOwedDeposit) = activeAgreements[i]\n                    .realtimeBalanceOf(\n                         this,\n                         account,\n                         timestamp\n                     );\n            deposit = deposit.add(agreementDeposit);\n            owedDeposit = owedDeposit.add(agreementOwedDeposit);\n            // 1. Available Balance = Dynamic Balance - Max(0, Deposit - OwedDeposit)\n            // 2. Deposit should not be shared between agreements\n            availableBalance = availableBalance\n                .add(agreementDynamicBalance)\n                .sub(\n                    agreementDeposit > agreementOwedDeposit ?\n                    (agreementDeposit - agreementOwedDeposit).toInt256() : 0\n                );\n        }\n    }\n\n    /// @dev ISuperfluidToken.realtimeBalanceOfNow implementation\n    function realtimeBalanceOfNow(\n       address account\n    )\n        external view override\n        returns (\n            int256 availableBalance,\n            uint256 deposit,\n            uint256 owedDeposit,\n            uint256 timestamp)\n    {\n        timestamp = block.timestamp;\n        (\n            availableBalance,\n            deposit,\n            owedDeposit\n        ) = realtimeBalanceOf(account, timestamp);\n    }\n\n    function isAccountCritical(\n        address account,\n        uint256 timestamp\n    )\n        public view override\n        returns(bool isCritical)\n    {\n        (int256 availableBalance,,) = realtimeBalanceOf(account, timestamp);\n        return availableBalance < 0;\n    }\n\n    function isAccountCriticalNow(\n       address account\n    )\n        external view override\n       returns(bool isCritical)\n    {\n        return isAccountCritical(account, block.timestamp);\n    }\n\n    function isAccountSolvent(\n        address account,\n        uint256 timestamp\n    )\n        public view override\n        returns(bool isSolvent)\n    {\n        (int256 availableBalance, uint256 deposit, uint256 owedDeposit) =\n            realtimeBalanceOf(account, timestamp);\n        // Available Balance = Realtime Balance - Max(0, Deposit - OwedDeposit)\n        int realtimeBalance = availableBalance.add(\n            (deposit > owedDeposit ? (deposit - owedDeposit).toInt256() : 0)\n        );\n        return realtimeBalance >= 0;\n    }\n\n    function isAccountSolventNow(\n       address account\n    )\n       external view override\n       returns(bool isSolvent)\n    {\n        return isAccountSolvent(account, block.timestamp);\n    }\n\n    /// @dev ISuperfluidToken.getAccountActiveAgreements implementation\n    function getAccountActiveAgreements(address account)\n       public view override\n       returns(ISuperAgreement[] memory)\n    {\n       return _host.mapAgreementClasses(~_inactiveAgreementBitmap[account]);\n    }\n\n    /**************************************************************************\n     * Token implementation helpers\n     *************************************************************************/\n\n    function _mint(\n        address account,\n        uint256 amount\n    )\n        internal\n    {\n        _balances[account] = _balances[account].add(amount.toInt256());\n        _totalSupply = _totalSupply.add(amount);\n    }\n\n    function _burn(\n        address account,\n        uint256 amount\n    )\n        internal\n    {\n        (int256 availableBalance,,) = realtimeBalanceOf(account, block.timestamp);\n        require(availableBalance >= amount.toInt256(), \"SuperfluidToken: burn amount exceeds balance\");\n        _balances[account] = _balances[account].sub(amount.toInt256());\n        _totalSupply = _totalSupply.sub(amount);\n    }\n\n    function _move(\n        address from,\n        address to,\n        int256 amount\n    )\n        internal\n    {\n        (int256 availableBalance,,) = realtimeBalanceOf(from, block.timestamp);\n        require(availableBalance >= amount, \"SuperfluidToken: move amount exceeds balance\");\n        _balances[from] = _balances[from].sub(amount);\n        _balances[to] = _balances[to].add(amount);\n    }\n\n    /**************************************************************************\n     * Super Agreement hosting functions\n     *************************************************************************/\n\n    /// @dev ISuperfluidToken.createAgreement implementation\n    function createAgreement(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external override\n    {\n        address agreementClass = msg.sender;\n        bytes32 slot = keccak256(abi.encode(\"AgreementData\", agreementClass, id));\n        require(!FixedSizeData.hasData(slot, data.length), \"SuperfluidToken: agreement already created\");\n        FixedSizeData.storeData(slot, data);\n        emit AgreementCreated(agreementClass, id, data);\n    }\n\n    /// @dev ISuperfluidToken.getAgreementData implementation\n    function getAgreementData(\n        address agreementClass,\n        bytes32 id,\n        uint dataLength\n    )\n        external view override\n        returns(bytes32[] memory data)\n    {\n        bytes32 slot = keccak256(abi.encode(\"AgreementData\", agreementClass, id));\n        data = FixedSizeData.loadData(slot, dataLength);\n    }\n\n    /// @dev ISuperfluidToken.updateAgreementData implementation\n    function updateAgreementData(\n        bytes32 id,\n        bytes32[] calldata data\n    )\n        external override\n    {\n        address agreementClass = msg.sender;\n        bytes32 slot = keccak256(abi.encode(\"AgreementData\", agreementClass, id));\n        FixedSizeData.storeData(slot, data);\n        emit AgreementUpdated(msg.sender, id, data);\n    }\n\n    /// @dev ISuperfluidToken.terminateAgreement implementation\n    function terminateAgreement(\n        bytes32 id,\n        uint dataLength\n    )\n        external override\n    {\n        address agreementClass = msg.sender;\n        bytes32 slot = keccak256(abi.encode(\"AgreementData\", agreementClass, id));\n        require(FixedSizeData.hasData(slot,dataLength), \"SuperfluidToken: agreement does not exist\");\n        FixedSizeData.eraseData(slot, dataLength);\n        emit AgreementTerminated(msg.sender, id);\n    }\n\n    /// @dev ISuperfluidToken.updateAgreementState implementation\n    function updateAgreementStateSlot(\n        address account,\n        uint256 slotId,\n        bytes32[] calldata slotData\n    )\n        external override\n    {\n        bytes32 slot = keccak256(abi.encode(\"AgreementState\", msg.sender, account, slotId));\n        FixedSizeData.storeData(slot, slotData);\n        // FIXME change how this is done\n        //_addAgreementClass(msg.sender, account);\n        emit AgreementStateUpdated(msg.sender, account, slotId);\n    }\n\n    /// @dev ISuperfluidToken.getAgreementState implementation\n    function getAgreementStateSlot(\n        address agreementClass,\n        address account,\n        uint256 slotId,\n        uint dataLength\n    )\n        external override view\n        returns (bytes32[] memory slotData) {\n        bytes32 slot = keccak256(abi.encode(\"AgreementState\", agreementClass, account, slotId));\n        slotData = FixedSizeData.loadData(slot, dataLength);\n    }\n\n    /// @dev ISuperfluidToken.settleBalance implementation\n    function settleBalance(\n        address account,\n        int256 delta\n    )\n        external override\n        onlyAgreement\n    {\n        _balances[account] = _balances[account].add(delta);\n    }\n\n    /// @dev ISuperfluidToken.makeLiquidationPayouts implementation\n    function makeLiquidationPayouts\n    (\n        bytes32 id,\n        address liquidator,\n        address penaltyAccount,\n        uint256 rewardAmount,\n        uint256 bailoutAmount\n    )\n        external override\n        onlyAgreement\n    {\n        ISuperfluidGovernance gov = _host.getGovernance();\n\n        // In this configuration, where reward address is set:\n        // that reward account is also a bailout account,\n        // the terminology is being changed to bondAccount\n        address bondAccount = gov.getConfigAsAddress(_host, this, _REWARD_ADDRESS_CONFIG_KEY);\n\n        // In an alternative configuration\n        // reward go to liquidator if bondAccount is null,\n        // on the flip side it also subsidizes all bailout situations\n        if (bondAccount == address(0)) {\n            bondAccount = liquidator;\n        }\n\n        int256 signedRewardAmount = rewardAmount.toInt256();\n\n        if (bailoutAmount == 0) {\n            // if account is in critical state\n            // - reward account takes the reward\n            _balances[bondAccount] = _balances[bondAccount]\n                .add(signedRewardAmount);\n            // - penalty applies\n            _balances[penaltyAccount] = _balances[penaltyAccount]\n                .sub(signedRewardAmount);\n\n            // TODO deprecate AgreementLiquidated\n            emit AgreementLiquidated(\n                msg.sender, id,\n                penaltyAccount,\n                bondAccount /* rewardAccount */,\n                rewardAmount\n            );\n\n            emit AgreementLiquidatedBy(\n                liquidator,\n                msg.sender,\n                id,\n                penaltyAccount,\n                bondAccount,\n                rewardAmount,\n                0\n            );\n        } else {\n            int256 signedBailoutAmount = bailoutAmount.toInt256();\n            // if account is in insolvent state\n            // - liquidator takes the reward\n            _balances[liquidator] = _balances[liquidator]\n                .add(signedRewardAmount);\n            // - reward account becomes bailout account\n            _balances[bondAccount] = _balances[bondAccount]\n                .sub(signedRewardAmount)\n                .sub(signedBailoutAmount);\n            // - penalty applies (excluding the bailout)\n            _balances[penaltyAccount] = _balances[penaltyAccount]\n                .add(signedBailoutAmount);\n            // TODO deprecate AgreementLiquidated & Bailout\n            emit AgreementLiquidated(\n                msg.sender, id,\n                penaltyAccount,\n                liquidator /* rewardAccount */,\n                rewardAmount\n            );\n            emit Bailout(\n                bondAccount,\n                bailoutAmount\n            );\n\n            emit AgreementLiquidatedBy(\n                liquidator,\n                msg.sender,\n                id,\n                penaltyAccount,\n                bondAccount,\n                rewardAmount,\n                bailoutAmount\n            );\n        }\n    }\n\n    /**************************************************************************\n    * Modifiers\n    *************************************************************************/\n\n    modifier onlyAgreement() {\n        require(\n            _host.isAgreementClassListed(ISuperAgreement(msg.sender)),\n            \"SuperfluidToken: only listed agreeement\");\n        _;\n    }\n\n    modifier onlyHost() {\n        require(address(_host) == msg.sender, \"SuperfluidToken: Only host contract allowed\");\n        _;\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/utils/FixedSizeData.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.7.6;\n\n\n/**\n * @dev Utilities for fixed size data in storage\n *\n * When using solidity dynamic array, first word is used to store the length\n * of the array. For use cases that the length doesn't change, it is better\n * to use a fixed size data premitive.\n *\n * To use this library:\n * - The pointer to the storage is `slot`, the user could use `keccak256(abi.encode(...))`\n *   scheme to create collision-free slot ID for locating the data.\n * - To load data, or erase data and get all gas refund, data length is always required.\n */\nlibrary FixedSizeData {\n\n    /**\n     * @dev Store data to the slot at `slot`\n     */\n    function storeData(bytes32 slot, bytes32[] memory data) internal {\n        for (uint j = 0; j < data.length; ++j) {\n            bytes32 d = data[j];\n            assembly { sstore(add(slot, j), d) }\n        }\n    }\n\n    function hasData(bytes32 slot, uint dataLength) internal view returns (bool) {\n        for (uint j = 0; j < dataLength; ++j) {\n            bytes32 d;\n            assembly { d := sload(add(slot, j)) }\n            if (uint256(d) > 0) return true;\n        }\n        return false;\n    }\n\n    /**\n     * @dev Load data of size `dataLength` from the slot at `slot`\n     */\n    function loadData(bytes32 slot, uint dataLength) internal view returns (bytes32[] memory data) {\n        data = new bytes32[](dataLength);\n        for (uint j = 0; j < dataLength; ++j) {\n            bytes32 d;\n            assembly { d := sload(add(slot, j)) }\n            data[j] = d;\n        }\n    }\n\n    /**\n     * @dev Erase data of size `dataLength` from the slot at `slot`\n     */\n    function eraseData(bytes32 slot, uint dataLength) internal {\n        for (uint j = 0; j < dataLength; ++j) {\n            assembly { sstore(add(slot, j), 0) }\n        }\n    }\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/superfluid/SuperToken.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.7.6;\n\nimport { UUPSProxiable } from \"../upgradability/UUPSProxiable.sol\";\n\nimport {\n    ISuperfluid,\n    ISuperfluidGovernance,\n    ISuperToken,\n    ISuperAgreement,\n    IERC20,\n    IERC777,\n    TokenInfo\n} from \"../interfaces/superfluid/ISuperfluid.sol\";\nimport { ISuperfluidToken, SuperfluidToken } from \"./SuperfluidToken.sol\";\n\nimport { ERC777Helper } from \"../utils/ERC777Helper.sol\";\n\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport { SafeCast } from \"@openzeppelin/contracts/utils/SafeCast.sol\";\nimport { SignedSafeMath } from \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\nimport { IERC777Recipient } from \"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\";\nimport { IERC777Sender } from \"@openzeppelin/contracts/token/ERC777/IERC777Sender.sol\";\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\n\n\n/**\n * @title Superfluid's super token implementation\n * @author Superfluid\n */\ncontract SuperToken is\n    UUPSProxiable,\n    SuperfluidToken,\n    ISuperToken\n{\n\n    using SafeMath for uint256;\n    using SafeCast for uint256;\n    using SignedSafeMath for int256;\n    using Address for address;\n    using ERC777Helper for ERC777Helper.Operators;\n    using SafeERC20 for IERC20;\n\n    uint8 constant private _STANDARD_DECIMALS = 18;\n\n    /* WARNING: NEVER RE-ORDER VARIABLES! Including the base contracts.\n       Always double-check that new\n       variables are added APPEND-ONLY. Re-ordering variables can\n       permanently BREAK the deployed proxy contract. */\n\n    /// @dev The underlying ERC20 token\n    IERC20 internal _underlyingToken;\n\n    /// @dev Decimals of the underlying token\n    uint8 internal _underlyingDecimals;\n\n    /// @dev TokenInfo Name property\n    string internal _name;\n\n    /// @dev TokenInfo Symbol property\n    string internal _symbol;\n\n    /// @dev ERC20 Allowances Storage\n    mapping(address => mapping (address => uint256)) internal _allowances;\n\n    /// @dev ERC777 operators support data\n    ERC777Helper.Operators internal _operators;\n\n    // NOTE: for future compatibility, these are reserved solidity slots\n    // The sub-class of SuperToken solidity slot will start after _reserve22\n    uint256 internal _reserve22;\n    uint256 private _reserve23;\n    uint256 private _reserve24;\n    uint256 private _reserve25;\n    uint256 private _reserve26;\n    uint256 private _reserve27;\n    uint256 private _reserve28;\n    uint256 private _reserve29;\n    uint256 private _reserve30;\n    uint256 internal _reserve31;\n\n    constructor(\n        ISuperfluid host\n    )\n        SuperfluidToken(host)\n        // solhint-disable-next-line no-empty-blocks\n    {\n    }\n\n    function initialize(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        string calldata n,\n        string calldata s\n    )\n        external override\n        initializer // OpenZeppelin Initializable\n    {\n        _underlyingToken = underlyingToken;\n        _underlyingDecimals = underlyingDecimals;\n\n        _name = n;\n        _symbol = s;\n\n        // register interfaces\n        ERC777Helper.register(address(this));\n    }\n\n    function proxiableUUID() public pure override returns (bytes32) {\n        return keccak256(\"org.superfluid-finance.contracts.SuperToken.implementation\");\n    }\n\n    function updateCode(address newAddress) external override {\n        require(msg.sender == address(_host), \"only host can update code\");\n        UUPSProxiable._updateCodeAddress(newAddress);\n    }\n\n    /**************************************************************************\n     * ERC20 Token Info\n     *************************************************************************/\n\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() external pure override returns (uint8) {\n        return _STANDARD_DECIMALS;\n    }\n\n    /**************************************************************************\n     * (private) Token Logics\n     *************************************************************************/\n\n    function _transferFrom(address spender, address holder, address recipient, uint amount)\n        internal returns (bool)\n    {\n        require(holder != address(0), \"SuperToken: transfer from zero address\");\n        require(recipient != address(0), \"SuperToken: transfer to zero address\");\n\n        address operator = msg.sender;\n\n        _callTokensToSend(operator, holder, recipient, amount, \"\", \"\");\n\n        _move(operator, holder, recipient, amount, \"\", \"\");\n\n        if (spender != holder) {\n            _approve(\n                holder,\n                spender,\n                _allowances[holder][spender].sub(amount, \"SuperToken: transfer amount exceeds allowance\"));\n        }\n\n        _callTokensReceived(operator, holder, recipient, amount, \"\", \"\", false);\n\n        return true;\n    }\n\n    /**\n     * @dev Send tokens\n     * @param operator address operator address\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _send(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        require(from != address(0), \"SuperToken: transfer from zero address\");\n        require(to != address(0), \"SuperToken: transfer to zero address\");\n\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n\n        _move(operator, from, to, amount, userData, operatorData);\n\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n    }\n\n    function _move(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        SuperfluidToken._move(from, to, amount.toInt256());\n\n        emit Sent(operator, from, to, amount, userData, operatorData);\n        emit Transfer(from, to, amount);\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * If a send hook is registered for `account`, the corresponding function\n     * will be called with `operator`, `data` and `operatorData`.\n     *\n     * See {IERC777Sender} and {IERC777Recipient}.\n     *\n     * Emits {Minted} and {IERC20-Transfer} events.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\n     * interface.\n     */\n    function _mint(\n        address operator,\n        address account,\n        uint256 amount,\n        bool requireReceptionAck,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        internal\n    {\n        require(account != address(0), \"SuperToken: mint to zero address\");\n\n        SuperfluidToken._mint(account, amount);\n\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, requireReceptionAck);\n\n        emit Minted(operator, account, amount, userData, operatorData);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Burn tokens\n     * @param from address token holder address\n     * @param amount uint256 amount of tokens to burn\n     * @param userData bytes extra information provided by the token holder\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _burn(\n        address operator,\n        address from,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        internal\n    {\n        require(from != address(0), \"SuperToken: burn from zero address\");\n\n        _callTokensToSend(operator, from, address(0), amount, userData, operatorData);\n\n        SuperfluidToken._burn(from, amount);\n\n        emit Burned(operator, from, amount, userData, operatorData);\n        emit Transfer(from, address(0), amount);\n    }\n\n    /**\n     * @notice Sets `amount` as the allowance of `spender` over the `account`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address account, address spender, uint256 amount)\n        internal\n    {\n        require(account != address(0), \"SuperToken: approve from zero address\");\n        require(spender != address(0), \"SuperToken: approve to zero address\");\n\n        _allowances[account][spender] = amount;\n        emit Approval(account, spender, amount);\n    }\n\n    /**\n     * @dev Call from.tokensToSend() if the interface is registered\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     */\n    function _callTokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    )\n        private\n    {\n        address implementer = ERC777Helper._ERC1820_REGISTRY.getInterfaceImplementer(\n            from, ERC777Helper._TOKENS_SENDER_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n        }\n    }\n\n    /**\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\n     * tokensReceived() was not registered for the recipient\n     * @param operator address operator requesting the transfer\n     * @param from address token holder address\n     * @param to address recipient address\n     * @param amount uint256 amount of tokens to transfer\n     * @param userData bytes extra information provided by the token holder (if any)\n     * @param operatorData bytes extra information provided by the operator (if any)\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n     */\n    function _callTokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData,\n        bool requireReceptionAck\n    )\n        private\n    {\n        address implementer = ERC777Helper._ERC1820_REGISTRY.getInterfaceImplementer(\n            to, ERC777Helper._TOKENS_RECIPIENT_INTERFACE_HASH);\n        if (implementer != address(0)) {\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n        } else if (requireReceptionAck) {\n            require(\n                !to.isContract(),\n                \"SuperToken: not an ERC777TokensRecipient\");\n        }\n    }\n\n    /**************************************************************************\n     * ERC20 Implementations\n     *************************************************************************/\n\n    function totalSupply()\n        public view override returns (uint256)\n    {\n        return _totalSupply;\n    }\n\n    function balanceOf(\n        address account\n    )\n        public\n        view\n        override\n        returns(uint256 balance)\n    {\n        // solhint-disable-next-line not-rely-on-time\n        (int256 availableBalance, , ) = super.realtimeBalanceOf(account, block.timestamp);\n        return availableBalance < 0 ? 0 : uint256(availableBalance);\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public override returns (bool)\n    {\n        return _transferFrom(msg.sender, msg.sender, recipient, amount);\n    }\n\n    function allowance(address account, address spender)\n        public view override returns (uint256)\n    {\n        return _allowances[account][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        public override\n        returns (bool)\n    {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(address holder, address recipient, uint256 amount)\n        public override returns (bool)\n    {\n        return _transferFrom(msg.sender, holder, recipient, amount);\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        public override returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public override returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue,\n            \"SuperToken: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**************************************************************************\n     * ERC-777 functions\n     *************************************************************************/\n\n    function granularity() external pure override returns (uint256) { return 1; }\n\n    function send(address recipient, uint256 amount, bytes calldata data) external override {\n        _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\n    }\n\n    function burn(uint256 amount, bytes calldata data) external override {\n        _downgrade(msg.sender, msg.sender, amount, data, \"\");\n    }\n\n    function isOperatorFor(address operator, address tokenHolder) external override view returns (bool) {\n        return _operators.isOperatorFor(operator, tokenHolder);\n    }\n\n    function authorizeOperator(address operator) external override {\n        address holder = msg.sender;\n        _operators.authorizeOperator(holder, operator);\n        emit AuthorizedOperator(operator, holder);\n    }\n\n    function revokeOperator(address operator) external override {\n        address holder = msg.sender;\n        _operators.revokeOperator(holder, operator);\n        emit RevokedOperator(operator, holder);\n    }\n\n    function defaultOperators() external override view returns (address[] memory) {\n        return ERC777Helper.defaultOperators(_operators);\n    }\n\n    function operatorSend(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override {\n        address operator = msg.sender;\n        require(_operators.isOperatorFor(operator, sender), \"SuperToken: caller is not an operator for holder\");\n        _send(operator, sender, recipient, amount, data, operatorData, true);\n    }\n\n    function operatorBurn(\n        address account,\n        uint256 amount,\n        bytes calldata data,\n        bytes calldata operatorData\n    ) external override {\n        address operator = msg.sender;\n        require(_operators.isOperatorFor(operator, account), \"SuperToken: caller is not an operator for holder\");\n        _downgrade(operator, account, amount, data, operatorData);\n    }\n\n    function _setupDefaultOperators(address[] memory operators) internal {\n        _operators.setupDefaultOperators(operators);\n    }\n\n    /**************************************************************************\n     * SuperToken custom token functions\n     *************************************************************************/\n\n    function selfMint(\n        address account,\n        uint256 amount,\n        bytes memory userData\n    )\n        external override\n        onlySelf\n    {\n        _mint(msg.sender, account, amount,\n            true /* requireReceptionAck */, userData, new bytes(0));\n    }\n\n    function selfBurn(\n       address account,\n       uint256 amount,\n       bytes memory userData\n    )\n       external override\n       onlySelf\n    {\n       _burn(msg.sender, account, amount, userData, new bytes(0));\n    }\n\n    /**************************************************************************\n     * SuperToken extra functions\n     *************************************************************************/\n\n    function transferAll(address recipient)\n        external override\n    {\n        _transferFrom(msg.sender, msg.sender, recipient, balanceOf(msg.sender));\n    }\n\n    /**************************************************************************\n     * ERC20 wrapping\n     *************************************************************************/\n\n    /// @dev ISuperfluidGovernance.getUnderlyingToken implementation\n    function getUnderlyingToken() external view override returns(address) {\n        return address(_underlyingToken);\n    }\n\n    /// @dev ISuperToken.upgrade implementation\n    function upgrade(uint256 amount) external override {\n        _upgrade(msg.sender, msg.sender, msg.sender, amount, \"\", \"\");\n    }\n\n    /// @dev ISuperToken.upgradeTo implementation\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external override {\n        _upgrade(msg.sender, msg.sender, to, amount, \"\", data);\n    }\n\n    /// @dev ISuperToken.downgrade implementation\n    function downgrade(uint256 amount) external override {\n        _downgrade(msg.sender, msg.sender, amount, \"\", \"\");\n    }\n\n    function _upgrade(\n        address operator,\n        address account,\n        address to,\n        uint256 amount,\n        bytes memory userData,\n        bytes memory operatorData\n    ) private {\n        require(address(_underlyingToken) != address(0), \"SuperToken: no underlying token\");\n\n        (uint256 underlyingAmount, uint256 adjustedAmount) = _toUnderlyingAmount(amount);\n\n        uint256 amountBefore = _underlyingToken.balanceOf(address(this));\n        _underlyingToken.safeTransferFrom(account, address(this), underlyingAmount);\n        uint256 amountAfter = _underlyingToken.balanceOf(address(this));\n        uint256 actualUpgradedAmount = amountAfter.sub(amountBefore);\n        require(\n            underlyingAmount == actualUpgradedAmount,\n            \"SuperToken: inflationary/deflationary tokens not supported\");\n\n        _mint(operator, to, adjustedAmount,\n            // if `to` is diffferent from `account`, we requireReceptionAck\n            account != to, userData, operatorData);\n\n        emit TokenUpgraded(to, adjustedAmount);\n    }\n\n    function _downgrade(\n        address operator,\n        address account,\n        uint256 amount,\n        bytes memory data,\n        bytes memory operatorData) private {\n        require(address(_underlyingToken) != address(0), \"SuperToken: no underlying token\");\n\n        (uint256 underlyingAmount, uint256 adjustedAmount) = _toUnderlyingAmount(amount);\n\n         // _burn will check the (actual) amount availability again\n         _burn(operator, account, adjustedAmount, data, operatorData);\n\n        uint256 amountBefore = _underlyingToken.balanceOf(address(this));\n        _underlyingToken.safeTransfer(account, underlyingAmount);\n        uint256 amountAfter = _underlyingToken.balanceOf(address(this));\n        uint256 actualDowngradedAmount = amountBefore.sub(amountAfter);\n        require(\n            underlyingAmount == actualDowngradedAmount,\n            \"SuperToken: inflationary/deflationary tokens not supported\");\n\n        emit TokenDowngraded(account, adjustedAmount);\n    }\n\n    /**\n     * @dev Handle decimal differences between underlying token and super token\n     */\n    function _toUnderlyingAmount(uint256 amount)\n        private view\n        returns (uint256 underlyingAmount, uint256 adjustedAmount)\n    {\n        uint256 factor;\n        if (_underlyingDecimals < _STANDARD_DECIMALS) {\n            // if underlying has less decimals\n            // one can upgrade less \"granualar\" amount of tokens\n            factor = 10 ** (_STANDARD_DECIMALS - _underlyingDecimals);\n            underlyingAmount = amount / factor;\n            // remove precision errors\n            adjustedAmount = underlyingAmount * factor;\n        } else if (_underlyingDecimals > _STANDARD_DECIMALS) {\n            // if underlying has more decimals\n            // one can upgrade more \"granualar\" amount of tokens\n            factor = 10 ** (_underlyingDecimals - _STANDARD_DECIMALS);\n            underlyingAmount = amount * factor;\n            adjustedAmount = amount;\n        } else {\n            underlyingAmount = adjustedAmount = amount;\n        }\n    }\n\n    /**************************************************************************\n     * Superfluid Batch Operations\n     *************************************************************************/\n\n    function operationApprove(\n        address account,\n        address spender,\n        uint256 amount\n    )\n        external override\n        onlyHost\n    {\n        _approve(account, spender, amount);\n    }\n\n    function operationTransferFrom(\n        address account,\n        address spender,\n        address recipient,\n        uint256 amount\n    )\n        external override\n        onlyHost\n    {\n        _transferFrom(account, spender, recipient, amount);\n    }\n\n    function operationUpgrade(address account, uint256 amount)\n        external override\n        onlyHost\n    {\n        _upgrade(msg.sender, account, account, amount, \"\", \"\");\n    }\n\n    function operationDowngrade(address account, uint256 amount)\n        external override\n        onlyHost\n    {\n        _downgrade(msg.sender, account, amount, \"\", \"\");\n    }\n\n    /**************************************************************************\n    * Modifiers\n    *************************************************************************/\n\n    modifier onlySelf() {\n        require(msg.sender == address(this), \"SuperToken: only self allowed\");\n        _;\n    }\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/utils/ERC777Helper.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.7.6;\n\nimport { IERC1820Registry } from \"@openzeppelin/contracts/introspection/IERC1820Registry.sol\";\n\n\nlibrary ERC777Helper {\n\n    IERC1820Registry constant internal _ERC1820_REGISTRY =\n        IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n\n    // keccak256(\"ERC777TokensSender\")\n    bytes32 constant internal _TOKENS_SENDER_INTERFACE_HASH =\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n\n    // keccak256(\"ERC777TokensRecipient\")\n    bytes32 constant internal _TOKENS_RECIPIENT_INTERFACE_HASH =\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n\n\n    /// @dev ERC777 operators support self structure\n    struct Operators {\n        address[] defaultOperatorsArray;\n        mapping(address => bool) defaultOperators;\n        mapping(address => mapping(address => bool)) operators;\n        mapping(address => mapping(address => bool)) revokedDefaultOperators;\n    }\n\n    function register(address token) internal {\n        _ERC1820_REGISTRY.setInterfaceImplementer(token, keccak256(\"ERC777Token\"), address(this));\n        _ERC1820_REGISTRY.setInterfaceImplementer(token, keccak256(\"ERC20Token\"), address(this));\n    }\n\n    function isOperatorFor(Operators storage self, address operator, address tokenHolder) internal view returns (bool) {\n        return operator == tokenHolder ||\n            (\n                self.defaultOperators[operator] &&\n                !self.revokedDefaultOperators[tokenHolder][operator]\n            ) ||\n            self.operators[tokenHolder][operator];\n    }\n\n    function authorizeOperator(Operators storage self, address holder, address operator) internal {\n        require(holder != operator, \"ERC777Operators: authorizing self as operator\");\n\n        if (self.defaultOperators[operator]) {\n            delete self.revokedDefaultOperators[holder][operator];\n        } else {\n            self.operators[holder][operator] = true;\n        }\n    }\n\n    function revokeOperator(Operators storage self, address holder, address operator) internal {\n        require(operator != msg.sender, \"ERC777Operators: revoking self as operator\");\n        if (self.defaultOperators[operator]) {\n            self.revokedDefaultOperators[holder][operator] = true;\n        } else {\n            delete self.operators[holder][operator];\n        }\n    }\n\n    function defaultOperators(Operators storage self) internal view returns (address[] memory) {\n        return self.defaultOperatorsArray;\n    }\n\n    function setupDefaultOperators(Operators storage self, address[] memory operators) internal {\n        // According to 777 spec: default operators should only be setup once\n        assert(self.defaultOperatorsArray.length == 0);\n        self.defaultOperatorsArray = operators;\n        for (uint i = 0; i < operators.length; ++i) {\n            self.defaultOperators[operators[i]] = true;\n        }\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n *\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\n * contract implement this interface (contract holders can be their own\n * implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC777/IERC777Sender.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\n *\n * {IERC777} Token holders can be notified of operations performed on their\n * tokens by having a contract implement this interface (contract holders can be\n *  their own implementer) and registering it on the\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n *\n * See {IERC1820Registry} and {ERC1820Implementer}.\n */\ninterface IERC777Sender {\n    /**\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\n     * is conveyed by `to` being the zero address or not.\n     *\n     * This call occurs _before_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensToSend(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/introspection/IERC1820Registry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the global ERC1820 Registry, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n * implementers for interfaces in this registry, as well as query support.\n *\n * Implementers may be shared by multiple accounts, and can also implement more\n * than a single interface for each account. Contracts can implement interfaces\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\n * contract.\n *\n * {IERC165} interfaces can also be queried via the registry.\n *\n * For an in-depth explanation and source code analysis, see the EIP text.\n */\ninterface IERC1820Registry {\n    /**\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\n     * account is able to set interface implementers for it.\n     *\n     * By default, each account is its own manager. Passing a value of `0x0` in\n     * `newManager` will reset the manager to this initial state.\n     *\n     * Emits a {ManagerChanged} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     */\n    function setManager(address account, address newManager) external;\n\n    /**\n     * @dev Returns the manager for `account`.\n     *\n     * See {setManager}.\n     */\n    function getManager(address account) external view returns (address);\n\n    /**\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\n     * `interfaceHash`.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     * The zero address can also be used in `implementer` to remove an old one.\n     *\n     * See {interfaceHash} to learn how these are created.\n     *\n     * Emits an {InterfaceImplementerSet} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n     * end in 28 zeroes).\n     * - `implementer` must implement {IERC1820Implementer} and return true when\n     * queried for support, unless `implementer` is the caller. See\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\n\n    /**\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n     * implementer is registered, returns the zero address.\n     *\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n     * zeroes), `account` will be queried for support of it.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     */\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\n\n    /**\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n     * corresponding\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n     */\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n\n    /**\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n     *  @param account Address of the contract for which to update the cache.\n     *  @param interfaceId ERC165 interface for which to update the cache.\n     */\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\n     *  If the result is not cached a direct lookup on the contract address is performed.\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n     *  {updateERC165Cache} with the contract address.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n\n    event ManagerChanged(address indexed account, address indexed newManager);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/gov/SuperfluidGovernanceBase.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.7.6;\n\nimport {\n    ISuperfluid,\n    ISuperAgreement,\n    ISuperfluidToken,\n    ISuperToken,\n    ISuperTokenFactory,\n    ISuperfluidGovernance,\n    SuperfluidGovernanceConfigs\n} from \"../interfaces/superfluid/ISuperfluid.sol\";\n\nimport { UUPSProxiable } from \"../upgradability/UUPSProxiable.sol\";\n\n\n/**\n * @dev Base superfluid governance implementation\n */\nabstract contract SuperfluidGovernanceBase is ISuperfluidGovernance\n{\n    struct Value {\n        bool set;\n        uint256 value;\n    }\n\n    // host => superToken => config\n    mapping (address => mapping (address => mapping (bytes32 => Value))) private _configs;\n\n    /**************************************************************************\n    /* ISuperfluidGovernance interface\n    /*************************************************************************/\n\n    function replaceGovernance(\n        ISuperfluid host,\n        address newGov\n    )\n        external override\n        onlyAuthorized(host)\n    {\n        host.replaceGovernance(ISuperfluidGovernance(newGov));\n    }\n\n    function registerAgreementClass(\n        ISuperfluid host,\n        address agreementClass\n    )\n        external override\n        onlyAuthorized(host)\n    {\n        host.registerAgreementClass(ISuperAgreement(agreementClass));\n    }\n\n    function updateContracts(\n        ISuperfluid host,\n        address hostNewLogic,\n        address[] calldata agreementClassNewLogics,\n        address superTokenFactoryNewLogic\n    )\n        external override\n        onlyAuthorized(host)\n    {\n        if (hostNewLogic != address(0)) {\n            UUPSProxiable(address(host)).updateCode(hostNewLogic);\n        }\n        for (uint i = 0; i < agreementClassNewLogics.length; ++i) {\n            host.updateAgreementClass(ISuperAgreement(agreementClassNewLogics[i]));\n        }\n        if (superTokenFactoryNewLogic != address(0)) {\n            host.updateSuperTokenFactory(ISuperTokenFactory(superTokenFactoryNewLogic));\n        }\n    }\n\n    function updateSuperTokenLogic(\n        ISuperfluid host,\n        ISuperToken token\n    )\n        external override\n        onlyAuthorized(host)\n    {\n        host.updateSuperTokenLogic(token);\n    }\n\n    event ConfigChanged(\n        ISuperfluid indexed host,\n        ISuperfluidToken indexed superToken,\n        bytes32 key,\n        bool set,\n        uint256 value);\n\n    function _setConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key,\n        address value\n    )\n        internal\n        onlyAuthorized(host)\n    {\n        emit ConfigChanged(host, superToken, key, true, uint256(uint160(value)));\n        _configs[address(host)][address(superToken)][key] = Value(true, uint256(uint160(value)));\n    }\n\n    function _setConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key,\n        uint256 value\n    )\n        internal\n        onlyAuthorized(host)\n    {\n        emit ConfigChanged(host, superToken, key, true, value);\n        _configs[address(host)][address(superToken)][key] = Value(true, value);\n    }\n\n    function _clearConfig(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key\n    )\n        internal\n        onlyAuthorized(host)\n    {\n        emit ConfigChanged(host, superToken, key, false, 0);\n        _configs[address(host)][address(superToken)][key] = Value(false, 0);\n    }\n\n    function getConfigAsAddress(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key\n    )\n        public view override\n        returns(address value)\n    {\n        Value storage v = _configs[address(host)][address(superToken)][key];\n        if (!v.set) {\n            // fallback to default config\n            v =  _configs[address(host)][address(0)][key];\n        }\n        return address(int160(v.value));\n    }\n\n    function getConfigAsUint256(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        bytes32 key\n    )\n        public view override\n        returns(uint256 period)\n    {\n        Value storage v = _configs[address(host)][address(superToken)][key];\n        if (!v.set) {\n            // fallback to default config\n            v =  _configs[address(host)][address(0)][key];\n        }\n        return v.value;\n    }\n\n    /**************************************************************************\n    /* Known Configurations\n    /*************************************************************************/\n\n    // Superfluid rewardAddress\n    event RewardAddressChanged(\n        ISuperfluid indexed host,\n        ISuperfluidToken indexed superToken,\n        bool set,\n        address rewardAddress);\n\n    function getRewardAddress(\n        ISuperfluid host,\n        ISuperfluidToken superToken\n    )\n        public view returns (address)\n    {\n        return getConfigAsAddress(\n            host, superToken,\n            SuperfluidGovernanceConfigs.SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY);\n    }\n\n    function setRewardAddress(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        address rewardAddress\n    )\n        public\n    {\n        emit RewardAddressChanged(host, superToken, true, rewardAddress);\n        return _setConfig(\n            host, superToken,\n            SuperfluidGovernanceConfigs.SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY,\n            rewardAddress);\n    }\n\n    function clearRewardAddress(\n        ISuperfluid host,\n        ISuperfluidToken superToken\n    )\n        public\n    {\n        emit RewardAddressChanged(host, superToken, false, address(0));\n        _clearConfig(\n            host, superToken,\n            SuperfluidGovernanceConfigs.SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY);\n    }\n\n    // CFAv1 liquidationPeriod\n    event CFAv1LiquidationPeriodChanged(\n        ISuperfluid indexed host,\n        ISuperfluidToken indexed superToken,\n        bool set,\n        uint256 liquidationPeriod);\n\n    function getCFAv1LiquidationPeriod(\n        ISuperfluid host,\n        ISuperfluidToken superToken\n    )\n        public view\n        returns (uint256 value)\n    {\n        return getConfigAsUint256(\n            host, superToken,\n            SuperfluidGovernanceConfigs.CFAv1_LIQUIDATION_PERIOD_CONFIG_KEY);\n    }\n\n    function setCFAv1LiquidationPeriod(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        uint256 value\n    )\n        public\n    {\n        emit CFAv1LiquidationPeriodChanged(host, superToken, true, value);\n        return _setConfig(\n            host, superToken,\n            SuperfluidGovernanceConfigs.CFAv1_LIQUIDATION_PERIOD_CONFIG_KEY,\n            value);\n    }\n\n    function clearCFAv1LiquidationPeriod(\n        ISuperfluid host,\n        ISuperfluidToken superToken\n    )\n        public\n    {\n        emit CFAv1LiquidationPeriodChanged(host, superToken, false, 0);\n        _clearConfig(\n            host, superToken,\n            SuperfluidGovernanceConfigs.CFAv1_LIQUIDATION_PERIOD_CONFIG_KEY);\n    }\n\n    // trustedForwarder\n    event TrustedForwarderChanged(\n        ISuperfluid indexed host,\n        ISuperfluidToken indexed superToken,\n        bool set,\n        address forwarder,\n        bool enabled);\n\n    function isTrustedForwarder(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        address forwarder\n    )\n        public view\n        returns (bool)\n    {\n        return getConfigAsUint256(\n            host, superToken,\n            SuperfluidGovernanceConfigs.getTrustedForwarderConfigKey(forwarder)) == 1;\n    }\n\n    function enableTrustedForwarder(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        address forwarder\n    )\n        public\n    {\n        _setConfig(\n            host, superToken,\n            SuperfluidGovernanceConfigs.getTrustedForwarderConfigKey(forwarder),\n            1);\n        emit TrustedForwarderChanged(host, superToken, true, forwarder, true);\n    }\n\n    function disableTrustedForwarder(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        address forwarder\n    )\n        public\n    {\n        _setConfig(\n            host, superToken,\n            SuperfluidGovernanceConfigs.getTrustedForwarderConfigKey(forwarder),\n            0);\n        emit TrustedForwarderChanged(host, superToken, true, forwarder, false);\n    }\n\n    function clearTrustedForwarder(\n        ISuperfluid host,\n        ISuperfluidToken superToken,\n        address forwarder\n    )\n        public\n    {\n        emit TrustedForwarderChanged(host, superToken, false, forwarder, false);\n        return _clearConfig(\n            host, superToken,\n            SuperfluidGovernanceConfigs.getTrustedForwarderConfigKey(forwarder));\n    }\n\n    /**\n     * @dev Whitelist a new app using the secret key\n     *\n     * NOTE:\n     * To generate the secret key, use the SuperfluidGovernanceConfigs.getAppWhiteListingSecretKey\n     * offchain.\n     */\n    function whiteListNewApp(\n        ISuperfluid host,\n        bytes32 secretKey\n    )\n        external\n    {\n        _setConfig(host, ISuperfluidToken(address(0)), secretKey, 1);\n    }\n\n    // TODO: would like to use virtual modifier, but solhint doesn't like it atm\n    modifier onlyAuthorized(ISuperfluid host) {\n        _requireAuthorised(host);\n        _;\n    }\n\n    function _requireAuthorised(ISuperfluid host) internal view virtual;\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/superfluid/SuperTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.7.6;\n\nimport {\n    ISuperTokenFactory,\n    ISuperToken,\n    IERC20,\n    ERC20WithTokenInfo\n} from \"../interfaces/superfluid/ISuperTokenFactory.sol\";\n\nimport { ISuperfluid } from \"../interfaces/superfluid/ISuperfluid.sol\";\n\nimport { UUPSProxy } from \"../upgradability/UUPSProxy.sol\";\nimport { UUPSProxiable } from \"../upgradability/UUPSProxiable.sol\";\n\nimport { SuperToken } from \"../superfluid/SuperToken.sol\";\nimport { FullUpgradableSuperTokenProxy } from \"../tokens/FullUpgradableSuperTokenProxy.sol\";\n\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\nimport { Create2 } from \"@openzeppelin/contracts/utils/Create2.sol\";\n\n\nabstract contract SuperTokenFactoryBase is\n    UUPSProxiable,\n    ISuperTokenFactory\n{\n\n    ISuperfluid immutable internal _host;\n\n    ISuperToken internal _superTokenLogic;\n\n    constructor(\n        ISuperfluid host\n    ) {\n        _host = host;\n    }\n\n    /// @dev ISuperTokenFactory.getHost implementation\n    function getHost()\n       external view\n       override(ISuperTokenFactory)\n       returns(address host)\n    {\n       return address(_host);\n    }\n\n    /**************************************************************************\n    * UUPSProxiable\n    **************************************************************************/\n    function initialize()\n        external override\n        initializer // OpenZeppelin Initializable\n    {\n        _updateSuperTokenLogic();\n    }\n\n    function proxiableUUID() public pure override returns (bytes32) {\n        return keccak256(\"org.superfluid-finance.contracts.SuperTokenFactory.implementation\");\n    }\n\n    function updateCode(address newAddress) external override {\n        require(msg.sender == address(_host), \"only host can update code\");\n        _updateCodeAddress(newAddress);\n        _updateSuperTokenLogic();\n    }\n\n    function _updateSuperTokenLogic() private {\n        // use external call to trigger the new code to update the super token logic contract\n        _superTokenLogic = SuperToken(this.createSuperTokenLogic(_host));\n        emit SuperTokenLogicCreated(_superTokenLogic);\n    }\n\n    /**************************************************************************\n    * ISuperTokenFactory\n    **************************************************************************/\n    function getSuperTokenLogic()\n        external view override\n        returns (ISuperToken)\n    {\n        return _superTokenLogic;\n    }\n\n    function createSuperTokenLogic(ISuperfluid host) external virtual returns (address logic);\n\n    function createERC20Wrapper(\n        IERC20 underlyingToken,\n        uint8 underlyingDecimals,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        public override\n        returns (ISuperToken superToken)\n    {\n        require(address(underlyingToken) != address(0), \"SuperTokenFactory: zero address\");\n\n        if (upgradability == Upgradability.NON_UPGRADABLE) {\n            superToken = ISuperToken(this.createSuperTokenLogic(_host));\n        } else if (upgradability == Upgradability.SEMI_UPGRADABLE) {\n            UUPSProxy proxy = new UUPSProxy();\n            // initialize the wrapper\n            proxy.initializeProxy(address(_superTokenLogic));\n            superToken = ISuperToken(address(proxy));\n        } else /* if (type == Upgradability.FULL_UPGRADABE) */ {\n            FullUpgradableSuperTokenProxy proxy = new FullUpgradableSuperTokenProxy();\n            proxy.initialize();\n            superToken = ISuperToken(address(proxy));\n        }\n\n        // initialize the token\n        superToken.initialize(\n            underlyingToken,\n            underlyingDecimals,\n            name,\n            symbol\n        );\n\n        emit SuperTokenCreated(superToken);\n    }\n\n    function createERC20Wrapper(\n        ERC20WithTokenInfo underlyingToken,\n        Upgradability upgradability,\n        string calldata name,\n        string calldata symbol\n    )\n        external override\n        returns (ISuperToken superToken)\n    {\n        return createERC20Wrapper(\n            underlyingToken,\n            underlyingToken.decimals(),\n            upgradability,\n            name,\n            symbol\n        );\n    }\n\n    function initializeCustomSuperToken(\n        address customSuperTokenProxy\n    )\n        external override\n    {\n        // odd solidity stuff..\n        address payable a = address(uint160(customSuperTokenProxy));\n        UUPSProxy(a).initializeProxy(address(_superTokenLogic));\n\n        emit CustomSuperTokenCreated(ISuperToken(customSuperTokenProxy));\n    }\n\n}\n\n// spliting this off because the contract is getting bigger\ncontract SuperTokenFactoryHelper {\n    function create(ISuperfluid host)\n        external\n        returns (address logic)\n    {\n        return address(new SuperToken(host));\n    }\n}\n\ncontract SuperTokenFactory is SuperTokenFactoryBase\n{\n    SuperTokenFactoryHelper immutable private _helper;\n\n    constructor(\n        ISuperfluid host,\n        SuperTokenFactoryHelper helper\n    )\n        SuperTokenFactoryBase(host)\n        // solhint-disable-next-line no-empty-blocks\n    {\n        _helper = helper;\n    }\n\n    function createSuperTokenLogic(ISuperfluid host)\n        external override\n        returns (address logic)\n    {\n        return _helper.create(host);\n    }\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/upgradability/UUPSProxy.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.7.6;\n\nimport { UUPSUtils } from \"./UUPSUtils.sol\";\nimport { Proxy } from \"@openzeppelin/contracts/proxy/Proxy.sol\";\n\n\n/**\n * @dev UUPS (Universal Upgradeable Proxy Standard) Proxy\n *\n * NOTE:\n * - Compliant with [Universal Upgradeable Proxy Standard](https://eips.ethereum.org/EIPS/eip-1822)\n * - Compiiant with [Standard Proxy Storage Slots](https://eips.ethereum.org/EIPS/eip-1967)\n * - Implements delegation of calls to other contracts, with proper forwarding of\n *   return values and bubbling of failures.\n * - It defines a fallback function that delegates all calls to the implementation.\n */\ncontract UUPSProxy is Proxy {\n\n    /**\n     * @dev Proxy initialization function.\n     *      This should only be called once and it is permission-less.\n     * @param initialAddress Initial logic contract code address to be used.\n     */\n    function initializeProxy(address initialAddress) external {\n        require(initialAddress != address(0), \"UUPSProxy: zero address\");\n        require(UUPSUtils.implementation() == address(0), \"UUPSProxy: already initialized\");\n        UUPSUtils.setImplementation(initialAddress);\n    }\n\n    /// @dev Proxy._implementation implementation\n    function _implementation() internal virtual override view returns (address)\n    {\n        return UUPSUtils.implementation();\n    }\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/tokens/FullUpgradableSuperTokenProxy.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.7.6;\n\nimport { ISuperTokenFactory } from \"../interfaces/superfluid/ISuperTokenFactory.sol\";\nimport { Proxy } from \"@openzeppelin/contracts/proxy/Proxy.sol\";\n\n\n/**\n * @dev Full upgradable super token proxy\n */\ncontract FullUpgradableSuperTokenProxy is Proxy {\n\n    // web3.utils.keccak256(\"org.superfluid-finance.FullUpgradableSuperTokenWrapper.factory_slot\")\n    bytes32 internal constant _FACTORY_SLOT = 0xb8fcd5719b3ddf8626f3664705a89b7fc476129a58c1aa5eda57c600cc1821a0;\n\n    function initialize() external\n    {\n        address factory;\n        assembly { // solium-disable-line\n            factory := sload(_FACTORY_SLOT)\n        }\n        require(address(factory) == address(0), \"Already initialized\");\n        factory = msg.sender;\n        assembly { // solium-disable-line\n            sstore(_FACTORY_SLOT, factory)\n        }\n    }\n\n    function _implementation() internal override view returns (address impl) {\n        ISuperTokenFactory factory;\n        assembly { // solium-disable-line\n            factory := sload(_FACTORY_SLOT)\n        }\n        require(address(factory) != address(0), \"Not initialized\");\n        return address(factory.getSuperTokenLogic());\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/utils/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\n        address addr;\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n        return addr;\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\n        bytes32 _data = keccak256(\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\n        );\n        return address(uint160(uint256(_data)));\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 { revert(0, returndatasize()) }\n            default { return(0, returndatasize()) }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {\n    }\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/superfluid/Superfluid.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.7.6;\npragma experimental ABIEncoderV2;\n\nimport { UUPSProxiable } from \"../upgradability/UUPSProxiable.sol\";\nimport { UUPSProxy } from \"../upgradability/UUPSProxy.sol\";\n\nimport {\n    ISuperfluid,\n    ISuperfluidGovernance,\n    ISuperAgreement,\n    ISuperApp,\n    SuperAppDefinitions,\n    ContextDefinitions,\n    BatchOperation,\n    SuperfluidGovernanceConfigs,\n    ISuperfluidToken,\n    ISuperToken,\n    ISuperTokenFactory,\n    IERC20\n} from \"../interfaces/superfluid/ISuperfluid.sol\";\n\nimport { CallUtils } from \"../utils/CallUtils.sol\";\n\nimport { BaseRelayRecipient } from \"../ux/BaseRelayRecipient.sol\";\n\nimport { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport { SignedSafeMath } from \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\nimport { SafeCast } from \"@openzeppelin/contracts/utils/SafeCast.sol\";\n\n\ncontract Superfluid is\n    UUPSProxiable,\n    ISuperfluid,\n    BaseRelayRecipient\n{\n\n    using SafeMath for uint256;\n    using SafeCast for uint256;\n    using SignedSafeMath for int256;\n\n    struct AppManifest {\n        uint256 configWord;\n    }\n\n    // solhint-disable-next-line var-name-mixedcase\n    bool immutable public NON_UPGRADABLE_DEPLOYMENT;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bool immutable public APP_WHITE_LISTING_ENABLED;\n\n    /**\n     * @dev Maximum number of level of apps can be composed together\n     *\n     * NOTE:\n     * - TODO Composite app feature is currently disabled. Hence app cannot\n     *   will not be able to call other app.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    uint immutable public MAX_APP_LEVEL = 1;\n\n    // solhint-disable-next-line var-name-mixedcase\n    uint64 immutable public CALLBACK_GAS_LIMIT = 3000000;\n\n    /* WARNING: NEVER RE-ORDER VARIABLES! Always double-check that new\n       variables are added APPEND-ONLY. Re-ordering variables can\n       permanently BREAK the deployed proxy contract. */\n\n    /// @dev Governance contract\n    ISuperfluidGovernance internal _gov;\n\n    /// @dev Agreement list indexed by agreement index minus one\n    ISuperAgreement[] internal _agreementClasses;\n    /// @dev Mapping between agreement type to agreement index (starting from 1)\n    mapping (bytes32 => uint) internal _agreementClassIndices;\n\n    /// @dev Super token\n    ISuperTokenFactory internal _superTokenFactory;\n\n    /// @dev App manifests\n    mapping(ISuperApp => AppManifest) internal _appManifests;\n    /// @dev Composite app white-listing: source app => (target app => isAllowed)\n    mapping(ISuperApp => mapping(ISuperApp => bool)) internal _compositeApps;\n    /// @dev Ctx stamp of the current transaction, it should always be cleared to\n    ///      zero before transaction finishes\n    bytes32 internal _ctxStamp;\n    /// @dev if app whitelisting is enabled, this is to make sure the secrets are used only once\n    mapping(bytes32 => bool) internal _appSecretsUsed;\n\n    constructor(bool nonUpgradable, bool appWhiteListingEnabled) {\n        NON_UPGRADABLE_DEPLOYMENT = nonUpgradable;\n        APP_WHITE_LISTING_ENABLED = appWhiteListingEnabled;\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // UUPSProxiable\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    function initialize(\n        ISuperfluidGovernance gov\n    )\n        external\n        initializer // OpenZeppelin Initializable\n    {\n        _gov = gov;\n    }\n\n    function proxiableUUID() public pure override returns (bytes32) {\n        return keccak256(\"org.superfluid-finance.contracts.Superfluid.implementation\");\n    }\n\n    function updateCode(address newAddress) external override onlyGovernance {\n        require(!NON_UPGRADABLE_DEPLOYMENT, \"SF: non upgradable\");\n        require(!Superfluid(newAddress).NON_UPGRADABLE_DEPLOYMENT(), \"SF: cannot downgrade to non upgradable\");\n        _updateCodeAddress(newAddress);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Governance\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    function getGovernance() external view override returns (ISuperfluidGovernance) {\n        return _gov;\n    }\n\n    function replaceGovernance(ISuperfluidGovernance newGov) external override onlyGovernance {\n        emit GovernanceReplaced(_gov, newGov);\n        _gov = newGov;\n    }\n\n    /**************************************************************************\n     * Agreement Whitelisting\n     *************************************************************************/\n\n    function registerAgreementClass(ISuperAgreement agreementClassLogic) external onlyGovernance override {\n        bytes32 agreementType = agreementClassLogic.agreementType();\n        require(_agreementClassIndices[agreementType] == 0,\n            \"SF: agreement class already registered\");\n        require(_agreementClasses.length < 256,\n            \"SF: support up to 256 agreement classes\");\n        ISuperAgreement agreementClass;\n        if (!NON_UPGRADABLE_DEPLOYMENT) {\n            // initialize the proxy\n            UUPSProxy proxy = new UUPSProxy();\n            proxy.initializeProxy(address(agreementClassLogic));\n            agreementClass = ISuperAgreement(address(proxy));\n        } else {\n            agreementClass = ISuperAgreement(address(agreementClassLogic));\n        }\n        agreementClass.initialize();\n        // register the agreement proxy\n        _agreementClasses.push((agreementClass));\n        _agreementClassIndices[agreementType] = _agreementClasses.length;\n        emit AgreementClassRegistered(agreementType, address(agreementClassLogic));\n    }\n\n    function updateAgreementClass(ISuperAgreement agreementClassLogic) external onlyGovernance override {\n        require(!NON_UPGRADABLE_DEPLOYMENT, \"SF: non upgradable\");\n        bytes32 agreementType = agreementClassLogic.agreementType();\n        uint idx = _agreementClassIndices[agreementType];\n        require(idx != 0, \"SF: agreement class not registered\");\n        UUPSProxiable proxiable = UUPSProxiable(address(_agreementClasses[idx - 1]));\n        proxiable.updateCode(address(agreementClassLogic));\n        emit AgreementClassUpdated(agreementType, address(agreementClassLogic));\n    }\n\n    function isAgreementTypeListed(bytes32 agreementType)\n        external view override\n        returns (bool yes)\n    {\n        uint idx = _agreementClassIndices[agreementType];\n        return idx != 0;\n    }\n\n    function isAgreementClassListed(ISuperAgreement agreementClass)\n        public view override\n        returns (bool yes)\n    {\n        bytes32 agreementType = agreementClass.agreementType();\n        uint idx = _agreementClassIndices[agreementType];\n        // it should also be the same agreement class proxy address\n        return idx != 0 && _agreementClasses[idx - 1] == agreementClass;\n    }\n\n    function getAgreementClass(bytes32 agreementType)\n        external view override\n        returns(ISuperAgreement agreementClass)\n    {\n        uint idx = _agreementClassIndices[agreementType];\n        require(idx != 0, \"SF: agreement class not registered\");\n        return ISuperAgreement(_agreementClasses[idx - 1]);\n    }\n\n    function mapAgreementClasses(uint256 bitmap)\n        external view override\n        returns (ISuperAgreement[] memory agreementClasses) {\n        uint i;\n        uint n;\n        // create memory output using the counted size\n        agreementClasses = new ISuperAgreement[](_agreementClasses.length);\n        // add to the output\n        n = 0;\n        for (i = 0; i < _agreementClasses.length; ++i) {\n            if ((bitmap & (1 << i)) > 0) {\n                agreementClasses[n++] = _agreementClasses[i];\n            }\n        }\n        // resize memory arrays\n        assembly { mstore(agreementClasses, n) }\n    }\n\n    function addToAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\n        external view override\n        returns (uint256 newBitmap)\n    {\n        uint idx = _agreementClassIndices[agreementType];\n        require(idx != 0, \"SF: agreement class not registered\");\n        return bitmap | (1 << (idx - 1));\n    }\n\n    function removeFromAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\n        external view override\n        returns (uint256 newBitmap)\n    {\n        uint idx = _agreementClassIndices[agreementType];\n        require(idx != 0, \"SF: agreement class not registered\");\n        return bitmap & ~(1 << (idx - 1));\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // Super Token Factory\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    function getSuperTokenFactory()\n        external view override\n        returns (ISuperTokenFactory factory)\n    {\n        return _superTokenFactory;\n    }\n\n    function getSuperTokenFactoryLogic()\n        external view override\n        returns (address logic)\n    {\n        if (address(_superTokenFactory) == address(0)) return address(0);\n        if (NON_UPGRADABLE_DEPLOYMENT) return address(_superTokenFactory);\n        else return UUPSProxiable(address(_superTokenFactory)).getCodeAddress();\n    }\n\n    function updateSuperTokenFactory(ISuperTokenFactory newFactory)\n        external override\n        onlyGovernance\n    {\n        if (address(_superTokenFactory) == address(0)) {\n            if (!NON_UPGRADABLE_DEPLOYMENT) {\n                // initialize the proxy\n                UUPSProxy proxy = new UUPSProxy();\n                proxy.initializeProxy(address(newFactory));\n                _superTokenFactory = ISuperTokenFactory(address(proxy));\n            } else {\n                _superTokenFactory = newFactory;\n            }\n            _superTokenFactory.initialize();\n        } else {\n            require(!NON_UPGRADABLE_DEPLOYMENT, \"SF: non upgradable\");\n            UUPSProxiable(address(_superTokenFactory)).updateCode(address(newFactory));\n        }\n        emit SuperTokenFactoryUpdated(_superTokenFactory);\n    }\n\n    function updateSuperTokenLogic(ISuperToken token)\n        external override\n        onlyGovernance\n    {\n        address code = address(_superTokenFactory.getSuperTokenLogic());\n        // assuming it's uups proxiable\n        UUPSProxiable(address(token)).updateCode(code);\n        emit SuperTokenLogicUpdated(token, code);\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    // App Registry\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    function registerApp(\n        uint256 configWord\n    )\n        external override\n    {\n        // check if whitelisting required\n        if (APP_WHITE_LISTING_ENABLED) {\n            revert(\"SF: app registration key required\");\n        }\n\n        _registerApp(configWord);\n    }\n\n    function registerAppWithKey(uint256 configWord, string calldata registrationKey)\n        external override\n    {\n        bytes32 secretKey = SuperfluidGovernanceConfigs.getAppWhiteListingSecretKey(\n            // solhint-disable-next-line avoid-tx-origin\n            tx.origin,\n            registrationKey);\n        // check if the secret key is enabled\n        require(\n            _gov.getConfigAsUint256(\n                this,\n                ISuperfluidToken(address(0)),\n                secretKey\n            ) == 1,\n            \"SF: invalid registration key\"\n        );\n        require(\n            !_appSecretsUsed[secretKey],\n            \"SF: registration key already used\"\n        );\n        // clear the key so that it can't be reused\n        _appSecretsUsed[secretKey] = true;\n        _registerApp(configWord);\n    }\n\n    function _registerApp(uint256 configWord) private\n    {\n        ISuperApp app = ISuperApp(msg.sender);\n\n        // check if it is called within the constructor\n        // solhint-disable-next-line avoid-tx-origin\n        require(msg.sender != tx.origin, \"SF: APP_RULE_NO_REGISTRATION_FOR_EOA\");\n        {\n            uint256 cs;\n            // solhint-disable-next-line no-inline-assembly\n            assembly { cs := extcodesize(app) }\n            require(cs == 0, \"SF: APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR\");\n        }\n\n        require(\n            SuperAppDefinitions.getAppLevel(configWord) > 0 &&\n            (configWord & SuperAppDefinitions.APP_JAIL_BIT) == 0,\n            \"SF: invalid config word\");\n        require(_appManifests[ISuperApp(msg.sender)].configWord == 0 , \"SF: app already registered\");\n        _appManifests[ISuperApp(msg.sender)] = AppManifest(configWord);\n        emit AppRegistered(app);\n    }\n\n    function isApp(ISuperApp app) public view override returns(bool) {\n        return _appManifests[app].configWord > 0;\n    }\n\n    function getAppLevel(ISuperApp appAddr) public override view returns(uint8) {\n        return SuperAppDefinitions.getAppLevel(_appManifests[appAddr].configWord);\n    }\n\n    function getAppManifest(\n        ISuperApp app\n    )\n        external view override\n        returns (\n            bool isSuperApp,\n            bool isJailed,\n            uint256 noopMask\n        )\n    {\n        AppManifest memory manifest = _appManifests[app];\n        isSuperApp = (manifest.configWord > 0);\n        if (isSuperApp) {\n            isJailed = SuperAppDefinitions.isAppJailed(manifest.configWord);\n            noopMask = manifest.configWord & SuperAppDefinitions.AGREEMENT_CALLBACK_NOOP_BITMASKS;\n        }\n    }\n\n    function isAppJailed(\n        ISuperApp app\n    )\n        public view override\n        returns(bool)\n    {\n        return SuperAppDefinitions.isAppJailed(_appManifests[app].configWord);\n    }\n\n    function allowCompositeApp(\n        ISuperApp targetApp\n    )\n        external override\n    {\n        ISuperApp sourceApp = ISuperApp(msg.sender);\n        require(isApp(sourceApp), \"SF: sender is not an app\");\n        require(isApp(targetApp), \"SF: target is not an app\");\n        require(getAppLevel(sourceApp) > getAppLevel(targetApp), \"SF: source app should have higher app level\");\n        _compositeApps[ISuperApp(msg.sender)][targetApp] = true;\n    }\n\n    function isCompositeAppAllowed(\n        ISuperApp app,\n        ISuperApp targetApp\n    )\n        external view override\n        returns (bool)\n    {\n        return _compositeApps[app][targetApp];\n    }\n\n    /**************************************************************************\n     * Agreement Framework\n     *************************************************************************/\n\n    function callAppBeforeCallback(\n        ISuperApp app,\n        bytes calldata callData,\n        bool isTermination,\n        bytes calldata ctx\n    )\n        external override\n        onlyAgreement\n        returns(bytes memory cbdata)\n    {\n        (bool success, bytes memory returnedData) = _callCallback(app, true, isTermination, callData, ctx);\n        if (success) {\n            if (CallUtils.isValidAbiEncodedBytes(returnedData)) {\n                cbdata = abi.decode(returnedData, (bytes));\n            } else {\n                if (!isTermination) {\n                    revert(\"SF: APP_RULE_CTX_IS_MALFORMATED\");\n                } else {\n                    _jailApp(app, SuperAppDefinitions.APP_RULE_CTX_IS_MALFORMATED);\n                }\n            }\n        }\n    }\n\n    function callAppAfterCallback(\n        ISuperApp app,\n        bytes calldata callData,\n        bool isTermination,\n        bytes calldata ctx\n    )\n        external override\n        onlyAgreement\n        returns(bytes memory newCtx)\n    {\n        (bool success, bytes memory returnedData) = _callCallback(app, false, isTermination, callData, ctx);\n        if (success) {\n            // the non static callback should not return empty ctx\n            if (CallUtils.isValidAbiEncodedBytes(returnedData)) {\n                newCtx = abi.decode(returnedData, (bytes));\n                if (!_isCtxValid(newCtx)) {\n                    if (!isTermination) {\n                        revert(\"SF: APP_RULE_CTX_IS_READONLY\");\n                    } else {\n                        newCtx = ctx;\n                        _jailApp(app, SuperAppDefinitions.APP_RULE_CTX_IS_READONLY);\n                    }\n                }\n            } else {\n                if (!isTermination) {\n                    revert(\"SF: APP_RULE_CTX_IS_MALFORMATED\");\n                } else {\n                    newCtx = ctx;\n                    _jailApp(app, SuperAppDefinitions.APP_RULE_CTX_IS_MALFORMATED);\n                }\n            }\n        } else {\n            newCtx = ctx;\n        }\n    }\n\n    function appCallbackPush(\n        bytes calldata ctx,\n        ISuperApp app,\n        uint256 appAllowanceGranted,\n        int256 appAllowanceUsed\n    )\n        external override\n        onlyAgreement\n        returns (bytes memory appCtx)\n    {\n        Context memory context = decodeCtx(ctx);\n        if (isApp(ISuperApp(context.msgSender))) {\n            require(_compositeApps[ISuperApp(context.msgSender)][app],\n                \"SF: APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED\");\n        }\n        context.appLevel++;\n        context.callType = ContextDefinitions.CALL_INFO_CALL_TYPE_APP_CALLBACK;\n        context.appAllowanceGranted = appAllowanceGranted;\n        context.appAllowanceWanted = 0;\n        context.appAllowanceUsed = appAllowanceUsed;\n        context.appAddress = address(app);\n        appCtx = _updateContext(context);\n    }\n\n    function appCallbackPop(\n        bytes calldata ctx,\n        int256 allowanceUsedDelta\n    )\n        external override\n        onlyAgreement\n        returns (bytes memory newCtx)\n    {\n        Context memory context = decodeCtx(ctx);\n        context.appAllowanceUsed = context.appAllowanceUsed.add(allowanceUsedDelta);\n        newCtx = _updateContext(context);\n    }\n\n    function ctxUseAllowance(\n        bytes calldata ctx,\n        uint256 allowanceWantedMore,\n        int256 allowanceUsedDelta\n    )\n        external override\n        onlyAgreement\n        returns (bytes memory newCtx)\n    {\n        Context memory context = decodeCtx(ctx);\n\n        context.appAllowanceWanted = context.appAllowanceWanted.add(allowanceWantedMore);\n        context.appAllowanceUsed = context.appAllowanceUsed.add(allowanceUsedDelta);\n\n        newCtx = _updateContext(context);\n    }\n\n    function jailApp(\n        bytes calldata ctx,\n        ISuperApp app,\n        uint256 reason\n    )\n        external override\n        onlyAgreement\n        returns (bytes memory newCtx)\n    {\n        _jailApp(app, reason);\n        return ctx;\n    }\n\n    /**************************************************************************\n    * Contextless Call Proxies\n    *************************************************************************/\n\n    function _callAgreement(\n        address msgSender,\n        ISuperAgreement agreementClass,\n        bytes memory callData,\n        bytes memory userData\n    )\n        internal\n        cleanCtx\n        isAgreement(agreementClass)\n        returns(bytes memory returnedData)\n    {\n        // beaware of the endiness\n        bytes4 agreementSelector = CallUtils.parseSelector(callData);\n\n        //Build context data\n        bytes memory  ctx = _updateContext(Context({\n            appLevel: isApp(ISuperApp(msgSender)) ? 1 : 0,\n            callType: ContextDefinitions.CALL_INFO_CALL_TYPE_AGREEMENT,\n            /* solhint-disable-next-line not-rely-on-time */\n            timestamp: block.timestamp,\n            msgSender: msgSender,\n            agreementSelector: agreementSelector,\n            userData: userData,\n            appAllowanceGranted: 0,\n            appAllowanceWanted: 0,\n            appAllowanceUsed: 0,\n            appAddress: address(0)\n        }));\n        bool success;\n        (success, returnedData) = _callExternalWithReplacedCtx(address(agreementClass), callData, ctx);\n        if (!success) {\n            revert(CallUtils.getRevertMsg(returnedData));\n        }\n        // clear the stamp\n        _ctxStamp = 0;\n    }\n\n    function callAgreement(\n        ISuperAgreement agreementClass,\n        bytes memory callData,\n        bytes memory userData\n    )\n        external override\n        returns(bytes memory returnedData)\n    {\n        return _callAgreement(msg.sender, agreementClass, callData, userData);\n    }\n\n    function _callAppAction(\n        address msgSender,\n        ISuperApp app,\n        bytes memory callData\n    )\n        internal\n        cleanCtx\n        isAppActive(app)\n        returns(bytes memory returnedData)\n    {\n        //Build context data\n        bytes memory ctx = _updateContext(Context({\n            appLevel: isApp(ISuperApp(msgSender)) ? 1 : 0,\n            callType: ContextDefinitions.CALL_INFO_CALL_TYPE_APP_ACTION,\n            /* solhint-disable-next-line not-rely-on-time */\n            timestamp: block.timestamp,\n            msgSender: msgSender,\n            agreementSelector: 0,\n            userData: \"\",\n            appAllowanceGranted: 0,\n            appAllowanceWanted: 0,\n            appAllowanceUsed: 0,\n            appAddress: address(app)\n        }));\n        bool success;\n        (success, returnedData) = _callExternalWithReplacedCtx(address(app), callData, ctx);\n        if (success) {\n            ctx = abi.decode(returnedData, (bytes));\n            require(_isCtxValid(ctx), \"SF: APP_RULE_CTX_IS_READONLY\");\n        } else {\n            revert(CallUtils.getRevertMsg(returnedData));\n        }\n        // clear the stamp\n        _ctxStamp = 0;\n    }\n\n    function callAppAction(\n        ISuperApp app,\n        bytes memory callData\n    )\n        external override\n        cleanCtx\n        isAppActive(app)\n        returns(bytes memory returnedData)\n    {\n        return _callAppAction(msg.sender, app, callData);\n    }\n\n    /**************************************************************************\n     * Contextual Call Proxies\n     *************************************************************************/\n\n    function callAgreementWithContext(\n        ISuperAgreement agreementClass,\n        bytes calldata callData,\n        bytes calldata userData,\n        bytes calldata ctx\n    )\n        external override\n        validCtx(ctx)\n        isAgreement(agreementClass)\n        returns (bytes memory newCtx, bytes memory returnedData)\n    {\n        Context memory context = decodeCtx(ctx);\n        require(context.appAddress == msg.sender,  \"SF: callAgreementWithContext from wrong address\");\n\n        address oldSender = context.msgSender;\n        context.msgSender = msg.sender;\n        //context.agreementSelector =;\n        context.userData = userData;\n        newCtx = _updateContext(context);\n\n        bool success;\n        (success, returnedData) = _callExternalWithReplacedCtx(address(agreementClass), callData, newCtx);\n        if (success) {\n            (newCtx) = abi.decode(returnedData, (bytes));\n            assert(_isCtxValid(newCtx));\n            // back to old msg.sender\n            context = decodeCtx(newCtx);\n            context.msgSender = oldSender;\n            newCtx = _updateContext(context);\n        } else {\n            revert(CallUtils.getRevertMsg(returnedData));\n        }\n    }\n\n    function callAppActionWithContext(\n        ISuperApp app,\n        bytes calldata callData,\n        bytes calldata ctx\n    )\n        external override\n        validCtx(ctx)\n        isAppActive(app)\n        returns(bytes memory newCtx)\n    {\n        Context memory context = decodeCtx(ctx);\n        require(context.appAddress == msg.sender,  \"SF: callAppActionWithContext from wrong address\");\n\n        address oldSender = context.msgSender;\n        context.msgSender = msg.sender;\n        newCtx = _updateContext(context);\n\n        (bool success, bytes memory returnedData) = _callExternalWithReplacedCtx(address(app), callData, newCtx);\n        if (success) {\n            (newCtx) = abi.decode(returnedData, (bytes));\n            require(_isCtxValid(newCtx), \"SF: APP_RULE_CTX_IS_READONLY\");\n            // back to old msg.sender\n            context = decodeCtx(newCtx);\n            context.msgSender = oldSender;\n            newCtx = _updateContext(context);\n        } else {\n            revert(CallUtils.getRevertMsg(returnedData));\n        }\n    }\n\n    function decodeCtx(bytes memory ctx)\n        public pure override\n        returns (Context memory context)\n    {\n        uint256 callInfo;\n        uint256 allowanceIO;\n        (\n            callInfo,\n            context.timestamp,\n            context.msgSender,\n            context.agreementSelector,\n            context.userData,\n            allowanceIO,\n            context.appAllowanceUsed,\n            context.appAddress\n        ) = abi.decode(ctx, (uint256, uint256, address, bytes4, bytes, uint256, int256, address));\n        (context.appLevel, context.callType) = ContextDefinitions.decodeCallInfo(callInfo);\n        context.appAllowanceGranted = allowanceIO & type(uint128).max;\n        context.appAllowanceWanted = allowanceIO >> 128;\n    }\n\n    function isCtxValid(bytes calldata ctx)\n        external view override\n        returns (bool)\n    {\n        return _isCtxValid(ctx);\n    }\n\n    /**************************************************************************\n    * Batch call\n    **************************************************************************/\n\n    function _batchCall(\n        address msgSender,\n        Operation[] memory operations\n    )\n       internal\n    {\n        for(uint256 i = 0; i < operations.length; i++) {\n            uint32 operationType = operations[i].operationType;\n            if (operationType == BatchOperation.OPERATION_TYPE_ERC20_APPROVE) {\n                (address spender, uint256 amount) =\n                    abi.decode(operations[i].data, (address, uint256));\n                ISuperToken(operations[i].target).operationApprove(\n                    msgSender,\n                    spender,\n                    amount);\n            } else if (operationType == BatchOperation.OPERATION_TYPE_ERC20_TRANSFER_FROM) {\n                (address sender, address receiver, uint256 amount) =\n                    abi.decode(operations[i].data, (address, address, uint256));\n                ISuperToken(operations[i].target).operationTransferFrom(\n                    msgSender,\n                    sender,\n                    receiver,\n                    amount);\n            } else if (operationType == BatchOperation.OPERATION_TYPE_SUPERTOKEN_UPGRADE) {\n                ISuperToken(operations[i].target).operationUpgrade(\n                    msgSender,\n                    abi.decode(operations[i].data, (uint256)));\n            } else if (operationType == BatchOperation.OPERATION_TYPE_SUPERTOKEN_DOWNGRADE) {\n                ISuperToken(operations[i].target).operationDowngrade(\n                    msgSender,\n                    abi.decode(operations[i].data, (uint256)));\n            } else if (operationType == BatchOperation.OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT) {\n                (bytes memory callData, bytes memory userData) = abi.decode(operations[i].data, (bytes, bytes));\n                _callAgreement(\n                    msgSender,\n                    ISuperAgreement(operations[i].target),\n                    callData,\n                    userData);\n            } else if (operationType == BatchOperation.OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION) {\n                _callAppAction(\n                    msgSender,\n                    ISuperApp(operations[i].target),\n                    operations[i].data);\n            } else {\n               revert(\"SF: unknown batch call operation type\");\n            }\n        }\n    }\n\n    /// @dev ISuperfluid.batchCall implementation\n    function batchCall(\n       Operation[] memory operations\n    )\n       external override\n    {\n        _batchCall(msg.sender, operations);\n    }\n\n    /// @dev ISuperfluid.forwardBatchCall implementation\n    function forwardBatchCall(Operation[] memory operations)\n        external override\n    {\n        _batchCall(_getTransactionSigner(), operations);\n    }\n\n    /// @dev BaseRelayRecipient.isTrustedForwarder implementation\n    function isTrustedForwarder(address forwarder)\n        public view override\n        returns(bool)\n    {\n        return _gov.getConfigAsUint256(\n            this,\n            ISuperfluidToken(address(0)),\n            SuperfluidGovernanceConfigs.getTrustedForwarderConfigKey(forwarder)\n        ) != 0;\n    }\n\n    /// @dev IRelayRecipient.isTrustedForwarder implementation\n    function versionRecipient()\n        external override pure\n        returns (string memory)\n    {\n        return \"v1\";\n    }\n\n    /**************************************************************************\n    * Internal\n    **************************************************************************/\n\n    function _jailApp(ISuperApp app, uint256 reason)\n        internal\n    {\n        if ((_appManifests[app].configWord & SuperAppDefinitions.APP_JAIL_BIT) == 0) {\n            _appManifests[app].configWord |= SuperAppDefinitions.APP_JAIL_BIT;\n            emit Jail(app, reason);\n        }\n    }\n\n    function _updateContext(Context memory context)\n        private\n        returns (bytes memory ctx)\n    {\n        require(context.appLevel <= MAX_APP_LEVEL, \"SF: APP_RULE_MAX_APP_LEVEL_REACHED\");\n        uint256 callInfo = ContextDefinitions.encodeCallInfo(context.appLevel, context.callType);\n        uint256 allowanceIO =\n            context.appAllowanceGranted.toUint128() |\n            (uint256(context.appAllowanceWanted.toUint128()) << 128);\n        ctx = abi.encode(\n            callInfo,\n            context.timestamp,\n            context.msgSender,\n            context.agreementSelector,\n            context.userData,\n            allowanceIO,\n            context.appAllowanceUsed,\n            context.appAddress\n        );\n        _ctxStamp = keccak256(ctx);\n    }\n\n    function _isCtxValid(bytes memory ctx) private view returns (bool) {\n        return ctx.length != 0 && keccak256(ctx) == _ctxStamp;\n    }\n\n    function _callExternalWithReplacedCtx(\n        address target,\n        bytes memory callData,\n        bytes memory ctx\n    )\n        private\n        returns(bool success, bytes memory returnedData)\n    {\n        assert(target != address(0));\n\n        // STEP 1 : replace placeholder ctx with actual ctx\n        callData = _replacePlaceholderCtx(callData, ctx);\n\n        // STEP 2: Call external with replaced context\n        // FIXME make sure existence of target due to EVM rule\n        /* solhint-disable-next-line avoid-low-level-calls */\n        (success, returnedData) = target.call(callData);\n\n        if (success) {\n            require(returnedData.length > 0, \"SF: APP_RULE_CTX_IS_EMPTY\");\n        }\n    }\n\n    function _callCallback(\n        ISuperApp app,\n        bool isStaticall,\n        bool isTermination,\n        bytes memory callData,\n        bytes memory ctx\n    )\n        private\n        returns(bool success, bytes memory returnedData)\n    {\n        assert(address(app) != address(0));\n\n        callData = _replacePlaceholderCtx(callData, ctx);\n\n        uint256 gasLeftBefore = gasleft();\n        if (isStaticall) {\n            /* solhint-disable-next-line avoid-low-level-calls*/\n            (success, returnedData) = address(app).staticcall{ gas: CALLBACK_GAS_LIMIT }(callData);\n        } else {\n            /* solhint-disable-next-line avoid-low-level-calls*/\n            (success, returnedData) = address(app).call{ gas: CALLBACK_GAS_LIMIT }(callData);\n        }\n\n        if (!success) {\n            // \"/ 63\" is a magic to avoid out of gas attack. See https://ronan.eth.link/blog/ethereum-gas-dangers/.\n            // A callback may use this to block the APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK jail rule.\n            if (gasleft() > gasLeftBefore / 63) {\n                if (!isTermination) {\n                    revert(CallUtils.getRevertMsg(returnedData));\n                } else {\n                    //revert(CallUtils.getRevertMsg(returnedData)); { }\n                    _jailApp(app, SuperAppDefinitions.APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK);\n                }\n            } else {\n                // For legit out of gas issue, the call may still fail if more gas is provied\n                // and this is okay, because there can be incentive to jail the app by providing\n                // more gas.\n                revert(\"SF: need more gas\");\n            }\n        }\n    }\n\n    /**\n     * @dev Replace the placeholder ctx with the actual ctx\n     */\n    function _replacePlaceholderCtx(bytes memory data, bytes memory ctx)\n        internal pure\n        returns (bytes memory dataWithCtx)\n    {\n        // 1.a ctx needs to be padded to align with 32 bytes bundary\n        uint256 dataLen = data.length;\n\n        // double check if the ctx is a placeholder ctx\n        {\n            uint256 placeHolderCtxLength;\n            // solhint-disable-next-line no-inline-assembly\n            assembly { placeHolderCtxLength := mload(add(data, dataLen)) }\n            require(placeHolderCtxLength == 0, \"SF: placerholder ctx should have zero length\");\n        }\n\n        // 1.b remove the placeholder ctx\n        // solhint-disable-next-line no-inline-assembly\n        assembly { mstore(data, sub(dataLen, 0x20)) }\n\n        // 1.c pack data with the replacement ctx\n        return abi.encodePacked(\n            data,\n            // bytes with padded length\n            uint256(ctx.length),\n            ctx, new bytes(CallUtils.padLength32(ctx.length) - ctx.length) // ctx padding\n        );\n    }\n\n    modifier validCtx(bytes memory ctx) {\n        require(_isCtxValid(ctx), \"SF: APP_RULE_CTX_IS_NOT_VALID\");\n        _;\n    }\n\n    modifier cleanCtx() {\n        require(_ctxStamp == 0, \"SF: APP_RULE_CTX_IS_NOT_CLEAN\");\n        _;\n    }\n\n    modifier isAgreement(ISuperAgreement agreementClass) {\n        require(isAgreementClassListed(agreementClass), \"SF: only listed agreeement allowed\");\n        _;\n    }\n\n    modifier onlyGovernance() {\n        require(msg.sender == address(_gov), \"SF: only governance allowed\");\n        _;\n    }\n\n    modifier onlyAgreement() {\n        require(isAgreementClassListed(ISuperAgreement(msg.sender)), \"SF: sender is not listed agreeement\");\n        _;\n    }\n\n    modifier isAppActive(ISuperApp app) {\n        uint256 w = _appManifests[app].configWord;\n        require(w > 0, \"SF: not a super app\");\n        require(!SuperAppDefinitions.isAppJailed(w), \"SF: app is jailed\");\n        _;\n    }\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/utils/CallUtils.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.7.6;\n\n\n/**\n * @dev Call utilities that is absent from the OpenZeppelin\n */\nlibrary CallUtils {\n\n    /// @dev Get the revert message from a call\n    /// @notice This is needed in order to get the human-readable revert message from a call\n    /// @param res Response of the call\n    /// @return Revert message string\n    function getRevertMsg(bytes memory res) internal pure returns (string memory) {\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n        if (res.length < 68) return \"CallUtils: target reverted\";\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Slice the sighash.\n            res := add(res, 0x04)\n        }\n        return abi.decode(res, (string)); // All that remains is the revert string\n    }\n\n    /**\n    * @dev Helper method to parse data and extract the method signature (selector).\n    *\n    * Copied from: https://github.com/argentlabs/argent-contracts/\n    * blob/master/contracts/modules/common/Utils.sol#L54-L60\n    */\n    function parseSelector(bytes memory callData) internal pure returns (bytes4 selector) {\n        require(callData.length >= 4, \"CallUtils: invalid callData\");\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            selector := mload(add(callData, 0x20))\n        }\n    }\n\n    /**\n     * @dev Pad length to 32 bytes word boundary\n     */\n    function padLength32(uint256 len) internal pure returns (uint256 paddedLen) {\n        return ((len / 32) +  (((len & 31) > 0) /* rounding? */ ? 1 : 0)) * 32;\n    }\n\n    /**\n     * @dev It the data encoded correctly with abi.encode(bytesData)\n     *\n     * Expected ABI Encode Layout:\n     * | word 1      | word 2           | word 3           | the rest...\n     * | data length | bytesData offset | bytesData length | bytesData + padLength32 zeros |\n     */\n    function isValidAbiEncodedBytes(bytes memory data) internal pure returns (bool) {\n        if (data.length < 64) return false;\n        uint bytesOffset;\n        uint bytesLen;\n        // bytes offset is always expected to be 32\n        assembly { bytesOffset := mload(add(data, 32)) }\n        if (bytesOffset != 32) return false;\n        assembly { bytesLen := mload(add(data, 64)) }\n        // the data length should be bytesData.length + 64 + padded bytes length\n        return data.length == 64 + padLength32(bytesLen);\n    }\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/ux/BaseRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.7.6;\n\n// MODIFIED FROM: https://github.com/opengsn/forwarder/blob/master/contracts/BaseRelayRecipient.sol\n\nimport \"../interfaces/ux/IRelayRecipient.sol\";\n\n/**\n * A base contract to be inherited by any contract that want to receive relayed transactions\n * A subclass must use \"_msgSender()\" instead of \"msg.sender\"\n */\nabstract contract BaseRelayRecipient is IRelayRecipient {\n\n    /**\n     * @dev Check if the forwarder is trusted\n     */\n    function isTrustedForwarder(address forwarder) public view virtual override returns(bool);\n\n    /**\n     * @dev Return the transaction signer of this call\n     *\n     * if the call came through our trusted forwarder, return the original sender.\n     * otherwise, return `msg.sender`.\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _getTransactionSigner() internal virtual view returns (address payable ret) {\n        require(msg.data.length >= 24 && isTrustedForwarder(msg.sender), \"Not trusted forwarder\");\n        // At this point we know that the sender is a trusted forwarder,\n        // so we trust that the last bytes of msg.data are the verified sender address.\n        // extract sender address from the end of msg.data\n        assembly {\n            ret := shr(96,calldataload(sub(calldatasize(),20)))\n        }\n    }\n\n}\n"
    },
    "@superfluid-finance/ethereum-contracts/contracts/interfaces/ux/IRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity >= 0.7.0;\n\n// MODIFIED FROM: https://github.com/opengsn/forwarder/blob/master/contracts/interfaces/IRelayRecipient.sol\n\n/**\n * a contract must implement this interface in order to support relayed transaction.\n * It is better to inherit the BaseRelayRecipient as its implementation.\n */\ninterface IRelayRecipient {\n\n    /**\n     * return if the forwarder is trusted to forward relayed transactions to us.\n     * the forwarder is required to verify the sender's signature, and verify\n     * the call is not a replay.\n     */\n    function isTrustedForwarder(address forwarder) external view returns(bool);\n\n    /**\n     * @dev EIP 2771 version\n     *\n     * NOTE:\n     * - It is not clear if it is actually from the EIP 2771....\n     * - https://docs.biconomy.io/guides/enable-gasless-transactions/eip-2771\n     */\n    function versionRecipient() external view returns (string memory);\n}\n"
    },
    "contracts/test/Superfluid.sol": {
      "content": "pragma solidity 0.7.6;\n\nimport \"@superfluid-finance/ethereum-contracts/contracts/superfluid/Superfluid.sol\";\nimport \"@superfluid-finance/ethereum-contracts/contracts/superfluid/SuperTokenFactory.sol\";\nimport \"@superfluid-finance/ethereum-contracts/contracts/gov/SuperfluidOwnableGovernance.sol\";\nimport \"@superfluid-finance/ethereum-contracts/contracts/agreements/ConstantFlowAgreementV1.sol\";"
    },
    "@superfluid-finance/ethereum-contracts/contracts/gov/SuperfluidOwnableGovernance.sol": {
      "content": "// SPDX-License-Identifier: AGPLv3\npragma solidity 0.7.6;\n\nimport {\n    ISuperfluid,\n    ISuperfluidToken\n} from \"../interfaces/superfluid/ISuperfluid.sol\";\nimport { SuperfluidGovernanceBase } from \"./SuperfluidGovernanceBase.sol\";\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\n\ncontract SuperfluidOwnableGovernance is\n    Ownable,\n    SuperfluidGovernanceBase\n{\n    function _requireAuthorised(ISuperfluid /*host*/)\n        internal view override\n    {\n        require(owner() == _msgSender(), \"SFGov: only owner is authorized\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/test/TestToken.sol": {
      "content": "\n//SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * Basic token only for testing that sends all tokens to creator\n */\ncontract TestToken is ERC20 {\n    constructor(string memory name, string memory symbol, uint256 initialBalance) public\n        ERC20(name, symbol)\n    {\n        _mint(msg.sender, initialBalance);\n    }\n}"
    },
    "contracts/StreamSwapFactory.sol": {
      "content": "// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is disstributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.7.6;\n\n// Builds new StreamSwapPools, logging their addresses and providing `isBPool(address) -> (bool)`\n\nimport \"./StreamSwapPool.sol\";\n\ncontract StreamSwapFactory is BBronze {\n    event LOG_NEW_POOL(\n        address indexed caller,\n        address indexed pool\n    );\n\n    event LOG_BLABS(\n        address indexed caller,\n        address indexed blabs\n    );\n\n    StreamSwapFactoryHelper private immutable _helper;\n    ISuperfluid public immutable _host;\n    IConstantFlowAgreementV1 public immutable _cfa;\n\n    mapping(address=>bool) private _isBPool;\n\n    function isBPool(address b)\n        external view returns (bool)\n    {\n        return _isBPool[b];\n    }\n\n    function newBPool()\n        external\n        returns (StreamSwapPool)\n    {\n        StreamSwapPool bpool = _helper.create(_host, _cfa);\n        _isBPool[address(bpool)] = true;\n        emit LOG_NEW_POOL(msg.sender, address(bpool));\n        bpool.setController(msg.sender);\n        return bpool;\n    }\n\n    address private _blabs;\n\n    constructor(StreamSwapFactoryHelper helper, ISuperfluid host, IConstantFlowAgreementV1 cfa) public {\n        require(ISuperfluid(host).isAgreementClassListed(IConstantFlowAgreementV1(cfa)), \n            \"ERR_BAD_SUPERFLUID\");\n        require(IConstantFlowAgreementV1(cfa).agreementType() == \n            keccak256(\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\"), \"ERR_BAD_CFA\");\n\n        _blabs = msg.sender;\n        _helper = helper;\n        _host = host;\n        _cfa = cfa;\n    }\n\n    function getBLabs()\n        external view\n        returns (address)\n    {\n        return _blabs;\n    }\n\n    function setBLabs(address b)\n        external\n    {\n        require(msg.sender == _blabs, \"ERR_NOT_BLABS\");\n        emit LOG_BLABS(msg.sender, b);\n        _blabs = b;\n    }\n\n    function collect(StreamSwapPool pool)\n        external \n    {\n        require(msg.sender == _blabs, \"ERR_NOT_BLABS\");\n        uint collected = IERC20(pool).balanceOf(address(this));\n        bool xfer = pool.transfer(_blabs, collected);\n        require(xfer, \"ERR_ERC20_FAILED\");\n    }\n}\n\n// spliting this off because the contract is getting bigger\ncontract StreamSwapFactoryHelper {\n    function create(ISuperfluid host, IConstantFlowAgreementV1 cfa)\n        external\n        returns (StreamSwapPool)\n    {\n        StreamSwapPool bpool = new StreamSwapPool(host, cfa);\n        bpool.setController(msg.sender);\n        return bpool;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}